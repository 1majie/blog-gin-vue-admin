/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 80018
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80018
 File Encoding         : 65001

 Date: 17/12/2023 14:06:59
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for assessment
-- ----------------------------
DROP TABLE IF EXISTS `assessment`;
CREATE TABLE `assessment`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `assessment_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '考评内容',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_assessment_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for auto_code_examples
-- ----------------------------
DROP TABLE IF EXISTS `auto_code_examples`;
CREATE TABLE `auto_code_examples`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `auto_code_example_field` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '仅作示例条目无实际作用',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_auto_code_examples_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for casbin_rule
-- ----------------------------
DROP TABLE IF EXISTS `casbin_rule`;
CREATE TABLE `casbin_rule`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ptype` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `v0` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `v1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `v2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `v3` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `v4` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `v5` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `idx_casbin_rule`(`ptype`, `v0`, `v1`, `v2`, `v3`, `v4`, `v5`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 504 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of casbin_rule
-- ----------------------------
INSERT INTO `casbin_rule` VALUES (405, 'p', '888', '/api/createApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (406, 'p', '888', '/api/deleteApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (411, 'p', '888', '/api/deleteApisByIds', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (409, 'p', '888', '/api/getAllApis', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (410, 'p', '888', '/api/getApiById', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (408, 'p', '888', '/api/getApiList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (407, 'p', '888', '/api/updateApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (412, 'p', '888', '/authority/copyAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (413, 'p', '888', '/authority/createAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (414, 'p', '888', '/authority/deleteAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (416, 'p', '888', '/authority/getAuthorityList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (417, 'p', '888', '/authority/setDataAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (415, 'p', '888', '/authority/updateAuthority', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (481, 'p', '888', '/authorityBtn/canRemoveAuthorityBtn', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (480, 'p', '888', '/authorityBtn/getAuthorityBtn', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (479, 'p', '888', '/authorityBtn/setAuthorityBtn', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (453, 'p', '888', '/autoCode/createPackage', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (450, 'p', '888', '/autoCode/createPlug', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (447, 'p', '888', '/autoCode/createTemp', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (455, 'p', '888', '/autoCode/delPackage', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (459, 'p', '888', '/autoCode/delSysHistory', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (449, 'p', '888', '/autoCode/getColumn', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (445, 'p', '888', '/autoCode/getDB', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (456, 'p', '888', '/autoCode/getMeta', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (454, 'p', '888', '/autoCode/getPackage', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (458, 'p', '888', '/autoCode/getSysHistory', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (446, 'p', '888', '/autoCode/getTables', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (451, 'p', '888', '/autoCode/installPlugin', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (448, 'p', '888', '/autoCode/preview', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (452, 'p', '888', '/autoCode/pubPlug', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (457, 'p', '888', '/autoCode/rollback', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (419, 'p', '888', '/casbin/getPolicyPathByAuthorityId', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (418, 'p', '888', '/casbin/updateCasbin', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (483, 'p', '888', '/chatGpt/createSK', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (485, 'p', '888', '/chatGpt/deleteSK', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (484, 'p', '888', '/chatGpt/getSK', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (482, 'p', '888', '/chatGpt/getTable', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (442, 'p', '888', '/customer/customer', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (443, 'p', '888', '/customer/customer', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (441, 'p', '888', '/customer/customer', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (440, 'p', '888', '/customer/customer', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (444, 'p', '888', '/customer/customerList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (478, 'p', '888', '/email/emailTest', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (430, 'p', '888', '/fileUploadAndDownload/breakpointContinue', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (431, 'p', '888', '/fileUploadAndDownload/breakpointContinueFinish', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (434, 'p', '888', '/fileUploadAndDownload/deleteFile', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (435, 'p', '888', '/fileUploadAndDownload/editFileName', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (429, 'p', '888', '/fileUploadAndDownload/findFile', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (436, 'p', '888', '/fileUploadAndDownload/getFileList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (432, 'p', '888', '/fileUploadAndDownload/removeChunk', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (433, 'p', '888', '/fileUploadAndDownload/upload', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (394, 'p', '888', '/jwt/jsonInBlacklist', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (420, 'p', '888', '/menu/addBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (428, 'p', '888', '/menu/addMenuAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (422, 'p', '888', '/menu/deleteBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (424, 'p', '888', '/menu/getBaseMenuById', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (426, 'p', '888', '/menu/getBaseMenuTree', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (421, 'p', '888', '/menu/getMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (427, 'p', '888', '/menu/getMenuAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (425, 'p', '888', '/menu/getMenuList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (423, 'p', '888', '/menu/updateBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (476, 'p', '888', '/simpleUploader/checkFileMd5', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (477, 'p', '888', '/simpleUploader/mergeFileMd5', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (475, 'p', '888', '/simpleUploader/upload', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (465, 'p', '888', '/sysDictionary/createSysDictionary', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (466, 'p', '888', '/sysDictionary/deleteSysDictionary', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (468, 'p', '888', '/sysDictionary/findSysDictionary', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (469, 'p', '888', '/sysDictionary/getSysDictionaryList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (467, 'p', '888', '/sysDictionary/updateSysDictionary', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (461, 'p', '888', '/sysDictionaryDetail/createSysDictionaryDetail', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (462, 'p', '888', '/sysDictionaryDetail/deleteSysDictionaryDetail', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (463, 'p', '888', '/sysDictionaryDetail/findSysDictionaryDetail', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (464, 'p', '888', '/sysDictionaryDetail/getSysDictionaryDetailList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (460, 'p', '888', '/sysDictionaryDetail/updateSysDictionaryDetail', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (470, 'p', '888', '/sysOperationRecord/createSysOperationRecord', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (473, 'p', '888', '/sysOperationRecord/deleteSysOperationRecord', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (474, 'p', '888', '/sysOperationRecord/deleteSysOperationRecordByIds', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (471, 'p', '888', '/sysOperationRecord/findSysOperationRecord', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (472, 'p', '888', '/sysOperationRecord/getSysOperationRecordList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (437, 'p', '888', '/system/getServerInfo', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (438, 'p', '888', '/system/getSystemConfig', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (439, 'p', '888', '/system/setSystemConfig', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (486, 'p', '888', '/tblContent/createTblContent', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (487, 'p', '888', '/tblContent/deleteTblContent', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (488, 'p', '888', '/tblContent/deleteTblContentByIds', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (490, 'p', '888', '/tblContent/findTblContent', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (491, 'p', '888', '/tblContent/getTblContentList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (489, 'p', '888', '/tblContent/updateTblContent', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (492, 'p', '888', '/tblContentMeta/createTblContentMeta', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (493, 'p', '888', '/tblContentMeta/deleteTblContentMeta', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (494, 'p', '888', '/tblContentMeta/deleteTblContentMetaByIds', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (496, 'p', '888', '/tblContentMeta/findTblContentMeta', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (497, 'p', '888', '/tblContentMeta/getTblContentMetaList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (495, 'p', '888', '/tblContentMeta/updateTblContentMeta', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (498, 'p', '888', '/tblMeta/createTblMeta', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (499, 'p', '888', '/tblMeta/deleteTblMeta', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (500, 'p', '888', '/tblMeta/deleteTblMetaByIds', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (502, 'p', '888', '/tblMeta/findTblMeta', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (503, 'p', '888', '/tblMeta/getTblMetaList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (504, 'p', '888', '/tblMeta/getTblMetaListAll', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (501, 'p', '888', '/tblMeta/updateTblMeta', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (396, 'p', '888', '/user/admin_register', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (402, 'p', '888', '/user/changePassword', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (395, 'p', '888', '/user/deleteUser', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (400, 'p', '888', '/user/getUserInfo', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (397, 'p', '888', '/user/getUserList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (404, 'p', '888', '/user/resetPassword', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (399, 'p', '888', '/user/setSelfInfo', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (401, 'p', '888', '/user/setUserAuthorities', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (403, 'p', '888', '/user/setUserAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (398, 'p', '888', '/user/setUserInfo', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (95, 'p', '8881', '/api/createApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (98, 'p', '8881', '/api/deleteApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (100, 'p', '8881', '/api/getAllApis', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (97, 'p', '8881', '/api/getApiById', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (96, 'p', '8881', '/api/getApiList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (99, 'p', '8881', '/api/updateApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (101, 'p', '8881', '/authority/createAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (102, 'p', '8881', '/authority/deleteAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (103, 'p', '8881', '/authority/getAuthorityList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (104, 'p', '8881', '/authority/setDataAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (122, 'p', '8881', '/casbin/getPolicyPathByAuthorityId', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (121, 'p', '8881', '/casbin/updateCasbin', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (128, 'p', '8881', '/customer/customer', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (129, 'p', '8881', '/customer/customer', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (126, 'p', '8881', '/customer/customer', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (127, 'p', '8881', '/customer/customer', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (130, 'p', '8881', '/customer/customerList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (119, 'p', '8881', '/fileUploadAndDownload/deleteFile', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (120, 'p', '8881', '/fileUploadAndDownload/editFileName', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (118, 'p', '8881', '/fileUploadAndDownload/getFileList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (117, 'p', '8881', '/fileUploadAndDownload/upload', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (123, 'p', '8881', '/jwt/jsonInBlacklist', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (107, 'p', '8881', '/menu/addBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (109, 'p', '8881', '/menu/addMenuAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (111, 'p', '8881', '/menu/deleteBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (113, 'p', '8881', '/menu/getBaseMenuById', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (108, 'p', '8881', '/menu/getBaseMenuTree', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (105, 'p', '8881', '/menu/getMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (110, 'p', '8881', '/menu/getMenuAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (106, 'p', '8881', '/menu/getMenuList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (112, 'p', '8881', '/menu/updateBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (124, 'p', '8881', '/system/getSystemConfig', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (125, 'p', '8881', '/system/setSystemConfig', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (94, 'p', '8881', '/user/admin_register', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (114, 'p', '8881', '/user/changePassword', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (131, 'p', '8881', '/user/getUserInfo', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (115, 'p', '8881', '/user/getUserList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (116, 'p', '8881', '/user/setUserAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (133, 'p', '9528', '/api/createApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (136, 'p', '9528', '/api/deleteApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (138, 'p', '9528', '/api/getAllApis', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (135, 'p', '9528', '/api/getApiById', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (134, 'p', '9528', '/api/getApiList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (137, 'p', '9528', '/api/updateApi', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (139, 'p', '9528', '/authority/createAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (140, 'p', '9528', '/authority/deleteAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (141, 'p', '9528', '/authority/getAuthorityList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (142, 'p', '9528', '/authority/setDataAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (169, 'p', '9528', '/autoCode/createTemp', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (160, 'p', '9528', '/casbin/getPolicyPathByAuthorityId', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (159, 'p', '9528', '/casbin/updateCasbin', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (167, 'p', '9528', '/customer/customer', 'DELETE', '', '', '');
INSERT INTO `casbin_rule` VALUES (165, 'p', '9528', '/customer/customer', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (166, 'p', '9528', '/customer/customer', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (164, 'p', '9528', '/customer/customer', 'PUT', '', '', '');
INSERT INTO `casbin_rule` VALUES (168, 'p', '9528', '/customer/customerList', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (157, 'p', '9528', '/fileUploadAndDownload/deleteFile', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (158, 'p', '9528', '/fileUploadAndDownload/editFileName', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (156, 'p', '9528', '/fileUploadAndDownload/getFileList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (155, 'p', '9528', '/fileUploadAndDownload/upload', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (161, 'p', '9528', '/jwt/jsonInBlacklist', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (145, 'p', '9528', '/menu/addBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (147, 'p', '9528', '/menu/addMenuAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (149, 'p', '9528', '/menu/deleteBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (151, 'p', '9528', '/menu/getBaseMenuById', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (146, 'p', '9528', '/menu/getBaseMenuTree', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (143, 'p', '9528', '/menu/getMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (148, 'p', '9528', '/menu/getMenuAuthority', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (144, 'p', '9528', '/menu/getMenuList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (150, 'p', '9528', '/menu/updateBaseMenu', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (162, 'p', '9528', '/system/getSystemConfig', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (163, 'p', '9528', '/system/setSystemConfig', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (132, 'p', '9528', '/user/admin_register', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (152, 'p', '9528', '/user/changePassword', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (170, 'p', '9528', '/user/getUserInfo', 'GET', '', '', '');
INSERT INTO `casbin_rule` VALUES (153, 'p', '9528', '/user/getUserList', 'POST', '', '', '');
INSERT INTO `casbin_rule` VALUES (154, 'p', '9528', '/user/setUserAuthority', 'POST', '', '', '');

-- ----------------------------
-- Table structure for department
-- ----------------------------
DROP TABLE IF EXISTS `department`;
CREATE TABLE `department`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `department_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '部门名称',
  `department_parent_id` bigint(20) NULL DEFAULT NULL COMMENT '父级部门id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_department_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for exa_customers
-- ----------------------------
DROP TABLE IF EXISTS `exa_customers`;
CREATE TABLE `exa_customers`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `customer_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '客户名',
  `customer_phone_data` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '客户手机号',
  `sys_user_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '管理ID',
  `sys_user_authority_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '管理角色ID',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_exa_customers_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for exa_file_chunks
-- ----------------------------
DROP TABLE IF EXISTS `exa_file_chunks`;
CREATE TABLE `exa_file_chunks`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `exa_file_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `file_chunk_number` bigint(20) NULL DEFAULT NULL,
  `file_chunk_path` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_exa_file_chunks_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for exa_file_upload_and_downloads
-- ----------------------------
DROP TABLE IF EXISTS `exa_file_upload_and_downloads`;
CREATE TABLE `exa_file_upload_and_downloads`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件名',
  `url` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件地址',
  `tag` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件标签',
  `key` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '编号',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_exa_file_upload_and_downloads_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 57 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of exa_file_upload_and_downloads
-- ----------------------------
INSERT INTO `exa_file_upload_and_downloads` VALUES (1, '2023-11-14 23:12:57.807', '2023-11-14 23:12:57.807', NULL, '10.png', 'https://qmplusimg.henrongyi.top/gvalogo.png', 'png', '158787308910.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (2, '2023-11-14 23:12:57.807', '2023-11-14 23:12:57.807', NULL, 'logo.png', 'https://qmplusimg.henrongyi.top/1576554439myAvatar.png', 'png', '1587973709logo.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (3, '2023-11-18 10:11:41.700', '2023-11-18 10:11:41.700', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118101141.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231118101141.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (4, '2023-11-18 10:51:57.085', '2023-11-18 10:51:57.085', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118105157.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118105157.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (5, '2023-11-18 10:57:20.047', '2023-11-18 10:57:20.047', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118105720.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118105720.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (6, '2023-11-18 10:59:03.217', '2023-11-18 10:59:03.217', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118105903.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231118105903.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (7, '2023-11-18 11:06:02.929', '2023-11-18 11:06:02.929', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118110602.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231118110602.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (8, '2023-11-18 11:09:57.234', '2023-11-18 11:09:57.234', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118110957.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231118110957.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (9, '2023-11-18 11:10:55.855', '2023-11-18 11:10:55.855', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111055.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118111055.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (10, '2023-11-18 11:12:29.305', '2023-11-18 11:12:29.305', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111229.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231118111229.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (11, '2023-11-18 11:13:04.130', '2023-11-18 11:13:04.130', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111304.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118111304.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (12, '2023-11-18 11:15:13.554', '2023-11-18 11:15:13.554', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111513.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118111513.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (13, '2023-11-18 11:17:07.614', '2023-11-18 11:17:07.614', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111707.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118111707.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (14, '2023-11-18 11:40:36.491', '2023-11-18 11:40:36.491', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118114036.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231118114036.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (15, '2023-11-18 17:16:47.436', '2023-11-18 17:16:47.436', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118171647.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118171647.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (16, '2023-11-18 17:17:47.500', '2023-11-18 17:17:47.500', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118171747.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231118171747.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (17, '2023-11-19 16:06:31.956', '2023-11-19 16:06:31.956', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231119160631.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231119160631.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (18, '2023-11-19 16:08:29.448', '2023-11-19 16:08:29.448', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231119160829.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231119160829.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (19, '2023-11-19 16:09:07.847', '2023-11-19 16:09:07.847', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231119160907.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231119160907.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (20, '2023-11-19 16:10:05.676', '2023-11-19 16:10:05.676', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231119161005.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231119161005.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (21, '2023-11-19 16:13:02.545', '2023-11-19 16:13:02.545', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231119161302.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231119161302.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (22, '2023-11-19 16:14:03.022', '2023-11-19 16:14:03.022', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231119161403.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231119161403.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (23, '2023-11-19 16:14:26.518', '2023-11-19 16:14:26.518', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231119161426.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231119161426.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (24, '2023-11-19 16:20:37.047', '2023-11-19 16:20:37.047', NULL, '81582500616_.pic_hd.jpg', 'uploads/file/d78d3116163290ebd49b433095f555ab_20231119162037.jpg', 'jpg', 'd78d3116163290ebd49b433095f555ab_20231119162037.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (25, '2023-11-20 07:38:57.146', '2023-11-20 07:38:57.146', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120073857.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231120073857.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (26, '2023-11-20 07:46:49.952', '2023-11-20 07:46:49.952', NULL, '2020-03-27 07-09-23.mp4', 'uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231120074647.mp4', 'mp4', 'f9ef1f1d02df3f8a2d4114f73c7435e4_20231120074647.mp4');
INSERT INTO `exa_file_upload_and_downloads` VALUES (27, '2023-11-20 07:47:38.240', '2023-11-20 07:47:38.240', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231120074738.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (28, '2023-11-20 07:47:45.620', '2023-11-20 07:47:45.620', NULL, 'image.png', 'uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png', 'png', '78805a221a988e79ef3f42d7c5bfd418_20231120074745.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (29, '2023-11-20 07:48:06.057', '2023-11-20 07:48:06.057', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231120074806.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231120074806.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (30, '2023-11-28 11:39:52.209', '2023-11-28 11:39:52.209', NULL, '一码界.png', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231128113952.png', 'png', '59f4066e9f37f63b10291cb8a3f43bcc_20231128113952.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (31, '2023-12-05 07:14:35.070', '2023-12-05 07:14:35.070', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (32, '2023-12-05 07:16:14.145', '2023-12-05 07:16:14.145', NULL, '一码界.jpg', 'uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071614.jpg', 'jpg', '59f4066e9f37f63b10291cb8a3f43bcc_20231205071614.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (33, '2023-12-05 07:17:01.278', '2023-12-05 07:17:01.278', NULL, '2020-03-27 07-09-23.mp4', 'uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231205071700.mp4', 'mp4', 'f9ef1f1d02df3f8a2d4114f73c7435e4_20231205071700.mp4');
INSERT INTO `exa_file_upload_and_downloads` VALUES (34, '2023-12-05 07:35:19.217', '2023-12-05 07:35:19.217', NULL, '截屏2021-06-27 下午9.42.22.png', 'uploads/file/fb8469a0c94528ce71e415c904d3be9a_20231205073519.png', 'png', 'fb8469a0c94528ce71e415c904d3be9a_20231205073519.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (35, '2023-12-08 20:36:46.798', '2023-12-08 20:36:46.798', NULL, '交换机 (1).png', 'uploads/file/f9e6dcfa43f9d04d915bd80b38941b96_20231208203646.png', 'png', 'f9e6dcfa43f9d04d915bd80b38941b96_20231208203646.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (36, '2023-12-08 20:37:04.727', '2023-12-08 20:37:04.727', NULL, 'Screenshot_2022-11-04_09-01-39.png', 'uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png', 'png', '59ff290b8e008b4e2199feef0d82c00f_20231208203704.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (37, '2023-12-08 20:37:53.546', '2023-12-08 20:37:53.546', NULL, '2020-03-27 07-09-23.mp4', 'uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4', 'mp4', 'f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4');
INSERT INTO `exa_file_upload_and_downloads` VALUES (38, '2023-12-09 06:32:50.706', '2023-12-09 06:32:50.706', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063250.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063250.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (39, '2023-12-09 06:33:39.769', '2023-12-09 06:33:39.769', NULL, 'pexels-claudia-marogna-19287989.jpg', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg', 'jpg', '6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (40, '2023-12-09 06:33:48.428', '2023-12-09 06:33:48.428', NULL, 'pexels-christyn-reyes-16143559.jpg', 'uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg', 'jpg', '46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (41, '2023-12-09 06:34:00.034', '2023-12-09 06:34:00.034', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063359.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063359.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (42, '2023-12-09 06:34:27.995', '2023-12-09 06:34:27.995', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063427.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063427.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (43, '2023-12-09 06:34:50.851', '2023-12-09 06:34:50.851', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063450.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063450.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (44, '2023-12-09 06:35:08.238', '2023-12-09 06:35:08.238', NULL, 'pexels-claudia-marogna-19287989.jpg', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063508.jpg', 'jpg', '6d797ee2eded5e2119fc6f336e6c6263_20231209063508.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (45, '2023-12-09 06:35:25.509', '2023-12-09 06:35:25.509', NULL, 'pexels-claudia-marogna-19287989.jpg', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg', 'jpg', '6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (46, '2023-12-09 06:35:42.474', '2023-12-09 06:35:42.474', NULL, 'pexels-claudia-marogna-19287989.jpg', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063542.jpg', 'jpg', '6d797ee2eded5e2119fc6f336e6c6263_20231209063542.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (47, '2023-12-09 06:35:59.002', '2023-12-09 06:35:59.002', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063558.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063558.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (48, '2023-12-09 06:36:16.689', '2023-12-09 06:36:16.689', NULL, 'pexels-christyn-reyes-16143559.jpg', 'uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063616.jpg', 'jpg', '46bd87611b6bcb5fab43f7cf20ac7647_20231209063616.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (49, '2023-12-09 06:36:31.737', '2023-12-09 06:36:31.737', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063631.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063631.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (50, '2023-12-09 06:36:43.266', '2023-12-09 06:36:43.266', NULL, 'pexels-connor-steinert-13135837.jpg', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063643.jpg', 'jpg', 'd2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063643.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (51, '2023-12-14 08:34:43.683', '2023-12-14 08:34:43.683', NULL, 'weipay.jpg', 'uploads/file/6f1155baab9a83be460c595e92739c3f_20231214083443.jpg', 'jpg', '6f1155baab9a83be460c595e92739c3f_20231214083443.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (52, '2023-12-14 22:44:33.185', '2023-12-14 22:44:33.185', NULL, 'bilibili.png', 'uploads/file/130e29f351572e58c49fd4c910d7beb0_20231214224433.png', 'png', '130e29f351572e58c49fd4c910d7beb0_20231214224433.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (53, '2023-12-14 22:45:48.905', '2023-12-14 22:45:48.905', NULL, 'youtube.png', 'uploads/file/ba9bf05693b9fa202d922dd43a08f281_20231214224548.png', 'png', 'ba9bf05693b9fa202d922dd43a08f281_20231214224548.png');
INSERT INTO `exa_file_upload_and_downloads` VALUES (54, '2023-12-14 22:46:43.156', '2023-12-14 22:46:43.156', NULL, 'alipay.jpg', 'uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg', 'jpg', 'fa42b816950b79e3c969c637657845ad_20231214224643.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (55, '2023-12-14 22:47:02.863', '2023-12-14 22:47:02.863', NULL, '微信图片_20231214061941.jpg', 'uploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg', 'jpg', '33c6287e4d35965787db421e8cb16689_20231214224702.jpg');
INSERT INTO `exa_file_upload_and_downloads` VALUES (56, '2023-12-15 06:28:46.723', '2023-12-15 06:28:46.723', NULL, 'weipay.jpg', 'uploads/file/6f1155baab9a83be460c595e92739c3f_20231215062846.jpg', 'jpg', '6f1155baab9a83be460c595e92739c3f_20231215062846.jpg');

-- ----------------------------
-- Table structure for exa_files
-- ----------------------------
DROP TABLE IF EXISTS `exa_files`;
CREATE TABLE `exa_files`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `file_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `file_md5` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `file_path` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `chunk_total` bigint(20) NULL DEFAULT NULL,
  `is_finish` tinyint(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_exa_files_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for job_titles
-- ----------------------------
DROP TABLE IF EXISTS `job_titles`;
CREATE TABLE `job_titles`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `job_title_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '职称',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_job_titles_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for jwt_blacklists
-- ----------------------------
DROP TABLE IF EXISTS `jwt_blacklists`;
CREATE TABLE `jwt_blacklists`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `jwt` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT 'jwt',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_jwt_blacklists_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of jwt_blacklists
-- ----------------------------
INSERT INTO `jwt_blacklists` VALUES (6, '2023-12-16 12:40:29.349', '2023-12-16 12:40:29.349', NULL, 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVVUlEIjoiZDk2YjhiODYtNzJiOS00MGE5LTgxY2EtOGQwZDYyNWQ4MDcxIiwiSUQiOjEsIlVzZXJuYW1lIjoiYWRtaW4iLCJOaWNrTmFtZSI6Ik1yLuWlh-a3vCIsIkF1dGhvcml0eUlkIjo4ODgsIkJ1ZmZlclRpbWUiOjg2NDAwLCJpc3MiOiJxbVBsdXMiLCJhdWQiOlsiR1ZBIl0sImV4cCI6MTcwMzI4NjUwOCwibmJmIjoxNzAyMTYwNzU2fQ.pcHeHqbbiKhsVKsemmzXT2Q3FqYrc5vTvOHB-R4MGbo');

-- ----------------------------
-- Table structure for leave
-- ----------------------------
DROP TABLE IF EXISTS `leave`;
CREATE TABLE `leave`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `leave_reason` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请假事由',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_leave_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for license
-- ----------------------------
DROP TABLE IF EXISTS `license`;
CREATE TABLE `license`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `license_sn` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '序列号',
  `license_assets` bigint(20) NULL DEFAULT NULL COMMENT '资源数',
  `license_days` bigint(20) NULL DEFAULT NULL COMMENT '天数',
  `license_product_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '产品名称',
  `license_oem_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '代理商名称',
  `license_user_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '申请人',
  `license_file_md5` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'md5',
  `license_file_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'licence file path',
  `start_date_time` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `end_date_time` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_license_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for position
-- ----------------------------
DROP TABLE IF EXISTS `position`;
CREATE TABLE `position`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `position_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '职位',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_position_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for product
-- ----------------------------
DROP TABLE IF EXISTS `product`;
CREATE TABLE `product`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `product_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '产品名称',
  `product_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '产品关键字',
  `product_describe` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '产品描述',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_product_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for rewards
-- ----------------------------
DROP TABLE IF EXISTS `rewards`;
CREATE TABLE `rewards`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `reward_reason` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '奖惩原因',
  `reward_fraction` bigint(20) NULL DEFAULT NULL COMMENT '奖惩分数',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_rewards_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for salary_reason
-- ----------------------------
DROP TABLE IF EXISTS `salary_reason`;
CREATE TABLE `salary_reason`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `salary_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '调薪原因',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_salary_reason_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_apis
-- ----------------------------
DROP TABLE IF EXISTS `sys_apis`;
CREATE TABLE `sys_apis`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `path` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'api路径',
  `description` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'api中文描述',
  `api_group` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'api组',
  `method` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'POST' COMMENT '方法',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_apis_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 113 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_apis
-- ----------------------------
INSERT INTO `sys_apis` VALUES (1, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/jwt/jsonInBlacklist', 'jwt加入黑名单(退出，必选)', 'jwt', 'POST');
INSERT INTO `sys_apis` VALUES (2, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/deleteUser', '删除用户', '系统用户', 'DELETE');
INSERT INTO `sys_apis` VALUES (3, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/admin_register', '用户注册', '系统用户', 'POST');
INSERT INTO `sys_apis` VALUES (4, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/getUserList', '获取用户列表', '系统用户', 'POST');
INSERT INTO `sys_apis` VALUES (5, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/setUserInfo', '设置用户信息', '系统用户', 'PUT');
INSERT INTO `sys_apis` VALUES (6, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/setSelfInfo', '设置自身信息(必选)', '系统用户', 'PUT');
INSERT INTO `sys_apis` VALUES (7, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/getUserInfo', '获取自身信息(必选)', '系统用户', 'GET');
INSERT INTO `sys_apis` VALUES (8, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/setUserAuthorities', '设置权限组', '系统用户', 'POST');
INSERT INTO `sys_apis` VALUES (9, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/changePassword', '修改密码（建议选择)', '系统用户', 'POST');
INSERT INTO `sys_apis` VALUES (10, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/setUserAuthority', '修改用户角色(必选)', '系统用户', 'POST');
INSERT INTO `sys_apis` VALUES (11, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/user/resetPassword', '重置用户密码', '系统用户', 'POST');
INSERT INTO `sys_apis` VALUES (12, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/createApi', '创建api', 'api', 'POST');
INSERT INTO `sys_apis` VALUES (13, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/deleteApi', '删除Api', 'api', 'POST');
INSERT INTO `sys_apis` VALUES (14, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/updateApi', '更新Api', 'api', 'POST');
INSERT INTO `sys_apis` VALUES (15, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/getApiList', '获取api列表', 'api', 'POST');
INSERT INTO `sys_apis` VALUES (16, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/getAllApis', '获取所有api', 'api', 'POST');
INSERT INTO `sys_apis` VALUES (17, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/getApiById', '获取api详细信息', 'api', 'POST');
INSERT INTO `sys_apis` VALUES (18, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/api/deleteApisByIds', '批量删除api', 'api', 'DELETE');
INSERT INTO `sys_apis` VALUES (19, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authority/copyAuthority', '拷贝角色', '角色', 'POST');
INSERT INTO `sys_apis` VALUES (20, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authority/createAuthority', '创建角色', '角色', 'POST');
INSERT INTO `sys_apis` VALUES (21, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authority/deleteAuthority', '删除角色', '角色', 'POST');
INSERT INTO `sys_apis` VALUES (22, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authority/updateAuthority', '更新角色信息', '角色', 'PUT');
INSERT INTO `sys_apis` VALUES (23, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authority/getAuthorityList', '获取角色列表', '角色', 'POST');
INSERT INTO `sys_apis` VALUES (24, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authority/setDataAuthority', '设置角色资源权限', '角色', 'POST');
INSERT INTO `sys_apis` VALUES (25, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/casbin/updateCasbin', '更改角色api权限', 'casbin', 'POST');
INSERT INTO `sys_apis` VALUES (26, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/casbin/getPolicyPathByAuthorityId', '获取权限列表', 'casbin', 'POST');
INSERT INTO `sys_apis` VALUES (27, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/addBaseMenu', '新增菜单', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (28, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/getMenu', '获取菜单树(必选)', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (29, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/deleteBaseMenu', '删除菜单', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (30, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/updateBaseMenu', '更新菜单', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (31, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/getBaseMenuById', '根据id获取菜单', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (32, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/getMenuList', '分页获取基础menu列表', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (33, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/getBaseMenuTree', '获取用户动态路由', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (34, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/getMenuAuthority', '获取指定角色menu', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (35, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/menu/addMenuAuthority', '增加menu和角色关联关系', '菜单', 'POST');
INSERT INTO `sys_apis` VALUES (36, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/findFile', '寻找目标文件（秒传）', '分片上传', 'GET');
INSERT INTO `sys_apis` VALUES (37, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/breakpointContinue', '断点续传', '分片上传', 'POST');
INSERT INTO `sys_apis` VALUES (38, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/breakpointContinueFinish', '断点续传完成', '分片上传', 'POST');
INSERT INTO `sys_apis` VALUES (39, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/removeChunk', '上传完成移除文件', '分片上传', 'POST');
INSERT INTO `sys_apis` VALUES (40, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/upload', '文件上传示例', '文件上传与下载', 'POST');
INSERT INTO `sys_apis` VALUES (41, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/deleteFile', '删除文件', '文件上传与下载', 'POST');
INSERT INTO `sys_apis` VALUES (42, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/editFileName', '文件名或者备注编辑', '文件上传与下载', 'POST');
INSERT INTO `sys_apis` VALUES (43, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/fileUploadAndDownload/getFileList', '获取上传文件列表', '文件上传与下载', 'POST');
INSERT INTO `sys_apis` VALUES (44, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/system/getServerInfo', '获取服务器信息', '系统服务', 'POST');
INSERT INTO `sys_apis` VALUES (45, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/system/getSystemConfig', '获取配置文件内容', '系统服务', 'POST');
INSERT INTO `sys_apis` VALUES (46, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/system/setSystemConfig', '设置配置文件内容', '系统服务', 'POST');
INSERT INTO `sys_apis` VALUES (47, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/customer/customer', '更新客户', '客户', 'PUT');
INSERT INTO `sys_apis` VALUES (48, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/customer/customer', '创建客户', '客户', 'POST');
INSERT INTO `sys_apis` VALUES (49, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/customer/customer', '删除客户', '客户', 'DELETE');
INSERT INTO `sys_apis` VALUES (50, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/customer/customer', '获取单一客户', '客户', 'GET');
INSERT INTO `sys_apis` VALUES (51, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/customer/customerList', '获取客户列表', '客户', 'GET');
INSERT INTO `sys_apis` VALUES (52, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/getDB', '获取所有数据库', '代码生成器', 'GET');
INSERT INTO `sys_apis` VALUES (53, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/getTables', '获取数据库表', '代码生成器', 'GET');
INSERT INTO `sys_apis` VALUES (54, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/createTemp', '自动化代码', '代码生成器', 'POST');
INSERT INTO `sys_apis` VALUES (55, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/preview', '预览自动化代码', '代码生成器', 'POST');
INSERT INTO `sys_apis` VALUES (56, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/getColumn', '获取所选table的所有字段', '代码生成器', 'GET');
INSERT INTO `sys_apis` VALUES (57, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/createPlug', '自动创建插件包', '代码生成器', 'POST');
INSERT INTO `sys_apis` VALUES (58, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/installPlugin', '安装插件', '代码生成器', 'POST');
INSERT INTO `sys_apis` VALUES (59, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/pubPlug', '打包插件', '代码生成器', 'POST');
INSERT INTO `sys_apis` VALUES (60, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/createPackage', '生成包(package)', '包（pkg）生成器', 'POST');
INSERT INTO `sys_apis` VALUES (61, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/getPackage', '获取所有包(package)', '包（pkg）生成器', 'POST');
INSERT INTO `sys_apis` VALUES (62, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/delPackage', '删除包(package)', '包（pkg）生成器', 'POST');
INSERT INTO `sys_apis` VALUES (63, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/getMeta', '获取meta信息', '代码生成器历史', 'POST');
INSERT INTO `sys_apis` VALUES (64, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/rollback', '回滚自动生成代码', '代码生成器历史', 'POST');
INSERT INTO `sys_apis` VALUES (65, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/getSysHistory', '查询回滚记录', '代码生成器历史', 'POST');
INSERT INTO `sys_apis` VALUES (66, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/autoCode/delSysHistory', '删除回滚记录', '代码生成器历史', 'POST');
INSERT INTO `sys_apis` VALUES (67, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionaryDetail/updateSysDictionaryDetail', '更新字典内容', '系统字典详情', 'PUT');
INSERT INTO `sys_apis` VALUES (68, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionaryDetail/createSysDictionaryDetail', '新增字典内容', '系统字典详情', 'POST');
INSERT INTO `sys_apis` VALUES (69, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionaryDetail/deleteSysDictionaryDetail', '删除字典内容', '系统字典详情', 'DELETE');
INSERT INTO `sys_apis` VALUES (70, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionaryDetail/findSysDictionaryDetail', '根据ID获取字典内容', '系统字典详情', 'GET');
INSERT INTO `sys_apis` VALUES (71, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionaryDetail/getSysDictionaryDetailList', '获取字典内容列表', '系统字典详情', 'GET');
INSERT INTO `sys_apis` VALUES (72, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionary/createSysDictionary', '新增字典', '系统字典', 'POST');
INSERT INTO `sys_apis` VALUES (73, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionary/deleteSysDictionary', '删除字典', '系统字典', 'DELETE');
INSERT INTO `sys_apis` VALUES (74, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionary/updateSysDictionary', '更新字典', '系统字典', 'PUT');
INSERT INTO `sys_apis` VALUES (75, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionary/findSysDictionary', '根据ID获取字典', '系统字典', 'GET');
INSERT INTO `sys_apis` VALUES (76, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysDictionary/getSysDictionaryList', '获取字典列表', '系统字典', 'GET');
INSERT INTO `sys_apis` VALUES (77, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysOperationRecord/createSysOperationRecord', '新增操作记录', '操作记录', 'POST');
INSERT INTO `sys_apis` VALUES (78, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysOperationRecord/findSysOperationRecord', '根据ID获取操作记录', '操作记录', 'GET');
INSERT INTO `sys_apis` VALUES (79, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysOperationRecord/getSysOperationRecordList', '获取操作记录列表', '操作记录', 'GET');
INSERT INTO `sys_apis` VALUES (80, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysOperationRecord/deleteSysOperationRecord', '删除操作记录', '操作记录', 'DELETE');
INSERT INTO `sys_apis` VALUES (81, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/sysOperationRecord/deleteSysOperationRecordByIds', '批量删除操作历史', '操作记录', 'DELETE');
INSERT INTO `sys_apis` VALUES (82, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/simpleUploader/upload', '插件版分片上传', '断点续传(插件版)', 'POST');
INSERT INTO `sys_apis` VALUES (83, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/simpleUploader/checkFileMd5', '文件完整度验证', '断点续传(插件版)', 'GET');
INSERT INTO `sys_apis` VALUES (84, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/simpleUploader/mergeFileMd5', '上传完成合并文件', '断点续传(插件版)', 'GET');
INSERT INTO `sys_apis` VALUES (85, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/email/emailTest', '发送测试邮件', 'email', 'POST');
INSERT INTO `sys_apis` VALUES (86, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/email/emailSend', '发送邮件示例', 'email', 'POST');
INSERT INTO `sys_apis` VALUES (87, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authorityBtn/setAuthorityBtn', '设置按钮权限', '按钮权限', 'POST');
INSERT INTO `sys_apis` VALUES (88, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authorityBtn/getAuthorityBtn', '获取已有按钮权限', '按钮权限', 'POST');
INSERT INTO `sys_apis` VALUES (89, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/authorityBtn/canRemoveAuthorityBtn', '删除按钮', '按钮权限', 'POST');
INSERT INTO `sys_apis` VALUES (90, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/chatGpt/getTable', '通过gpt获取内容', '万用表格', 'POST');
INSERT INTO `sys_apis` VALUES (91, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/chatGpt/createSK', '录入sk', '万用表格', 'POST');
INSERT INTO `sys_apis` VALUES (92, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/chatGpt/getSK', '获取sk', '万用表格', 'GET');
INSERT INTO `sys_apis` VALUES (93, '2023-11-14 23:12:57.598', '2023-11-14 23:12:57.598', NULL, '/chatGpt/deleteSK', '删除sk', '万用表格', 'DELETE');
INSERT INTO `sys_apis` VALUES (94, '2023-11-15 08:23:13.486', '2023-11-15 08:23:13.486', NULL, '/tblContent/createTblContent', '新增tblContent表', 'tblContent表', 'POST');
INSERT INTO `sys_apis` VALUES (95, '2023-11-15 08:23:13.487', '2023-11-15 08:23:13.487', NULL, '/tblContent/deleteTblContent', '删除tblContent表', 'tblContent表', 'DELETE');
INSERT INTO `sys_apis` VALUES (96, '2023-11-15 08:23:13.489', '2023-11-15 08:23:13.489', NULL, '/tblContent/deleteTblContentByIds', '批量删除tblContent表', 'tblContent表', 'DELETE');
INSERT INTO `sys_apis` VALUES (97, '2023-11-15 08:23:13.490', '2023-11-15 08:23:13.490', NULL, '/tblContent/updateTblContent', '更新tblContent表', 'tblContent表', 'PUT');
INSERT INTO `sys_apis` VALUES (98, '2023-11-15 08:23:13.491', '2023-11-15 08:23:13.491', NULL, '/tblContent/findTblContent', '根据ID获取tblContent表', 'tblContent表', 'GET');
INSERT INTO `sys_apis` VALUES (99, '2023-11-15 08:23:13.492', '2023-11-15 08:23:13.492', NULL, '/tblContent/getTblContentList', '获取tblContent表列表', 'tblContent表', 'GET');
INSERT INTO `sys_apis` VALUES (100, '2023-11-15 08:23:43.372', '2023-11-15 08:23:43.372', NULL, '/tblContentMeta/createTblContentMeta', '新增tblContentMeta表', 'tblContentMeta表', 'POST');
INSERT INTO `sys_apis` VALUES (101, '2023-11-15 08:23:43.373', '2023-11-15 08:23:43.373', NULL, '/tblContentMeta/deleteTblContentMeta', '删除tblContentMeta表', 'tblContentMeta表', 'DELETE');
INSERT INTO `sys_apis` VALUES (102, '2023-11-15 08:23:43.374', '2023-11-15 08:23:43.374', NULL, '/tblContentMeta/deleteTblContentMetaByIds', '批量删除tblContentMeta表', 'tblContentMeta表', 'DELETE');
INSERT INTO `sys_apis` VALUES (103, '2023-11-15 08:23:43.376', '2023-11-15 08:23:43.376', NULL, '/tblContentMeta/updateTblContentMeta', '更新tblContentMeta表', 'tblContentMeta表', 'PUT');
INSERT INTO `sys_apis` VALUES (104, '2023-11-15 08:23:43.377', '2023-11-15 08:23:43.377', NULL, '/tblContentMeta/findTblContentMeta', '根据ID获取tblContentMeta表', 'tblContentMeta表', 'GET');
INSERT INTO `sys_apis` VALUES (105, '2023-11-15 08:23:43.379', '2023-11-15 08:23:43.379', NULL, '/tblContentMeta/getTblContentMetaList', '获取tblContentMeta表列表', 'tblContentMeta表', 'GET');
INSERT INTO `sys_apis` VALUES (106, '2023-11-15 08:24:02.848', '2023-11-15 08:24:02.848', NULL, '/tblMeta/createTblMeta', '新增tblMeta表', 'tblMeta表', 'POST');
INSERT INTO `sys_apis` VALUES (107, '2023-11-15 08:24:02.850', '2023-11-15 08:24:02.850', NULL, '/tblMeta/deleteTblMeta', '删除tblMeta表', 'tblMeta表', 'DELETE');
INSERT INTO `sys_apis` VALUES (108, '2023-11-15 08:24:02.851', '2023-11-15 08:24:02.851', NULL, '/tblMeta/deleteTblMetaByIds', '批量删除tblMeta表', 'tblMeta表', 'DELETE');
INSERT INTO `sys_apis` VALUES (109, '2023-11-15 08:24:02.853', '2023-11-15 08:24:02.853', NULL, '/tblMeta/updateTblMeta', '更新tblMeta表', 'tblMeta表', 'PUT');
INSERT INTO `sys_apis` VALUES (110, '2023-11-15 08:24:02.855', '2023-11-15 08:24:02.855', NULL, '/tblMeta/findTblMeta', '根据ID获取tblMeta表', 'tblMeta表', 'GET');
INSERT INTO `sys_apis` VALUES (111, '2023-11-15 08:24:02.857', '2023-11-15 08:24:02.857', NULL, '/tblMeta/getTblMetaList', '获取tblMeta表列表', 'tblMeta表', 'GET');
INSERT INTO `sys_apis` VALUES (112, '2023-11-28 11:18:13.148', '2023-11-28 11:18:13.148', NULL, '/tblMeta/getTblMetaListAll', '获取所有的菜单类型', 'tblMeta表', 'GET');

-- ----------------------------
-- Table structure for sys_authorities
-- ----------------------------
DROP TABLE IF EXISTS `sys_authorities`;
CREATE TABLE `sys_authorities`  (
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `authority_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  `authority_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色名',
  `parent_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '父角色ID',
  `default_router` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'dashboard' COMMENT '默认菜单',
  PRIMARY KEY (`authority_id`) USING BTREE,
  UNIQUE INDEX `authority_id`(`authority_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9529 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_authorities
-- ----------------------------
INSERT INTO `sys_authorities` VALUES ('2023-11-14 23:12:57.609', '2023-11-16 07:22:04.935', NULL, 888, '普通用户', 0, 'dashboard');
INSERT INTO `sys_authorities` VALUES ('2023-11-14 23:12:57.609', '2023-11-14 23:12:57.804', NULL, 8881, '普通用户子角色', 888, 'dashboard');
INSERT INTO `sys_authorities` VALUES ('2023-11-14 23:12:57.609', '2023-11-14 23:12:57.798', NULL, 9528, '测试角色', 0, 'dashboard');

-- ----------------------------
-- Table structure for sys_authority_btns
-- ----------------------------
DROP TABLE IF EXISTS `sys_authority_btns`;
CREATE TABLE `sys_authority_btns`  (
  `authority_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '角色ID',
  `sys_menu_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '菜单ID',
  `sys_base_menu_btn_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '菜单按钮ID'
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_authority_menus
-- ----------------------------
DROP TABLE IF EXISTS `sys_authority_menus`;
CREATE TABLE `sys_authority_menus`  (
  `sys_base_menu_id` bigint(20) UNSIGNED NOT NULL,
  `sys_authority_authority_id` bigint(20) UNSIGNED NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`sys_base_menu_id`, `sys_authority_authority_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_authority_menus
-- ----------------------------
INSERT INTO `sys_authority_menus` VALUES (1, 888);
INSERT INTO `sys_authority_menus` VALUES (1, 8881);
INSERT INTO `sys_authority_menus` VALUES (1, 9528);
INSERT INTO `sys_authority_menus` VALUES (3, 888);
INSERT INTO `sys_authority_menus` VALUES (4, 888);
INSERT INTO `sys_authority_menus` VALUES (4, 8881);
INSERT INTO `sys_authority_menus` VALUES (5, 888);
INSERT INTO `sys_authority_menus` VALUES (5, 8881);
INSERT INTO `sys_authority_menus` VALUES (6, 888);
INSERT INTO `sys_authority_menus` VALUES (6, 8881);
INSERT INTO `sys_authority_menus` VALUES (7, 888);
INSERT INTO `sys_authority_menus` VALUES (7, 8881);
INSERT INTO `sys_authority_menus` VALUES (8, 888);
INSERT INTO `sys_authority_menus` VALUES (8, 8881);
INSERT INTO `sys_authority_menus` VALUES (8, 9528);
INSERT INTO `sys_authority_menus` VALUES (9, 888);
INSERT INTO `sys_authority_menus` VALUES (9, 8881);
INSERT INTO `sys_authority_menus` VALUES (10, 888);
INSERT INTO `sys_authority_menus` VALUES (10, 8881);
INSERT INTO `sys_authority_menus` VALUES (11, 888);
INSERT INTO `sys_authority_menus` VALUES (11, 8881);
INSERT INTO `sys_authority_menus` VALUES (12, 888);
INSERT INTO `sys_authority_menus` VALUES (13, 888);
INSERT INTO `sys_authority_menus` VALUES (13, 8881);
INSERT INTO `sys_authority_menus` VALUES (14, 888);
INSERT INTO `sys_authority_menus` VALUES (14, 8881);
INSERT INTO `sys_authority_menus` VALUES (15, 888);
INSERT INTO `sys_authority_menus` VALUES (15, 8881);
INSERT INTO `sys_authority_menus` VALUES (16, 888);
INSERT INTO `sys_authority_menus` VALUES (16, 8881);
INSERT INTO `sys_authority_menus` VALUES (17, 888);
INSERT INTO `sys_authority_menus` VALUES (17, 8881);
INSERT INTO `sys_authority_menus` VALUES (18, 888);
INSERT INTO `sys_authority_menus` VALUES (19, 888);
INSERT INTO `sys_authority_menus` VALUES (20, 888);
INSERT INTO `sys_authority_menus` VALUES (21, 888);
INSERT INTO `sys_authority_menus` VALUES (23, 888);
INSERT INTO `sys_authority_menus` VALUES (24, 888);
INSERT INTO `sys_authority_menus` VALUES (25, 888);
INSERT INTO `sys_authority_menus` VALUES (26, 888);
INSERT INTO `sys_authority_menus` VALUES (27, 888);
INSERT INTO `sys_authority_menus` VALUES (28, 888);
INSERT INTO `sys_authority_menus` VALUES (29, 888);
INSERT INTO `sys_authority_menus` VALUES (30, 888);
INSERT INTO `sys_authority_menus` VALUES (31, 888);
INSERT INTO `sys_authority_menus` VALUES (32, 888);
INSERT INTO `sys_authority_menus` VALUES (33, 888);

-- ----------------------------
-- Table structure for sys_auto_code_histories
-- ----------------------------
DROP TABLE IF EXISTS `sys_auto_code_histories`;
CREATE TABLE `sys_auto_code_histories`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `package` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `business_db` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `table_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `request_meta` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `auto_code_path` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `injection_meta` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `struct_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `struct_cn_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `api_ids` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `flag` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_auto_code_histories_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_auto_code_histories
-- ----------------------------
INSERT INTO `sys_auto_code_histories` VALUES (1, '2023-11-15 08:23:13.686', '2023-11-15 08:23:13.686', NULL, 'blog', '', 'tbl_content', '{\"structName\":\"TblContent\",\"tableName\":\"tbl_content\",\"packageName\":\"tblContent\",\"humpPackageName\":\"tbl_content\",\"abbreviation\":\"tblContent\",\"description\":\"tblContent表\",\"autoCreateApiToSql\":true,\"autoCreateResource\":false,\"autoMoveFile\":true,\"businessDB\":\"\",\"fields\":[{\"fieldName\":\"AllowComment\",\"fieldDesc\":\"是否允许评论\",\"fieldType\":\"string\",\"fieldJson\":\"allowComment\",\"dataTypeLong\":\"255\",\"comment\":\"是否允许评论\",\"columnName\":\"allow_comment\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"AuthorId\",\"fieldDesc\":\"作者ID\",\"fieldType\":\"int\",\"fieldJson\":\"authorId\",\"dataTypeLong\":\"19\",\"comment\":\"作者ID\",\"columnName\":\"author_id\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"CommentsNum\",\"fieldDesc\":\"内容所属评论数\",\"fieldType\":\"int\",\"fieldJson\":\"commentsNum\",\"dataTypeLong\":\"10\",\"comment\":\"内容所属评论数\",\"columnName\":\"comments_num\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Content\",\"fieldDesc\":\"内容文字\",\"fieldType\":\"string\",\"fieldJson\":\"content\",\"dataTypeLong\":\"\",\"comment\":\"内容文字\",\"columnName\":\"content\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"CreateTime\",\"fieldDesc\":\"创建时间\",\"fieldType\":\"time.Time\",\"fieldJson\":\"createTime\",\"dataTypeLong\":\"\",\"comment\":\"创建时间\",\"columnName\":\"create_time\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"DownNum\",\"fieldDesc\":\"踩数量\",\"fieldType\":\"int\",\"fieldJson\":\"downNum\",\"dataTypeLong\":\"10\",\"comment\":\"踩数量\",\"columnName\":\"down_num\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Img\",\"fieldDesc\":\"内容图片路径\",\"fieldType\":\"string\",\"fieldJson\":\"img\",\"dataTypeLong\":\"255\",\"comment\":\"内容图片路径\",\"columnName\":\"img\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"LikesNum\",\"fieldDesc\":\"点赞数量\",\"fieldType\":\"int\",\"fieldJson\":\"likesNum\",\"dataTypeLong\":\"10\",\"comment\":\"点赞数量\",\"columnName\":\"likes_num\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Order\",\"fieldDesc\":\"内容顺序\",\"fieldType\":\"int\",\"fieldJson\":\"order\",\"dataTypeLong\":\"10\",\"comment\":\"内容顺序\",\"columnName\":\"order\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Password\",\"fieldDesc\":\"保护密码\",\"fieldType\":\"string\",\"fieldJson\":\"password\",\"dataTypeLong\":\"255\",\"comment\":\"保护密码\",\"columnName\":\"password\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"ShareNum\",\"fieldDesc\":\"分享数量\",\"fieldType\":\"int\",\"fieldJson\":\"shareNum\",\"dataTypeLong\":\"10\",\"comment\":\"分享数量\",\"columnName\":\"share_num\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Status\",\"fieldDesc\":\"内容状态\",\"fieldType\":\"string\",\"fieldJson\":\"status\",\"dataTypeLong\":\"255\",\"comment\":\"内容状态\",\"columnName\":\"status\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Summary\",\"fieldDesc\":\"内容摘要\",\"fieldType\":\"string\",\"fieldJson\":\"summary\",\"dataTypeLong\":\"255\",\"comment\":\"内容摘要\",\"columnName\":\"summary\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Title\",\"fieldDesc\":\"内容标题\",\"fieldType\":\"string\",\"fieldJson\":\"title\",\"dataTypeLong\":\"255\",\"comment\":\"内容标题\",\"columnName\":\"title\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Type\",\"fieldDesc\":\"内容类别\",\"fieldType\":\"string\",\"fieldJson\":\"type\",\"dataTypeLong\":\"255\",\"comment\":\"内容类别\",\"columnName\":\"type\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"UpdateTime\",\"fieldDesc\":\"修改时间\",\"fieldType\":\"time.Time\",\"fieldJson\":\"updateTime\",\"dataTypeLong\":\"\",\"comment\":\"修改时间\",\"columnName\":\"update_time\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"ViemNum\",\"fieldDesc\":\"浏览数量\",\"fieldType\":\"int\",\"fieldJson\":\"viemNum\",\"dataTypeLong\":\"10\",\"comment\":\"浏览数量\",\"columnName\":\"viem_num\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false}],\"HasTimer\":true,\"package\":\"blog\"}', '/Volumes/person/code/blog/after/gin-vue-admin/server/api/v1/blog/tbl_content.go;/Volumes/person/code/blog/after/gin-vue-admin/server/model/blog/tbl_content.go;/Volumes/person/code/blog/after/gin-vue-admin/server/model/blog/request/tbl_content.go;/Volumes/person/code/blog/after/gin-vue-admin/server/router/blog/tbl_content.go;/Volumes/person/code/blog/after/gin-vue-admin/server/service/blog/tbl_content.go;/Volumes/person/code/blog/after/gin-vue-admin/web/src/api/tblContent.js;/Volumes/person/code/blog/after/gin-vue-admin/web/src/view/tblContent/tblContentForm.vue;/Volumes/person/code/blog/after/gin-vue-admin/web/src/view/tblContent/tblContent.vue;', '/Volumes/person/code/blog/after/gin-vue-admin/server/api/v1/blog/enter.go@ApiGroup@TblContentApi;/Volumes/person/code/blog/after/gin-vue-admin/server/router/blog/enter.go@RouterGroup@TblContentRouter;/Volumes/person/code/blog/after/gin-vue-admin/server/service/blog/enter.go@ServiceGroup@TblContentService;', 'TblContent', 'tblContent表', '94;95;96;97;98;99;', 0);
INSERT INTO `sys_auto_code_histories` VALUES (2, '2023-11-15 08:23:43.535', '2023-11-15 08:23:43.535', NULL, 'blog', '', 'tbl_content_meta', '{\"structName\":\"TblContentMeta\",\"tableName\":\"tbl_content_meta\",\"packageName\":\"tblContentMeta\",\"humpPackageName\":\"tbl_content_meta\",\"abbreviation\":\"tblContentMeta\",\"description\":\"tblContentMeta表\",\"autoCreateApiToSql\":true,\"autoCreateResource\":false,\"autoMoveFile\":true,\"businessDB\":\"\",\"fields\":[{\"fieldName\":\"ContentId\",\"fieldDesc\":\"内容ID\",\"fieldType\":\"int\",\"fieldJson\":\"contentId\",\"dataTypeLong\":\"19\",\"comment\":\"内容ID\",\"columnName\":\"content_id\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"MateId\",\"fieldDesc\":\"项目ID\",\"fieldType\":\"int\",\"fieldJson\":\"mateId\",\"dataTypeLong\":\"19\",\"comment\":\"项目ID\",\"columnName\":\"mate_id\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false}],\"HasTimer\":false,\"package\":\"blog\"}', '/Volumes/person/code/blog/after/gin-vue-admin/server/api/v1/blog/tbl_content_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/model/blog/tbl_content_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/model/blog/request/tbl_content_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/router/blog/tbl_content_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/service/blog/tbl_content_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/web/src/api/tblContentMeta.js;/Volumes/person/code/blog/after/gin-vue-admin/web/src/view/tblContentMeta/tblContentMetaForm.vue;/Volumes/person/code/blog/after/gin-vue-admin/web/src/view/tblContentMeta/tblContentMeta.vue;', '/Volumes/person/code/blog/after/gin-vue-admin/server/api/v1/blog/enter.go@ApiGroup@TblContentMetaApi;/Volumes/person/code/blog/after/gin-vue-admin/server/router/blog/enter.go@RouterGroup@TblContentMetaRouter;/Volumes/person/code/blog/after/gin-vue-admin/server/service/blog/enter.go@ServiceGroup@TblContentMetaService;', 'TblContentMeta', 'tblContentMeta表', '100;101;102;103;104;105;', 0);
INSERT INTO `sys_auto_code_histories` VALUES (3, '2023-11-15 08:24:03.122', '2023-11-15 08:24:03.122', NULL, 'blog', '', 'tbl_meta', '{\"structName\":\"TblMeta\",\"tableName\":\"tbl_meta\",\"packageName\":\"tblMeta\",\"humpPackageName\":\"tbl_meta\",\"abbreviation\":\"tblMeta\",\"description\":\"tblMeta表\",\"autoCreateApiToSql\":true,\"autoCreateResource\":false,\"autoMoveFile\":true,\"businessDB\":\"\",\"fields\":[{\"fieldName\":\"Count\",\"fieldDesc\":\"项目所属内容个数\",\"fieldType\":\"int\",\"fieldJson\":\"count\",\"dataTypeLong\":\"10\",\"comment\":\"项目所属内容个数\",\"columnName\":\"count\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Description\",\"fieldDesc\":\"项目描述\",\"fieldType\":\"string\",\"fieldJson\":\"description\",\"dataTypeLong\":\"255\",\"comment\":\"项目描述\",\"columnName\":\"description\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Name\",\"fieldDesc\":\"项目名称\",\"fieldType\":\"string\",\"fieldJson\":\"name\",\"dataTypeLong\":\"255\",\"comment\":\"项目名称\",\"columnName\":\"name\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Order\",\"fieldDesc\":\"内容排序\",\"fieldType\":\"int\",\"fieldJson\":\"order\",\"dataTypeLong\":\"10\",\"comment\":\"内容排序\",\"columnName\":\"order\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false},{\"fieldName\":\"Type\",\"fieldDesc\":\"项目类型\",\"fieldType\":\"string\",\"fieldJson\":\"type\",\"dataTypeLong\":\"255\",\"comment\":\"项目类型\",\"columnName\":\"type\",\"fieldSearchType\":\"\",\"dictType\":\"\",\"require\":false,\"errorText\":\"\",\"clearable\":true,\"sort\":false}],\"HasTimer\":false,\"package\":\"blog\"}', '/Volumes/person/code/blog/after/gin-vue-admin/server/api/v1/blog/tbl_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/model/blog/tbl_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/model/blog/request/tbl_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/router/blog/tbl_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/server/service/blog/tbl_meta.go;/Volumes/person/code/blog/after/gin-vue-admin/web/src/api/tblMeta.js;/Volumes/person/code/blog/after/gin-vue-admin/web/src/view/tblMeta/tblMetaForm.vue;/Volumes/person/code/blog/after/gin-vue-admin/web/src/view/tblMeta/tblMeta.vue;', '/Volumes/person/code/blog/after/gin-vue-admin/server/api/v1/blog/enter.go@ApiGroup@TblMetaApi;/Volumes/person/code/blog/after/gin-vue-admin/server/router/blog/enter.go@RouterGroup@TblMetaRouter;/Volumes/person/code/blog/after/gin-vue-admin/server/service/blog/enter.go@ServiceGroup@TblMetaService;', 'TblMeta', 'tblMeta表', '106;107;108;109;110;111;', 0);

-- ----------------------------
-- Table structure for sys_auto_codes
-- ----------------------------
DROP TABLE IF EXISTS `sys_auto_codes`;
CREATE TABLE `sys_auto_codes`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `package_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '包名',
  `label` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '展示名',
  `desc` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_auto_codes_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_auto_codes
-- ----------------------------
INSERT INTO `sys_auto_codes` VALUES (1, '2023-11-15 08:22:31.852', '2023-11-15 08:22:31.852', NULL, 'blog', '博客', '博客包');

-- ----------------------------
-- Table structure for sys_base_menu_btns
-- ----------------------------
DROP TABLE IF EXISTS `sys_base_menu_btns`;
CREATE TABLE `sys_base_menu_btns`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '按钮关键key',
  `desc` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `sys_base_menu_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '菜单ID',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_base_menu_btns_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_base_menu_parameters
-- ----------------------------
DROP TABLE IF EXISTS `sys_base_menu_parameters`;
CREATE TABLE `sys_base_menu_parameters`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `sys_base_menu_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `type` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '地址栏携带参数为params还是query',
  `key` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '地址栏携带参数的key',
  `value` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '地址栏携带参数的值',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_base_menu_parameters_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_base_menus
-- ----------------------------
DROP TABLE IF EXISTS `sys_base_menus`;
CREATE TABLE `sys_base_menus`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `menu_level` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `parent_id` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父菜单ID',
  `path` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '路由path',
  `name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '路由name',
  `hidden` tinyint(1) NULL DEFAULT NULL COMMENT '是否在列表隐藏',
  `component` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '对应前端文件路径',
  `sort` bigint(20) NULL DEFAULT NULL COMMENT '排序标记',
  `active_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '附加属性',
  `keep_alive` tinyint(1) NULL DEFAULT NULL COMMENT '附加属性',
  `default_menu` tinyint(1) NULL DEFAULT NULL COMMENT '附加属性',
  `title` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '附加属性',
  `icon` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '附加属性',
  `close_tab` tinyint(1) NULL DEFAULT NULL COMMENT '附加属性',
  `type` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '菜单类型',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_base_menus_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 34 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_base_menus
-- ----------------------------
INSERT INTO `sys_base_menus` VALUES (1, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'dashboard', 'dashboard', 0, 'view/dashboard/index.vue', 1, '', 0, 0, '仪表盘', 'odometer', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (2, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', '2023-11-16 07:16:16.522', 0, '0', 'about', 'about', 0, 'view/about/index.vue', 9, '', 0, 0, '关于我们', 'info-filled', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (3, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'admin', 'superAdmin', 0, 'view/superAdmin/index.vue', 3, '', 0, 0, '超级管理员', 'user', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (4, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '3', 'authority', 'authority', 0, 'view/superAdmin/authority/authority.vue', 1, '', 0, 0, '角色管理', 'avatar', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (5, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '3', 'menu', 'menu', 0, 'view/superAdmin/menu/menu.vue', 2, '', 1, 0, '菜单管理', 'tickets', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (6, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '3', 'api', 'api', 0, 'view/superAdmin/api/api.vue', 3, '', 1, 0, 'api管理', 'platform', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (7, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '3', 'user', 'user', 0, 'view/superAdmin/user/user.vue', 4, '', 0, 0, '用户管理', 'coordinate', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (8, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '3', 'dictionary', 'dictionary', 0, 'view/superAdmin/dictionary/sysDictionary.vue', 5, '', 0, 0, '字典管理', 'notebook', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (9, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '3', 'operation', 'operation', 0, 'view/superAdmin/operation/sysOperationRecord.vue', 6, '', 0, 0, '操作历史', 'pie-chart', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (10, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'person', 'person', 1, 'view/person/person.vue', 4, '', 0, 0, '个人信息', 'message', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (11, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'example', 'example', 0, 'view/example/index.vue', 7, '', 0, 0, '示例文件', 'management', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (12, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '11', 'upload', 'upload', 0, 'view/example/upload/upload.vue', 5, '', 0, 0, '媒体库（上传下载）', 'upload', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (13, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '11', 'breakpoint', 'breakpoint', 0, 'view/example/breakpoint/breakpoint.vue', 6, '', 0, 0, '断点续传', 'upload-filled', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (14, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '11', 'customer', 'customer', 0, 'view/example/customer/customer.vue', 7, '', 0, 0, '客户列表（资源示例）', 'avatar', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (15, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'systemTools', 'systemTools', 0, 'view/systemTools/index.vue', 5, '', 0, 0, '系统工具', 'tools', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (16, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'autoCode', 'autoCode', 0, 'view/systemTools/autoCode/index.vue', 1, '', 1, 0, '代码生成器', 'cpu', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (17, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'formCreate', 'formCreate', 0, 'view/systemTools/formCreate/index.vue', 2, '', 1, 0, '表单生成器', 'magic-stick', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (18, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'system', 'system', 0, 'view/systemTools/system/system.vue', 3, '', 0, 0, '系统配置', 'operation', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (19, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'autoCodeAdmin', 'autoCodeAdmin', 0, 'view/systemTools/autoCodeAdmin/index.vue', 1, '', 0, 0, '自动化代码管理', 'magic-stick', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (20, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'autoCodeEdit/:id', 'autoCodeEdit', 1, 'view/systemTools/autoCode/index.vue', 0, '', 0, 0, '自动化代码-${id}', 'magic-stick', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (21, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'autoPkg', 'autoPkg', 0, 'view/systemTools/autoPkg/autoPkg.vue', 0, '', 0, 0, '自动化package', 'folder', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (22, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', '2023-11-16 07:16:11.633', 0, '0', 'https://www.gin-vue-admin.com', 'https://www.gin-vue-admin.com', 0, '/', 0, '', 0, 0, '官方网站', 'home-filled', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (23, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'state', 'state', 0, 'view/system/state.vue', 8, '', 0, 0, '服务器状态', 'cloudy', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (24, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '0', 'plugin', 'plugin', 0, 'view/routerHolder.vue', 6, '', 0, 0, '插件系统', 'cherry', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (25, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '24', 'https://plugin.gin-vue-admin.com/', 'https://plugin.gin-vue-admin.com/', 0, 'https://plugin.gin-vue-admin.com/', 0, '', 0, 0, '插件市场', 'shop', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (26, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '24', 'installPlugin', 'installPlugin', 0, 'view/systemTools/installPlugin/index.vue', 1, '', 0, 0, '插件安装', 'box', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (27, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '24', 'autoPlug', 'autoPlug', 0, 'view/systemTools/autoPlug/autoPlug.vue', 2, '', 0, 0, '插件模板', 'folder', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (28, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '24', 'pubPlug', 'pubPlug', 0, 'view/systemTools/pubPlug/pubPlug.vue', 3, '', 0, 0, '打包插件', 'files', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (29, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '24', 'plugin-email', 'plugin-email', 0, 'plugin/email/view/index.vue', 4, '', 0, 0, '邮件插件', 'message', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (30, '2023-11-14 23:12:57.636', '2023-11-14 23:12:57.636', NULL, 0, '15', 'chatTable', 'chatTable', 0, 'view/chatgpt/chatTable.vue', 6, '', 0, 0, '万用表格', 'chat-dot-square', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (31, '2023-11-16 07:15:59.266', '2023-11-16 07:15:59.266', NULL, 0, '0', 'blog', 'blog', 0, 'view/blog/index.vue', 4, '', 0, 0, '博客管理', 'coin', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (32, '2023-11-16 07:20:39.452', '2023-11-16 07:20:39.452', NULL, 0, '31', 'tblContent', 'tblContent', 0, 'view/tblContent/tblContent.vue', 32, '', 0, 0, '内容管理', 'box', 0, NULL);
INSERT INTO `sys_base_menus` VALUES (33, '2023-11-16 07:21:22.847', '2023-11-16 07:21:22.847', NULL, 0, '31', 'tblMeta', 'tblMeta', 0, 'view/tblMeta/tblMeta.vue', 33, '', 0, 0, '项目管理', 'basketball', 0, NULL);

-- ----------------------------
-- Table structure for sys_chat_gpt_options
-- ----------------------------
DROP TABLE IF EXISTS `sys_chat_gpt_options`;
CREATE TABLE `sys_chat_gpt_options`  (
  `sk` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_data_authority_id
-- ----------------------------
DROP TABLE IF EXISTS `sys_data_authority_id`;
CREATE TABLE `sys_data_authority_id`  (
  `sys_authority_authority_id` bigint(20) UNSIGNED NOT NULL COMMENT '角色ID',
  `data_authority_id_authority_id` bigint(20) UNSIGNED NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`sys_authority_authority_id`, `data_authority_id_authority_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_data_authority_id
-- ----------------------------
INSERT INTO `sys_data_authority_id` VALUES (888, 888);
INSERT INTO `sys_data_authority_id` VALUES (888, 8881);
INSERT INTO `sys_data_authority_id` VALUES (888, 9528);
INSERT INTO `sys_data_authority_id` VALUES (9528, 8881);
INSERT INTO `sys_data_authority_id` VALUES (9528, 9528);

-- ----------------------------
-- Table structure for sys_dictionaries
-- ----------------------------
DROP TABLE IF EXISTS `sys_dictionaries`;
CREATE TABLE `sys_dictionaries`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典名（中）',
  `type` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典名（英）',
  `status` tinyint(1) NULL DEFAULT NULL COMMENT '状态',
  `desc` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_dictionaries_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dictionaries
-- ----------------------------
INSERT INTO `sys_dictionaries` VALUES (1, '2023-11-14 23:12:57.617', '2023-11-14 23:12:57.620', NULL, '性别', 'gender', 1, '性别字典');
INSERT INTO `sys_dictionaries` VALUES (2, '2023-11-14 23:12:57.617', '2023-11-14 23:12:57.622', NULL, '数据库int类型', 'int', 1, 'int类型对应的数据库类型');
INSERT INTO `sys_dictionaries` VALUES (3, '2023-11-14 23:12:57.617', '2023-11-14 23:12:57.624', NULL, '数据库时间日期类型', 'time.Time', 1, '数据库时间日期类型');
INSERT INTO `sys_dictionaries` VALUES (4, '2023-11-14 23:12:57.617', '2023-11-14 23:12:57.627', NULL, '数据库浮点型', 'float64', 1, '数据库浮点型');
INSERT INTO `sys_dictionaries` VALUES (5, '2023-11-14 23:12:57.617', '2023-11-14 23:12:57.630', NULL, '数据库字符串', 'string', 1, '数据库字符串');
INSERT INTO `sys_dictionaries` VALUES (6, '2023-11-14 23:12:57.617', '2023-11-14 23:12:57.632', NULL, '数据库bool类型', 'bool', 1, '数据库bool类型');

-- ----------------------------
-- Table structure for sys_dictionary_details
-- ----------------------------
DROP TABLE IF EXISTS `sys_dictionary_details`;
CREATE TABLE `sys_dictionary_details`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `label` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '展示值',
  `value` bigint(20) NULL DEFAULT NULL COMMENT '字典值',
  `extend` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '扩展值',
  `status` tinyint(1) NULL DEFAULT NULL COMMENT '启用状态',
  `sort` bigint(20) NULL DEFAULT NULL COMMENT '排序标记',
  `sys_dictionary_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '关联标记',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_dictionary_details_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dictionary_details
-- ----------------------------
INSERT INTO `sys_dictionary_details` VALUES (1, '2023-11-14 23:12:57.620', '2023-11-14 23:12:57.620', NULL, '男', 1, '', 1, 1, 1);
INSERT INTO `sys_dictionary_details` VALUES (2, '2023-11-14 23:12:57.620', '2023-11-14 23:12:57.620', NULL, '女', 2, '', 1, 2, 1);
INSERT INTO `sys_dictionary_details` VALUES (3, '2023-11-14 23:12:57.622', '2023-11-14 23:12:57.622', NULL, 'smallint', 1, '', 1, 1, 2);
INSERT INTO `sys_dictionary_details` VALUES (4, '2023-11-14 23:12:57.622', '2023-11-14 23:12:57.622', NULL, 'mediumint', 2, '', 1, 2, 2);
INSERT INTO `sys_dictionary_details` VALUES (5, '2023-11-14 23:12:57.622', '2023-11-14 23:12:57.622', NULL, 'int', 3, '', 1, 3, 2);
INSERT INTO `sys_dictionary_details` VALUES (6, '2023-11-14 23:12:57.622', '2023-11-14 23:12:57.622', NULL, 'bigint', 4, '', 1, 4, 2);
INSERT INTO `sys_dictionary_details` VALUES (7, '2023-11-14 23:12:57.625', '2023-11-14 23:12:57.625', NULL, 'date', 0, '', 1, 0, 3);
INSERT INTO `sys_dictionary_details` VALUES (8, '2023-11-14 23:12:57.625', '2023-11-14 23:12:57.625', NULL, 'time', 1, '', 1, 1, 3);
INSERT INTO `sys_dictionary_details` VALUES (9, '2023-11-14 23:12:57.625', '2023-11-14 23:12:57.625', NULL, 'year', 2, '', 1, 2, 3);
INSERT INTO `sys_dictionary_details` VALUES (10, '2023-11-14 23:12:57.625', '2023-11-14 23:12:57.625', NULL, 'datetime', 3, '', 1, 3, 3);
INSERT INTO `sys_dictionary_details` VALUES (11, '2023-11-14 23:12:57.625', '2023-11-14 23:12:57.625', NULL, 'timestamp', 5, '', 1, 5, 3);
INSERT INTO `sys_dictionary_details` VALUES (12, '2023-11-14 23:12:57.628', '2023-11-14 23:12:57.628', NULL, 'float', 0, '', 1, 0, 4);
INSERT INTO `sys_dictionary_details` VALUES (13, '2023-11-14 23:12:57.628', '2023-11-14 23:12:57.628', NULL, 'double', 1, '', 1, 1, 4);
INSERT INTO `sys_dictionary_details` VALUES (14, '2023-11-14 23:12:57.628', '2023-11-14 23:12:57.628', NULL, 'decimal', 2, '', 1, 2, 4);
INSERT INTO `sys_dictionary_details` VALUES (15, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'char', 0, '', 1, 0, 5);
INSERT INTO `sys_dictionary_details` VALUES (16, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'varchar', 1, '', 1, 1, 5);
INSERT INTO `sys_dictionary_details` VALUES (17, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'tinyblob', 2, '', 1, 2, 5);
INSERT INTO `sys_dictionary_details` VALUES (18, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'tinytext', 3, '', 1, 3, 5);
INSERT INTO `sys_dictionary_details` VALUES (19, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'text', 4, '', 1, 4, 5);
INSERT INTO `sys_dictionary_details` VALUES (20, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'blob', 5, '', 1, 5, 5);
INSERT INTO `sys_dictionary_details` VALUES (21, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'mediumblob', 6, '', 1, 6, 5);
INSERT INTO `sys_dictionary_details` VALUES (22, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'mediumtext', 7, '', 1, 7, 5);
INSERT INTO `sys_dictionary_details` VALUES (23, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'longblob', 8, '', 1, 8, 5);
INSERT INTO `sys_dictionary_details` VALUES (24, '2023-11-14 23:12:57.630', '2023-11-14 23:12:57.630', NULL, 'longtext', 9, '', 1, 9, 5);
INSERT INTO `sys_dictionary_details` VALUES (25, '2023-11-14 23:12:57.633', '2023-11-14 23:12:57.633', NULL, 'tinyint', 0, '', 1, 0, 6);

-- ----------------------------
-- Table structure for sys_operation_records
-- ----------------------------
DROP TABLE IF EXISTS `sys_operation_records`;
CREATE TABLE `sys_operation_records`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `ip` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求ip',
  `method` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求方法',
  `path` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求路径',
  `status` bigint(20) NULL DEFAULT NULL COMMENT '请求状态',
  `latency` bigint(20) NULL DEFAULT NULL COMMENT '延迟',
  `agent` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '代理',
  `error_message` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '错误信息',
  `body` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '请求Body',
  `resp` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '响应Body',
  `user_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '用户id',
  `ip_geo` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求ip地理位置',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_operation_records_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 123 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_operation_records
-- ----------------------------
INSERT INTO `sys_operation_records` VALUES (1, '2023-11-15 07:35:18.896', '2023-11-15 07:35:18.896', NULL, '127.0.0.1', 'POST', '/system/getSystemConfig', 200, 747324, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '', '{\"code\":0,\"data\":{\"config\":{\"jwt\":{\"signing-key\":\"40d77a4d-d902-4fec-80d9-256c42988548\",\"expires-time\":\"7d\",\"buffer-time\":\"1d\",\"issuer\":\"qmPlus\"},\"zap\":{\"level\":\"info\",\"prefix\":\"[github.com/flipped-aurora/gin-vue-admin/server]\",\"format\":\"console\",\"director\":\"log\",\"encode-level\":\"LowercaseColorLevelEncoder\",\"stacktrace-key\":\"stacktrace\",\"max-age\":0,\"show-line\":true,\"log-in-console\":true},\"redis\":{\"addr\":\"127.0.0.1:6379\",\"password\":\"\",\"db\":0},\"mongo\":{\"coll\":\"\",\"options\":\"\",\"database\":\"\",\"username\":\"\",\"password\":\"\",\"min-pool-size\":0,\"max-pool-size\":100,\"socket-timeout-ms\":0,\"connect-timeout-ms\":0,\"is-zap\":false,\"hosts\":[{\"host\":\"\",\"port\":\"\"}]},\"email\":{\"to\":\"xxx@qq.com\",\"from\":\"xxx@163.com\",\"host\":\"smtp.163.com\",\"secret\":\"xxx\",\"nickname\":\"test\",\"port\":465,\"is-ssl\":true},\"system\":{\"env\":\"local\",\"db-type\":\"mysql\",\"oss-type\":\"local\",\"router-prefix\":\"\",\"addr\":8888,\"iplimit-count\":15000,\"iplimit-time\":3600,\"use-multipoint\":false,\"use-redis\":false,\"use-mongo\":false},\"captcha\":{\"key-long\":6,\"img-width\":240,\"img-height\":80,\"open-captcha\":0,\"open-captcha-timeout\":3600},\"autocode\":{\"server-model\":\"/model/%s\",\"server-router\":\"/router/%s\",\"server\":\"/server\",\"server-api\":\"/api/v1/%s\",\"server-plug\":\"/plugin/%s\",\"server-initialize\":\"/initialize\",\"root\":\"/Volumes/person/code/blog/after/gin-vue-admin\",\"web-table\":\"/view\",\"web\":\"/web/src\",\"server-service\":\"/service/%s\",\"server-request\":\"/model/%s/request/\",\"web-api\":\"/api\",\"web-form\":\"/view\",\"transfer-restart\":true},\"mysql\":{\"prefix\":\"\",\"port\":\"3306\",\"config\":\"charset=utf8mb4\\u0026parseTime=True\\u0026loc=Local\",\"db-name\":\"blog\",\"username\":\"root\",\"password\":\"root1234\",\"path\":\"127.0.0.1\",\"engine\":\"\",\"log-mode\":\"error\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"mssql\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"pgsql\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"oracle\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"sqlite\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"db-list\":[{\"type\":\"\",\"alias-name\":\"\",\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false,\"disable\":true}],\"local\":{\"path\":\"uploads/file\",\"store-path\":\"uploads/file\"},\"qiniu\":{\"zone\":\"ZoneHuaDong\",\"bucket\":\"\",\"img-path\":\"\",\"access-key\":\"\",\"secret-key\":\"\",\"use-https\":false,\"use-cdn-domains\":false},\"aliyun-oss\":{\"endpoint\":\"yourEndpoint\",\"access-key-id\":\"yourAccessKeyId\",\"access-key-secret\":\"yourAccessKeySecret\",\"bucket-name\":\"yourBucketName\",\"bucket-url\":\"yourBucketUrl\",\"base-path\":\"yourBasePath\"},\"hua-wei-obs\":{\"path\":\"you-path\",\"bucket\":\"you-bucket\",\"endpoint\":\"you-endpoint\",\"access-key\":\"you-access-key\",\"secret-key\":\"you-secret-key\"},\"tencent-cos\":{\"bucket\":\"xxxxx-10005608\",\"region\":\"ap-shanghai\",\"secret-id\":\"your-secret-id\",\"secret-key\":\"your-secret-key\",\"base-url\":\"https://gin.vue.admin\",\"path-prefix\":\"github.com/flipped-aurora/gin-vue-admin/server\"},\"aws-s3\":{\"bucket\":\"xxxxx-10005608\",\"region\":\"ap-shanghai\",\"endpoint\":\"\",\"secret-id\":\"your-secret-id\",\"secret-key\":\"your-secret-key\",\"base-url\":\"https://gin.vue.admin\",\"path-prefix\":\"github.com/flipped-aurora/gin-vue-admin/server\",\"s3-force-path-style\":false,\"disable-ssl\":false},\"excel\":{\"dir\":\"./resource/excel/\"},\"timer\":{\"spec\":\"@daily\",\"detail\":[{\"tableName\":\"sys_operation_records\",\"compareField\":\"created_at\",\"interval\":\"2160h\"},{\"tableName\":\"jwt_blacklists\",\"compareField\":\"created_at\",\"interval\":\"168h\"}],\"start\":true,\"with_seconds\":false},\"cors\":{\"mode\":\"strict-whitelist\",\"whitelist\":[{\"allow-origin\":\"example1.com\",\"allow-methods\":\"POST, GET\",\"allow-headers\":\"Content-Type,AccessToken,X-CSRF-Token, Authorization, Token,X-Token,X-User-Id\",\"expose-headers\":\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\",\"allow-credentials\":true},{\"allow-origin\":\"example2.com\",\"allow-methods\":\"GET, POST\",\"allow-headers\":\"content-type\",\"expose-headers\":\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\",\"allow-credentials\":true}]}}},\"msg\":\"获取成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (2, '2023-11-15 07:35:20.027', '2023-11-15 07:35:20.027', NULL, '127.0.0.1', 'GET', '/chatGpt/getSK', 200, 2041505, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{}', '{\"code\":0,\"data\":{\"ok\":false},\"msg\":\"无sk或获取失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (3, '2023-11-15 08:19:13.387', '2023-11-15 08:19:13.387', NULL, '127.0.0.1', 'POST', '/system/getSystemConfig', 200, 197586, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '', '{\"code\":0,\"data\":{\"config\":{\"jwt\":{\"signing-key\":\"40d77a4d-d902-4fec-80d9-256c42988548\",\"expires-time\":\"7d\",\"buffer-time\":\"1d\",\"issuer\":\"qmPlus\"},\"zap\":{\"level\":\"info\",\"prefix\":\"[github.com/flipped-aurora/gin-vue-admin/server]\",\"format\":\"console\",\"director\":\"log\",\"encode-level\":\"LowercaseColorLevelEncoder\",\"stacktrace-key\":\"stacktrace\",\"max-age\":0,\"show-line\":true,\"log-in-console\":true},\"redis\":{\"addr\":\"127.0.0.1:6379\",\"password\":\"\",\"db\":0},\"mongo\":{\"coll\":\"\",\"options\":\"\",\"database\":\"\",\"username\":\"\",\"password\":\"\",\"min-pool-size\":0,\"max-pool-size\":100,\"socket-timeout-ms\":0,\"connect-timeout-ms\":0,\"is-zap\":false,\"hosts\":[{\"host\":\"\",\"port\":\"\"}]},\"email\":{\"to\":\"xxx@qq.com\",\"from\":\"xxx@163.com\",\"host\":\"smtp.163.com\",\"secret\":\"xxx\",\"nickname\":\"test\",\"port\":465,\"is-ssl\":true},\"system\":{\"env\":\"local\",\"db-type\":\"mysql\",\"oss-type\":\"local\",\"router-prefix\":\"\",\"addr\":8888,\"iplimit-count\":15000,\"iplimit-time\":3600,\"use-multipoint\":false,\"use-redis\":false,\"use-mongo\":false},\"captcha\":{\"key-long\":6,\"img-width\":240,\"img-height\":80,\"open-captcha\":0,\"open-captcha-timeout\":3600},\"autocode\":{\"server-model\":\"/model/%s\",\"server-router\":\"/router/%s\",\"server\":\"/server\",\"server-api\":\"/api/v1/%s\",\"server-plug\":\"/plugin/%s\",\"server-initialize\":\"/initialize\",\"root\":\"/Volumes/person/code/blog/after/gin-vue-admin\",\"web-table\":\"/view\",\"web\":\"/web/src\",\"server-service\":\"/service/%s\",\"server-request\":\"/model/%s/request/\",\"web-api\":\"/api\",\"web-form\":\"/view\",\"transfer-restart\":true},\"mysql\":{\"prefix\":\"\",\"port\":\"3306\",\"config\":\"charset=utf8mb4\\u0026parseTime=True\\u0026loc=Local\",\"db-name\":\"blog\",\"username\":\"root\",\"password\":\"root1234\",\"path\":\"127.0.0.1\",\"engine\":\"\",\"log-mode\":\"error\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"mssql\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"pgsql\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"oracle\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"sqlite\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"db-list\":[{\"type\":\"\",\"alias-name\":\"\",\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false,\"disable\":true}],\"local\":{\"path\":\"uploads/file\",\"store-path\":\"uploads/file\"},\"qiniu\":{\"zone\":\"ZoneHuaDong\",\"bucket\":\"\",\"img-path\":\"\",\"access-key\":\"\",\"secret-key\":\"\",\"use-https\":false,\"use-cdn-domains\":false},\"aliyun-oss\":{\"endpoint\":\"yourEndpoint\",\"access-key-id\":\"yourAccessKeyId\",\"access-key-secret\":\"yourAccessKeySecret\",\"bucket-name\":\"yourBucketName\",\"bucket-url\":\"yourBucketUrl\",\"base-path\":\"yourBasePath\"},\"hua-wei-obs\":{\"path\":\"you-path\",\"bucket\":\"you-bucket\",\"endpoint\":\"you-endpoint\",\"access-key\":\"you-access-key\",\"secret-key\":\"you-secret-key\"},\"tencent-cos\":{\"bucket\":\"xxxxx-10005608\",\"region\":\"ap-shanghai\",\"secret-id\":\"your-secret-id\",\"secret-key\":\"your-secret-key\",\"base-url\":\"https://gin.vue.admin\",\"path-prefix\":\"github.com/flipped-aurora/gin-vue-admin/server\"},\"aws-s3\":{\"bucket\":\"xxxxx-10005608\",\"region\":\"ap-shanghai\",\"endpoint\":\"\",\"secret-id\":\"your-secret-id\",\"secret-key\":\"your-secret-key\",\"base-url\":\"https://gin.vue.admin\",\"path-prefix\":\"github.com/flipped-aurora/gin-vue-admin/server\",\"s3-force-path-style\":false,\"disable-ssl\":false},\"excel\":{\"dir\":\"./resource/excel/\"},\"timer\":{\"spec\":\"@daily\",\"detail\":[{\"tableName\":\"sys_operation_records\",\"compareField\":\"created_at\",\"interval\":\"2160h\"},{\"tableName\":\"jwt_blacklists\",\"compareField\":\"created_at\",\"interval\":\"168h\"}],\"start\":true,\"with_seconds\":false},\"cors\":{\"mode\":\"strict-whitelist\",\"whitelist\":[{\"allow-origin\":\"example1.com\",\"allow-methods\":\"POST, GET\",\"allow-headers\":\"Content-Type,AccessToken,X-CSRF-Token, Authorization, Token,X-Token,X-User-Id\",\"expose-headers\":\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\",\"allow-credentials\":true},{\"allow-origin\":\"example2.com\",\"allow-methods\":\"GET, POST\",\"allow-headers\":\"content-type\",\"expose-headers\":\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\",\"allow-credentials\":true}]}}},\"msg\":\"获取成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (4, '2023-11-15 08:19:14.780', '2023-11-15 08:19:14.780', NULL, '127.0.0.1', 'GET', '/chatGpt/getSK', 200, 823118, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{}', '{\"code\":0,\"data\":{\"ok\":false},\"msg\":\"无sk或获取失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (5, '2023-11-16 07:15:59.277', '2023-11-16 07:15:59.277', NULL, '127.0.0.1', 'POST', '/menu/addBaseMenu', 200, 20544049, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":0,\"path\":\"blog\",\"name\":\"blog\",\"hidden\":false,\"parentId\":\"0\",\"component\":\"view/blog/index.vue\",\"meta\":{\"title\":\"博客管理\",\"icon\":\"coin\",\"defaultMenu\":false,\"closeTab\":false,\"keepAlive\":false},\"sort\":4}', '{\"code\":0,\"data\":{},\"msg\":\"添加成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (6, '2023-11-16 07:16:11.694', '2023-11-16 07:16:11.694', NULL, '127.0.0.1', 'POST', '/menu/deleteBaseMenu', 200, 77289531, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":22}', '{\"code\":0,\"data\":{},\"msg\":\"删除成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (7, '2023-11-16 07:16:16.543', '2023-11-16 07:16:16.543', NULL, '127.0.0.1', 'POST', '/menu/deleteBaseMenu', 200, 22290052, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2}', '{\"code\":0,\"data\":{},\"msg\":\"删除成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (8, '2023-11-16 07:20:39.457', '2023-11-16 07:20:39.457', NULL, '127.0.0.1', 'POST', '/menu/addBaseMenu', 200, 5824591, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":0,\"path\":\"tblContent\",\"name\":\"tblContent\",\"hidden\":false,\"parentId\":\"31\",\"component\":\"view/tblContent/tblContent.vue\",\"meta\":{\"title\":\"内容管理\",\"icon\":\"box\",\"defaultMenu\":false,\"closeTab\":false,\"keepAlive\":false},\"sort\":32}', '{\"code\":0,\"data\":{},\"msg\":\"添加成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (9, '2023-11-16 07:21:22.854', '2023-11-16 07:21:22.854', NULL, '127.0.0.1', 'POST', '/menu/addBaseMenu', 200, 7579586, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":0,\"path\":\"tblMeta\",\"name\":\"tblMeta\",\"hidden\":false,\"parentId\":\"31\",\"component\":\"view/tblMeta/tblMeta.vue\",\"meta\":{\"title\":\"项目管理\",\"icon\":\"basketball\",\"defaultMenu\":false,\"closeTab\":false,\"keepAlive\":false},\"sort\":33}', '{\"code\":0,\"data\":{},\"msg\":\"添加成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (10, '2023-11-16 07:21:48.326', '2023-11-16 07:21:48.326', NULL, '127.0.0.1', 'POST', '/menu/addMenuAuthority', 200, 17412340, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"menus\":[{\"ID\":1,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"dashboard\",\"name\":\"dashboard\",\"hidden\":false,\"component\":\"view/dashboard/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"仪表盘\",\"icon\":\"odometer\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":3,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"admin\",\"name\":\"superAdmin\",\"hidden\":false,\"component\":\"view/superAdmin/index.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"超级管理员\",\"icon\":\"user\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":4,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"authority\",\"name\":\"authority\",\"hidden\":false,\"component\":\"view/superAdmin/authority/authority.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"角色管理\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":5,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"menu\",\"name\":\"menu\",\"hidden\":false,\"component\":\"view/superAdmin/menu/menu.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"菜单管理\",\"icon\":\"tickets\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":6,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"api\",\"name\":\"api\",\"hidden\":false,\"component\":\"view/superAdmin/api/api.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"api管理\",\"icon\":\"platform\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":7,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"user\",\"name\":\"user\",\"hidden\":false,\"component\":\"view/superAdmin/user/user.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"用户管理\",\"icon\":\"coordinate\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":8,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"dictionary\",\"name\":\"dictionary\",\"hidden\":false,\"component\":\"view/superAdmin/dictionary/sysDictionary.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"字典管理\",\"icon\":\"notebook\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":9,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"operation\",\"name\":\"operation\",\"hidden\":false,\"component\":\"view/superAdmin/operation/sysOperationRecord.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"操作历史\",\"icon\":\"pie-chart\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":4,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"authority\",\"name\":\"authority\",\"hidden\":false,\"component\":\"view/superAdmin/authority/authority.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"角色管理\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":5,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"menu\",\"name\":\"menu\",\"hidden\":false,\"component\":\"view/superAdmin/menu/menu.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"菜单管理\",\"icon\":\"tickets\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":6,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"api\",\"name\":\"api\",\"hidden\":false,\"component\":\"view/superAdmin/api/api.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"api管理\",\"icon\":\"platform\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":7,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"user\",\"name\":\"user\",\"hidden\":false,\"component\":\"view/superAdmin/user/user.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"用户管理\",\"icon\":\"coordinate\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":8,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"dictionary\",\"name\":\"dictionary\",\"hidden\":false,\"component\":\"view/superAdmin/dictionary/sysDictionary.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"字典管理\",\"icon\":\"notebook\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":9,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"operation\",\"name\":\"operation\",\"hidden\":false,\"component\":\"view/superAdmin/operation/sysOperationRecord.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"操作历史\",\"icon\":\"pie-chart\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":10,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"person\",\"name\":\"person\",\"hidden\":true,\"component\":\"view/person/person.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"个人信息\",\"icon\":\"message\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":31,\"CreatedAt\":\"2023-11-16T07:15:59.266+08:00\",\"UpdatedAt\":\"2023-11-16T07:15:59.266+08:00\",\"parentId\":\"0\",\"path\":\"blog\",\"name\":\"blog\",\"hidden\":false,\"component\":\"view/blog/index.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"博客管理\",\"icon\":\"coin\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":32,\"CreatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"UpdatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"parentId\":\"31\",\"path\":\"tblContent\",\"name\":\"tblContent\",\"hidden\":false,\"component\":\"view/tblContent/tblContent.vue\",\"sort\":32,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"内容管理\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":33,\"CreatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"UpdatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"parentId\":\"31\",\"path\":\"tblMeta\",\"name\":\"tblMeta\",\"hidden\":false,\"component\":\"view/tblMeta/tblMeta.vue\",\"sort\":33,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"项目管理\",\"icon\":\"basketball\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":32,\"CreatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"UpdatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"parentId\":\"31\",\"path\":\"tblContent\",\"name\":\"tblContent\",\"hidden\":false,\"component\":\"view/tblContent/tblContent.vue\",\"sort\":32,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"内容管理\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":33,\"CreatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"UpdatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"parentId\":\"31\",\"path\":\"tblMeta\",\"name\":\"tblMeta\",\"hidden\":false,\"component\":\"view/tblMeta/tblMeta.vue\",\"sort\":33,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"项目管理\",\"icon\":\"basketball\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":15,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"systemTools\",\"name\":\"systemTools\",\"hidden\":false,\"component\":\"view/systemTools/index.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"系统工具\",\"icon\":\"tools\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":20,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeEdit/:id\",\"name\":\"autoCodeEdit\",\"hidden\":true,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码-${id}\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":21,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoPkg\",\"name\":\"autoPkg\",\"hidden\":false,\"component\":\"view/systemTools/autoPkg/autoPkg.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化package\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":16,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCode\",\"name\":\"autoCode\",\"hidden\":false,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"代码生成器\",\"icon\":\"cpu\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":19,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeAdmin\",\"name\":\"autoCodeAdmin\",\"hidden\":false,\"component\":\"view/systemTools/autoCodeAdmin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码管理\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":17,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"formCreate\",\"name\":\"formCreate\",\"hidden\":false,\"component\":\"view/systemTools/formCreate/index.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"表单生成器\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":18,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"system\",\"name\":\"system\",\"hidden\":false,\"component\":\"view/systemTools/system/system.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"系统配置\",\"icon\":\"operation\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":30,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"chatTable\",\"name\":\"chatTable\",\"hidden\":false,\"component\":\"view/chatgpt/chatTable.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"万用表格\",\"icon\":\"chat-dot-square\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":20,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeEdit/:id\",\"name\":\"autoCodeEdit\",\"hidden\":true,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码-${id}\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":21,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoPkg\",\"name\":\"autoPkg\",\"hidden\":false,\"component\":\"view/systemTools/autoPkg/autoPkg.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化package\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":16,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCode\",\"name\":\"autoCode\",\"hidden\":false,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"代码生成器\",\"icon\":\"cpu\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":19,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeAdmin\",\"name\":\"autoCodeAdmin\",\"hidden\":false,\"component\":\"view/systemTools/autoCodeAdmin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码管理\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":17,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"formCreate\",\"name\":\"formCreate\",\"hidden\":false,\"component\":\"view/systemTools/formCreate/index.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"表单生成器\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":18,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"system\",\"name\":\"system\",\"hidden\":false,\"component\":\"view/systemTools/system/system.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"系统配置\",\"icon\":\"operation\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":30,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"chatTable\",\"name\":\"chatTable\",\"hidden\":false,\"component\":\"view/chatgpt/chatTable.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"万用表格\",\"icon\":\"chat-dot-square\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":24,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"plugin\",\"name\":\"plugin\",\"hidden\":false,\"component\":\"view/routerHolder.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件系统\",\"icon\":\"cherry\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":25,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"https://plugin.gin-vue-admin.com/\",\"name\":\"https://plugin.gin-vue-admin.com/\",\"hidden\":false,\"component\":\"https://plugin.gin-vue-admin.com/\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件市场\",\"icon\":\"shop\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":26,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"installPlugin\",\"name\":\"installPlugin\",\"hidden\":false,\"component\":\"view/systemTools/installPlugin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件安装\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":27,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"autoPlug\",\"name\":\"autoPlug\",\"hidden\":false,\"component\":\"view/systemTools/autoPlug/autoPlug.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件模板\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":28,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"pubPlug\",\"name\":\"pubPlug\",\"hidden\":false,\"component\":\"view/systemTools/pubPlug/pubPlug.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"打包插件\",\"icon\":\"files\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":29,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"plugin-email\",\"name\":\"plugin-email\",\"hidden\":false,\"component\":\"plugin/email/view/index.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"邮件插件\",\"icon\":\"message\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":25,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"https://plugin.gin-vue-admin.com/\",\"name\":\"https://plugin.gin-vue-admin.com/\",\"hidden\":false,\"component\":\"https://plugin.gin-vue-admin.com/\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件市场\",\"icon\":\"shop\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":26,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"installPlugin\",\"name\":\"installPlugin\",\"hidden\":false,\"component\":\"view/systemTools/installPlugin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件安装\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":27,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"autoPlug\",\"name\":\"autoPlug\",\"hidden\":false,\"component\":\"view/systemTools/autoPlug/autoPlug.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件模板\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":28,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"pubPlug\",\"name\":\"pubPlug\",\"hidden\":false,\"component\":\"view/systemTools/pubPlug/pubPlug.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"打包插件\",\"icon\":\"files\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":29,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"plugin-email\",\"name\":\"plugin-email\",\"hidden\":false,\"component\":\"plugin/email/view/index.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"邮件插件\",\"icon\":\"message\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":11,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"example\",\"name\":\"example\",\"hidden\":false,\"component\":\"view/example/index.vue\",\"sort\":7,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"示例文件\",\"icon\":\"management\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":12,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"upload\",\"name\":\"upload\",\"hidden\":false,\"component\":\"view/example/upload/upload.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"媒体库（上传下载）\",\"icon\":\"upload\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":13,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"breakpoint\",\"name\":\"breakpoint\",\"hidden\":false,\"component\":\"view/example/breakpoint/breakpoint.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"断点续传\",\"icon\":\"upload-filled\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":14,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"customer\",\"name\":\"customer\",\"hidden\":false,\"component\":\"view/example/customer/customer.vue\",\"sort\":7,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"客户列表（资源示例）\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":12,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"upload\",\"name\":\"upload\",\"hidden\":false,\"component\":\"view/example/upload/upload.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"媒体库（上传下载）\",\"icon\":\"upload\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":13,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"breakpoint\",\"name\":\"breakpoint\",\"hidden\":false,\"component\":\"view/example/breakpoint/breakpoint.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"断点续传\",\"icon\":\"upload-filled\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":14,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"customer\",\"name\":\"customer\",\"hidden\":false,\"component\":\"view/example/customer/customer.vue\",\"sort\":7,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"客户列表（资源示例）\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":23,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"state\",\"name\":\"state\",\"hidden\":false,\"component\":\"view/system/state.vue\",\"sort\":8,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"服务器状态\",\"icon\":\"cloudy\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"authorityId\":888}', '{\"code\":0,\"data\":{},\"msg\":\"添加成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (11, '2023-11-16 07:22:00.684', '2023-11-16 07:22:00.684', NULL, '127.0.0.1', 'POST', '/casbin/updateCasbin', 200, 23669125, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"authorityId\":888,\"casbinInfos\":[{\"path\":\"/jwt/jsonInBlacklist\",\"method\":\"POST\"},{\"path\":\"/user/deleteUser\",\"method\":\"DELETE\"},{\"path\":\"/user/admin_register\",\"method\":\"POST\"},{\"path\":\"/user/getUserList\",\"method\":\"POST\"},{\"path\":\"/user/setUserInfo\",\"method\":\"PUT\"},{\"path\":\"/user/setSelfInfo\",\"method\":\"PUT\"},{\"path\":\"/user/getUserInfo\",\"method\":\"GET\"},{\"path\":\"/user/setUserAuthorities\",\"method\":\"POST\"},{\"path\":\"/user/changePassword\",\"method\":\"POST\"},{\"path\":\"/user/setUserAuthority\",\"method\":\"POST\"},{\"path\":\"/user/resetPassword\",\"method\":\"POST\"},{\"path\":\"/api/createApi\",\"method\":\"POST\"},{\"path\":\"/api/deleteApi\",\"method\":\"POST\"},{\"path\":\"/api/updateApi\",\"method\":\"POST\"},{\"path\":\"/api/getApiList\",\"method\":\"POST\"},{\"path\":\"/api/getAllApis\",\"method\":\"POST\"},{\"path\":\"/api/getApiById\",\"method\":\"POST\"},{\"path\":\"/api/deleteApisByIds\",\"method\":\"DELETE\"},{\"path\":\"/authority/copyAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/createAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/deleteAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/updateAuthority\",\"method\":\"PUT\"},{\"path\":\"/authority/getAuthorityList\",\"method\":\"POST\"},{\"path\":\"/authority/setDataAuthority\",\"method\":\"POST\"},{\"path\":\"/casbin/updateCasbin\",\"method\":\"POST\"},{\"path\":\"/casbin/getPolicyPathByAuthorityId\",\"method\":\"POST\"},{\"path\":\"/menu/addBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/getMenu\",\"method\":\"POST\"},{\"path\":\"/menu/deleteBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/updateBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/getBaseMenuById\",\"method\":\"POST\"},{\"path\":\"/menu/getMenuList\",\"method\":\"POST\"},{\"path\":\"/menu/getBaseMenuTree\",\"method\":\"POST\"},{\"path\":\"/menu/getMenuAuthority\",\"method\":\"POST\"},{\"path\":\"/menu/addMenuAuthority\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/findFile\",\"method\":\"GET\"},{\"path\":\"/fileUploadAndDownload/breakpointContinue\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/breakpointContinueFinish\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/removeChunk\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/upload\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/deleteFile\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/editFileName\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/getFileList\",\"method\":\"POST\"},{\"path\":\"/system/getServerInfo\",\"method\":\"POST\"},{\"path\":\"/system/getSystemConfig\",\"method\":\"POST\"},{\"path\":\"/system/setSystemConfig\",\"method\":\"POST\"},{\"path\":\"/customer/customer\",\"method\":\"PUT\"},{\"path\":\"/customer/customer\",\"method\":\"POST\"},{\"path\":\"/customer/customer\",\"method\":\"DELETE\"},{\"path\":\"/customer/customer\",\"method\":\"GET\"},{\"path\":\"/customer/customerList\",\"method\":\"GET\"},{\"path\":\"/autoCode/getDB\",\"method\":\"GET\"},{\"path\":\"/autoCode/getTables\",\"method\":\"GET\"},{\"path\":\"/autoCode/createTemp\",\"method\":\"POST\"},{\"path\":\"/autoCode/preview\",\"method\":\"POST\"},{\"path\":\"/autoCode/getColumn\",\"method\":\"GET\"},{\"path\":\"/autoCode/createPlug\",\"method\":\"POST\"},{\"path\":\"/autoCode/installPlugin\",\"method\":\"POST\"},{\"path\":\"/autoCode/pubPlug\",\"method\":\"POST\"},{\"path\":\"/autoCode/createPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/getPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/delPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/getMeta\",\"method\":\"POST\"},{\"path\":\"/autoCode/rollback\",\"method\":\"POST\"},{\"path\":\"/autoCode/getSysHistory\",\"method\":\"POST\"},{\"path\":\"/autoCode/delSysHistory\",\"method\":\"POST\"},{\"path\":\"/sysDictionaryDetail/updateSysDictionaryDetail\",\"method\":\"PUT\"},{\"path\":\"/sysDictionaryDetail/createSysDictionaryDetail\",\"method\":\"POST\"},{\"path\":\"/sysDictionaryDetail/deleteSysDictionaryDetail\",\"method\":\"DELETE\"},{\"path\":\"/sysDictionaryDetail/findSysDictionaryDetail\",\"method\":\"GET\"},{\"path\":\"/sysDictionaryDetail/getSysDictionaryDetailList\",\"method\":\"GET\"},{\"path\":\"/sysDictionary/createSysDictionary\",\"method\":\"POST\"},{\"path\":\"/sysDictionary/deleteSysDictionary\",\"method\":\"DELETE\"},{\"path\":\"/sysDictionary/updateSysDictionary\",\"method\":\"PUT\"},{\"path\":\"/sysDictionary/findSysDictionary\",\"method\":\"GET\"},{\"path\":\"/sysDictionary/getSysDictionaryList\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/createSysOperationRecord\",\"method\":\"POST\"},{\"path\":\"/sysOperationRecord/findSysOperationRecord\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/getSysOperationRecordList\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/deleteSysOperationRecord\",\"method\":\"DELETE\"},{\"path\":\"/sysOperationRecord/deleteSysOperationRecordByIds\",\"method\":\"DELETE\"},{\"path\":\"/simpleUploader/upload\",\"method\":\"POST\"},{\"path\":\"/simpleUploader/checkFileMd5\",\"method\":\"GET\"},{\"path\":\"/simpleUploader/mergeFileMd5\",\"method\":\"GET\"},{\"path\":\"/email/emailTest\",\"method\":\"POST\"},{\"path\":\"/email/emailSend\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/setAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/getAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/canRemoveAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/chatGpt/getTable\",\"method\":\"POST\"},{\"path\":\"/chatGpt/createSK\",\"method\":\"POST\"},{\"path\":\"/chatGpt/getSK\",\"method\":\"GET\"},{\"path\":\"/chatGpt/deleteSK\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/createTblContent\",\"method\":\"POST\"},{\"path\":\"/tblContent/deleteTblContent\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/deleteTblContentByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/updateTblContent\",\"method\":\"PUT\"},{\"path\":\"/tblContent/findTblContent\",\"method\":\"GET\"},{\"path\":\"/tblContent/getTblContentList\",\"method\":\"GET\"},{\"path\":\"/tblContentMeta/createTblContentMeta\",\"method\":\"POST\"},{\"path\":\"/tblContentMeta/deleteTblContentMeta\",\"method\":\"DELETE\"},{\"path\":\"/tblContentMeta/deleteTblContentMetaByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblContentMeta/updateTblContentMeta\",\"method\":\"PUT\"},{\"path\":\"/tblContentMeta/findTblContentMeta\",\"method\":\"GET\"},{\"path\":\"/tblContentMeta/getTblContentMetaList\",\"method\":\"GET\"},{\"path\":\"/tblMeta/createTblMeta\",\"method\":\"POST\"},{\"path\":\"/tblMeta/deleteTblMeta\",\"method\":\"DELETE\"},{\"path\":\"/tblMeta/deleteTblMetaByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblMeta/updateTblMeta\",\"method\":\"PUT\"},{\"path\":\"/tblMeta/findTblMeta\",\"method\":\"GET\"},{\"path\":\"/tblMeta/getTblMetaList\",\"method\":\"GET\"}]}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (12, '2023-11-16 07:22:04.944', '2023-11-16 07:22:04.944', NULL, '127.0.0.1', 'POST', '/menu/addMenuAuthority', 200, 18039284, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"menus\":[{\"ID\":1,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"dashboard\",\"name\":\"dashboard\",\"hidden\":false,\"component\":\"view/dashboard/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"仪表盘\",\"icon\":\"odometer\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":3,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"admin\",\"name\":\"superAdmin\",\"hidden\":false,\"component\":\"view/superAdmin/index.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"超级管理员\",\"icon\":\"user\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":4,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"authority\",\"name\":\"authority\",\"hidden\":false,\"component\":\"view/superAdmin/authority/authority.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"角色管理\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":5,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"menu\",\"name\":\"menu\",\"hidden\":false,\"component\":\"view/superAdmin/menu/menu.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"菜单管理\",\"icon\":\"tickets\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":6,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"api\",\"name\":\"api\",\"hidden\":false,\"component\":\"view/superAdmin/api/api.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"api管理\",\"icon\":\"platform\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":7,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"user\",\"name\":\"user\",\"hidden\":false,\"component\":\"view/superAdmin/user/user.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"用户管理\",\"icon\":\"coordinate\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":8,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"dictionary\",\"name\":\"dictionary\",\"hidden\":false,\"component\":\"view/superAdmin/dictionary/sysDictionary.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"字典管理\",\"icon\":\"notebook\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":9,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"operation\",\"name\":\"operation\",\"hidden\":false,\"component\":\"view/superAdmin/operation/sysOperationRecord.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"操作历史\",\"icon\":\"pie-chart\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":4,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"authority\",\"name\":\"authority\",\"hidden\":false,\"component\":\"view/superAdmin/authority/authority.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"角色管理\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":5,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"menu\",\"name\":\"menu\",\"hidden\":false,\"component\":\"view/superAdmin/menu/menu.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"菜单管理\",\"icon\":\"tickets\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":6,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"api\",\"name\":\"api\",\"hidden\":false,\"component\":\"view/superAdmin/api/api.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"api管理\",\"icon\":\"platform\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":7,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"user\",\"name\":\"user\",\"hidden\":false,\"component\":\"view/superAdmin/user/user.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"用户管理\",\"icon\":\"coordinate\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":8,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"dictionary\",\"name\":\"dictionary\",\"hidden\":false,\"component\":\"view/superAdmin/dictionary/sysDictionary.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"字典管理\",\"icon\":\"notebook\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":9,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"3\",\"path\":\"operation\",\"name\":\"operation\",\"hidden\":false,\"component\":\"view/superAdmin/operation/sysOperationRecord.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"操作历史\",\"icon\":\"pie-chart\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":10,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"person\",\"name\":\"person\",\"hidden\":true,\"component\":\"view/person/person.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"个人信息\",\"icon\":\"message\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":31,\"CreatedAt\":\"2023-11-16T07:15:59.266+08:00\",\"UpdatedAt\":\"2023-11-16T07:15:59.266+08:00\",\"parentId\":\"0\",\"path\":\"blog\",\"name\":\"blog\",\"hidden\":false,\"component\":\"view/blog/index.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"博客管理\",\"icon\":\"coin\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":32,\"CreatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"UpdatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"parentId\":\"31\",\"path\":\"tblContent\",\"name\":\"tblContent\",\"hidden\":false,\"component\":\"view/tblContent/tblContent.vue\",\"sort\":32,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"内容管理\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":33,\"CreatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"UpdatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"parentId\":\"31\",\"path\":\"tblMeta\",\"name\":\"tblMeta\",\"hidden\":false,\"component\":\"view/tblMeta/tblMeta.vue\",\"sort\":33,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"项目管理\",\"icon\":\"basketball\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":32,\"CreatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"UpdatedAt\":\"2023-11-16T07:20:39.452+08:00\",\"parentId\":\"31\",\"path\":\"tblContent\",\"name\":\"tblContent\",\"hidden\":false,\"component\":\"view/tblContent/tblContent.vue\",\"sort\":32,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"内容管理\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":33,\"CreatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"UpdatedAt\":\"2023-11-16T07:21:22.847+08:00\",\"parentId\":\"31\",\"path\":\"tblMeta\",\"name\":\"tblMeta\",\"hidden\":false,\"component\":\"view/tblMeta/tblMeta.vue\",\"sort\":33,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"项目管理\",\"icon\":\"basketball\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":15,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"systemTools\",\"name\":\"systemTools\",\"hidden\":false,\"component\":\"view/systemTools/index.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"系统工具\",\"icon\":\"tools\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":20,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeEdit/:id\",\"name\":\"autoCodeEdit\",\"hidden\":true,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码-${id}\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":21,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoPkg\",\"name\":\"autoPkg\",\"hidden\":false,\"component\":\"view/systemTools/autoPkg/autoPkg.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化package\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":16,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCode\",\"name\":\"autoCode\",\"hidden\":false,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"代码生成器\",\"icon\":\"cpu\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":19,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeAdmin\",\"name\":\"autoCodeAdmin\",\"hidden\":false,\"component\":\"view/systemTools/autoCodeAdmin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码管理\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":17,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"formCreate\",\"name\":\"formCreate\",\"hidden\":false,\"component\":\"view/systemTools/formCreate/index.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"表单生成器\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":18,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"system\",\"name\":\"system\",\"hidden\":false,\"component\":\"view/systemTools/system/system.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"系统配置\",\"icon\":\"operation\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":30,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"chatTable\",\"name\":\"chatTable\",\"hidden\":false,\"component\":\"view/chatgpt/chatTable.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"万用表格\",\"icon\":\"chat-dot-square\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":20,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeEdit/:id\",\"name\":\"autoCodeEdit\",\"hidden\":true,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码-${id}\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":21,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoPkg\",\"name\":\"autoPkg\",\"hidden\":false,\"component\":\"view/systemTools/autoPkg/autoPkg.vue\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化package\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":16,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCode\",\"name\":\"autoCode\",\"hidden\":false,\"component\":\"view/systemTools/autoCode/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"代码生成器\",\"icon\":\"cpu\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":19,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"autoCodeAdmin\",\"name\":\"autoCodeAdmin\",\"hidden\":false,\"component\":\"view/systemTools/autoCodeAdmin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"自动化代码管理\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":17,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"formCreate\",\"name\":\"formCreate\",\"hidden\":false,\"component\":\"view/systemTools/formCreate/index.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":true,\"defaultMenu\":false,\"title\":\"表单生成器\",\"icon\":\"magic-stick\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":18,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"system\",\"name\":\"system\",\"hidden\":false,\"component\":\"view/systemTools/system/system.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"系统配置\",\"icon\":\"operation\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":30,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"15\",\"path\":\"chatTable\",\"name\":\"chatTable\",\"hidden\":false,\"component\":\"view/chatgpt/chatTable.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"万用表格\",\"icon\":\"chat-dot-square\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":24,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"plugin\",\"name\":\"plugin\",\"hidden\":false,\"component\":\"view/routerHolder.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件系统\",\"icon\":\"cherry\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":25,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"https://plugin.gin-vue-admin.com/\",\"name\":\"https://plugin.gin-vue-admin.com/\",\"hidden\":false,\"component\":\"https://plugin.gin-vue-admin.com/\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件市场\",\"icon\":\"shop\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":26,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"installPlugin\",\"name\":\"installPlugin\",\"hidden\":false,\"component\":\"view/systemTools/installPlugin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件安装\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":27,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"autoPlug\",\"name\":\"autoPlug\",\"hidden\":false,\"component\":\"view/systemTools/autoPlug/autoPlug.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件模板\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":28,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"pubPlug\",\"name\":\"pubPlug\",\"hidden\":false,\"component\":\"view/systemTools/pubPlug/pubPlug.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"打包插件\",\"icon\":\"files\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":29,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"plugin-email\",\"name\":\"plugin-email\",\"hidden\":false,\"component\":\"plugin/email/view/index.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"邮件插件\",\"icon\":\"message\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":25,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"https://plugin.gin-vue-admin.com/\",\"name\":\"https://plugin.gin-vue-admin.com/\",\"hidden\":false,\"component\":\"https://plugin.gin-vue-admin.com/\",\"sort\":0,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件市场\",\"icon\":\"shop\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":26,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"installPlugin\",\"name\":\"installPlugin\",\"hidden\":false,\"component\":\"view/systemTools/installPlugin/index.vue\",\"sort\":1,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件安装\",\"icon\":\"box\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":27,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"autoPlug\",\"name\":\"autoPlug\",\"hidden\":false,\"component\":\"view/systemTools/autoPlug/autoPlug.vue\",\"sort\":2,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"插件模板\",\"icon\":\"folder\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":28,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"pubPlug\",\"name\":\"pubPlug\",\"hidden\":false,\"component\":\"view/systemTools/pubPlug/pubPlug.vue\",\"sort\":3,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"打包插件\",\"icon\":\"files\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":29,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"24\",\"path\":\"plugin-email\",\"name\":\"plugin-email\",\"hidden\":false,\"component\":\"plugin/email/view/index.vue\",\"sort\":4,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"邮件插件\",\"icon\":\"message\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":11,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"example\",\"name\":\"example\",\"hidden\":false,\"component\":\"view/example/index.vue\",\"sort\":7,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"示例文件\",\"icon\":\"management\",\"closeTab\":false},\"authoritys\":null,\"children\":[{\"ID\":12,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"upload\",\"name\":\"upload\",\"hidden\":false,\"component\":\"view/example/upload/upload.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"媒体库（上传下载）\",\"icon\":\"upload\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":13,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"breakpoint\",\"name\":\"breakpoint\",\"hidden\":false,\"component\":\"view/example/breakpoint/breakpoint.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"断点续传\",\"icon\":\"upload-filled\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":14,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"customer\",\"name\":\"customer\",\"hidden\":false,\"component\":\"view/example/customer/customer.vue\",\"sort\":7,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"客户列表（资源示例）\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"parameters\":[],\"menuBtn\":[]},{\"ID\":12,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"upload\",\"name\":\"upload\",\"hidden\":false,\"component\":\"view/example/upload/upload.vue\",\"sort\":5,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"媒体库（上传下载）\",\"icon\":\"upload\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":13,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"breakpoint\",\"name\":\"breakpoint\",\"hidden\":false,\"component\":\"view/example/breakpoint/breakpoint.vue\",\"sort\":6,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"断点续传\",\"icon\":\"upload-filled\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":14,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"11\",\"path\":\"customer\",\"name\":\"customer\",\"hidden\":false,\"component\":\"view/example/customer/customer.vue\",\"sort\":7,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"客户列表（资源示例）\",\"icon\":\"avatar\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]},{\"ID\":23,\"CreatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"UpdatedAt\":\"2023-11-14T23:12:57.636+08:00\",\"parentId\":\"0\",\"path\":\"state\",\"name\":\"state\",\"hidden\":false,\"component\":\"view/system/state.vue\",\"sort\":8,\"meta\":{\"activeName\":\"\",\"keepAlive\":false,\"defaultMenu\":false,\"title\":\"服务器状态\",\"icon\":\"cloudy\",\"closeTab\":false},\"authoritys\":null,\"children\":null,\"parameters\":[],\"menuBtn\":[]}],\"authorityId\":888}', '{\"code\":0,\"data\":{},\"msg\":\"添加成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (13, '2023-11-16 07:44:27.099', '2023-11-16 07:44:27.099', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 4655278, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"1\",\"authorId\":1,\"commentsNum\":1,\"content\":\"1\",\"createTime\":\"2023-11-15T23:44:11.951Z\",\"downNum\":10,\"img\":\"1\",\"likesNum\":1,\"order\":1,\"password\":\"1\",\"shareNum\":0,\"status\":\"\",\"summary\":\"\",\"title\":\"\",\"type\":\"\",\"updateTime\":\"2023-11-15T23:44:11.951Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (14, '2023-11-16 07:45:24.510', '2023-11-16 07:45:24.510', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 5337594, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"1\",\"authorId\":1,\"commentsNum\":1,\"content\":\"1\",\"createTime\":\"2023-11-15T23:44:11.951Z\",\"downNum\":10,\"img\":\"1\",\"likesNum\":1,\"order\":1,\"password\":\"1\",\"shareNum\":0,\"status\":\"\",\"summary\":\"\",\"title\":\"\",\"type\":\"\",\"updateTime\":\"2023-11-15T23:44:11.951Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (15, '2023-11-16 07:45:29.524', '2023-11-16 07:45:29.524', NULL, '127.0.0.1', 'DELETE', '/tblContent/deleteTblContentByIds', 200, 3704071, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ids\":[1]}', '{\"code\":0,\"data\":{},\"msg\":\"批量删除成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (16, '2023-11-16 07:45:44.836', '2023-11-16 07:45:44.836', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 2933119, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":10,\"description\":\"1\",\"name\":\"1\",\"order\":1,\"type\":\"1\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (17, '2023-11-16 07:45:53.899', '2023-11-16 07:45:53.899', NULL, '127.0.0.1', 'DELETE', '/tblMeta/deleteTblMeta', 200, 2255509, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":1}', '{\"code\":0,\"data\":{},\"msg\":\"删除成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (18, '2023-11-16 08:34:30.091', '2023-11-16 08:34:30.091', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 4430488, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"VPS相关内容\",\"name\":\"VPS\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (19, '2023-11-17 07:59:40.280', '2023-11-17 07:59:40.280', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 6031687, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"精品软件、破解软件、linux、windows、iso\",\"name\":\"软件\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (20, '2023-11-17 08:00:31.578', '2023-11-17 08:00:31.578', NULL, '127.0.0.1', 'PUT', '/tblMeta/updateTblMeta', 200, 66655169, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-16T08:34:30.087+08:00\",\"UpdatedAt\":\"2023-11-16T08:34:30.087+08:00\",\"count\":0,\"description\":\"VPS 测速、优惠推荐\",\"name\":\"VPS\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (21, '2023-11-17 08:00:50.061', '2023-11-17 08:00:50.061', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 1843349, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"机场测速、机场推荐\",\"name\":\"机场\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (22, '2023-11-17 08:01:31.543', '2023-11-17 08:01:31.543', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 1428997, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"被动搞钱、主动搞钱\",\"name\":\"搞钱\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (23, '2023-11-17 08:01:47.654', '2023-11-17 08:01:47.654', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 2348102, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"\",\"name\":\"原创\",\"order\":1,\"type\":\"标签类型\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (24, '2023-11-17 08:01:55.586', '2023-11-17 08:01:55.586', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 2386867, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"\",\"name\":\"转发\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (25, '2023-11-17 08:02:06.204', '2023-11-17 08:02:06.204', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 2457174, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"\",\"name\":\"站长推荐\",\"order\":1,\"type\":\"标签类型\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (26, '2023-11-17 08:15:20.318', '2023-11-17 08:15:20.318', NULL, '127.0.0.1', 'PUT', '/tblMeta/updateTblMeta', 200, 4025105, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":5,\"CreatedAt\":\"2023-11-17T08:01:31.542+08:00\",\"UpdatedAt\":\"2023-11-17T08:01:31.542+08:00\",\"count\":0,\"description\":\"被动搞钱、主动搞钱\",\"name\":\"搞钱\",\"order\":4,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (27, '2023-11-18 11:17:15.311', '2023-11-18 11:17:15.311', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 2093961, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"禁止\",\"authorId\":0,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T03:16:32.857Z\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111707.png\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"2\",\"updateTime\":\"2023-11-18T03:16:32.857Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (28, '2023-11-18 17:55:20.937', '2023-11-18 17:55:20.937', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 4594785, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"\",\"createTime\":\"2023-11-18T09:54:56.853Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":2,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"asdf\",\"updateTime\":\"2023-11-18T09:54:56.853Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (29, '2023-11-18 17:58:59.798', '2023-11-18 17:58:59.798', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 8227769, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"\",\"createTime\":\"2023-11-18T09:58:07.278Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"asdf\",\"updateTime\":\"2023-11-18T09:58:07.278Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (30, '2023-11-18 18:00:21.640', '2023-11-18 18:00:21.640', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 6059842, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-11-18T10:00:04.586Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"asdf\",\"updateTime\":\"2023-11-18T10:00:04.586Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (31, '2023-11-18 18:09:17.347', '2023-11-18 18:09:17.347', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9101921, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":5,\"CreatedAt\":\"2023-11-18T18:00:21.634+08:00\",\"UpdatedAt\":\"2023-11-18T18:00:21.634+08:00\",\"allowComment\":\"\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><strong>asdf</strong></p>\",\"createTime\":\"2023-11-18T18:00:04.586+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"asdf\",\"updateTime\":\"2023-11-18T18:00:04.586+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (32, '2023-11-18 18:12:07.174', '2023-11-18 18:12:07.174', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 3727600, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":4,\"CreatedAt\":\"2023-11-18T17:58:59.793+08:00\",\"UpdatedAt\":\"2023-11-18T17:58:59.793+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<h1>sdfasdfasdf</h1>\",\"createTime\":\"2023-11-18T17:58:07.278+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"asdf\",\"updateTime\":\"2023-11-18T17:58:07.278+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (33, '2023-11-20 07:48:17.602', '2023-11-20 07:48:17.602', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 6808193, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><br></p><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"auto\\\" height=\\\"auto\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231120074647.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><p><img src=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png\\\" alt=\\\"image.png\\\" data-href=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png\\\" style=\\\"\\\"/></p><p><img src=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png\\\" alt=\\\"image.png\\\" data-href=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png\\\" style=\\\"\\\"/></p>\",\"createTime\":\"2023-11-19T23:43:24.835Z\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231120074806.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"test\",\"type\":\"阿斯蒂芬\",\"updateTime\":\"2023-11-19T23:43:24.835Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (34, '2023-11-20 07:49:25.691', '2023-11-20 07:49:25.691', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 28688957, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><br></p><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"auto\\\" height=\\\"auto\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231120074647.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><p><img src=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png\\\" alt=\\\"image.png\\\" data-href=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png\\\" style=\\\"\\\"/></p><p><img src=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png\\\" alt=\\\"image.png\\\" data-href=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png\\\" style=\\\"\\\"/></p>\",\"createTime\":\"2023-11-19T23:43:24.835Z\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231120074806.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"test\",\"type\":\"阿斯蒂芬\",\"updateTime\":\"2023-11-19T23:43:24.835Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (35, '2023-11-28 11:16:19.239', '2023-11-28 11:16:19.239', NULL, '127.0.0.1', 'POST', '/system/getSystemConfig', 200, 656240, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '', '{\"code\":0,\"data\":{\"config\":{\"jwt\":{\"signing-key\":\"40d77a4d-d902-4fec-80d9-256c42988548\",\"expires-time\":\"7d\",\"buffer-time\":\"1d\",\"issuer\":\"qmPlus\"},\"zap\":{\"level\":\"info\",\"prefix\":\"[github.com/flipped-aurora/gin-vue-admin/server]\",\"format\":\"console\",\"director\":\"log\",\"encode-level\":\"LowercaseColorLevelEncoder\",\"stacktrace-key\":\"stacktrace\",\"max-age\":0,\"show-line\":true,\"log-in-console\":true},\"redis\":{\"addr\":\"127.0.0.1:6379\",\"password\":\"\",\"db\":0},\"mongo\":{\"coll\":\"\",\"options\":\"\",\"database\":\"\",\"username\":\"\",\"password\":\"\",\"min-pool-size\":0,\"max-pool-size\":100,\"socket-timeout-ms\":0,\"connect-timeout-ms\":0,\"is-zap\":false,\"hosts\":[{\"host\":\"\",\"port\":\"\"}]},\"email\":{\"to\":\"xxx@qq.com\",\"from\":\"xxx@163.com\",\"host\":\"smtp.163.com\",\"secret\":\"xxx\",\"nickname\":\"test\",\"port\":465,\"is-ssl\":true},\"system\":{\"env\":\"local\",\"db-type\":\"mysql\",\"oss-type\":\"local\",\"router-prefix\":\"\",\"addr\":8888,\"iplimit-count\":15000,\"iplimit-time\":3600,\"use-multipoint\":false,\"use-redis\":false,\"use-mongo\":false},\"captcha\":{\"key-long\":6,\"img-width\":240,\"img-height\":80,\"open-captcha\":0,\"open-captcha-timeout\":3600},\"autocode\":{\"server-model\":\"/model/%s\",\"server-router\":\"/router/%s\",\"server\":\"/server\",\"server-api\":\"/api/v1/%s\",\"server-plug\":\"/plugin/%s\",\"server-initialize\":\"/initialize\",\"root\":\"/Volumes/person/code/blog/after/gin-vue-admin\",\"web-table\":\"/view\",\"web\":\"/web/src\",\"server-service\":\"/service/%s\",\"server-request\":\"/model/%s/request/\",\"web-api\":\"/api\",\"web-form\":\"/view\",\"transfer-restart\":true},\"mysql\":{\"prefix\":\"\",\"port\":\"3306\",\"config\":\"charset=utf8mb4\\u0026parseTime=True\\u0026loc=Local\",\"db-name\":\"blog\",\"username\":\"root\",\"password\":\"root1234\",\"path\":\"127.0.0.1\",\"engine\":\"\",\"log-mode\":\"error\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"mssql\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"pgsql\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"oracle\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"sqlite\":{\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false},\"db-list\":[{\"type\":\"\",\"alias-name\":\"\",\"prefix\":\"\",\"port\":\"\",\"config\":\"\",\"db-name\":\"\",\"username\":\"\",\"password\":\"\",\"path\":\"\",\"engine\":\"\",\"log-mode\":\"\",\"max-idle-conns\":10,\"max-open-conns\":100,\"singular\":false,\"log-zap\":false,\"disable\":true}],\"local\":{\"path\":\"uploads/file\",\"store-path\":\"uploads/file\"},\"qiniu\":{\"zone\":\"ZoneHuaDong\",\"bucket\":\"\",\"img-path\":\"\",\"access-key\":\"\",\"secret-key\":\"\",\"use-https\":false,\"use-cdn-domains\":false},\"aliyun-oss\":{\"endpoint\":\"yourEndpoint\",\"access-key-id\":\"yourAccessKeyId\",\"access-key-secret\":\"yourAccessKeySecret\",\"bucket-name\":\"yourBucketName\",\"bucket-url\":\"yourBucketUrl\",\"base-path\":\"yourBasePath\"},\"hua-wei-obs\":{\"path\":\"you-path\",\"bucket\":\"you-bucket\",\"endpoint\":\"you-endpoint\",\"access-key\":\"you-access-key\",\"secret-key\":\"you-secret-key\"},\"tencent-cos\":{\"bucket\":\"xxxxx-10005608\",\"region\":\"ap-shanghai\",\"secret-id\":\"your-secret-id\",\"secret-key\":\"your-secret-key\",\"base-url\":\"https://gin.vue.admin\",\"path-prefix\":\"github.com/flipped-aurora/gin-vue-admin/server\"},\"aws-s3\":{\"bucket\":\"xxxxx-10005608\",\"region\":\"ap-shanghai\",\"endpoint\":\"\",\"secret-id\":\"your-secret-id\",\"secret-key\":\"your-secret-key\",\"base-url\":\"https://gin.vue.admin\",\"path-prefix\":\"github.com/flipped-aurora/gin-vue-admin/server\",\"s3-force-path-style\":false,\"disable-ssl\":false},\"excel\":{\"dir\":\"./resource/excel/\"},\"timer\":{\"spec\":\"@daily\",\"detail\":[{\"tableName\":\"sys_operation_records\",\"compareField\":\"created_at\",\"interval\":\"2160h\"},{\"tableName\":\"jwt_blacklists\",\"compareField\":\"created_at\",\"interval\":\"168h\"}],\"start\":true,\"with_seconds\":false},\"cors\":{\"mode\":\"strict-whitelist\",\"whitelist\":[{\"allow-origin\":\"example1.com\",\"allow-methods\":\"POST, GET\",\"allow-headers\":\"Content-Type,AccessToken,X-CSRF-Token, Authorization, Token,X-Token,X-User-Id\",\"expose-headers\":\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\",\"allow-credentials\":true},{\"allow-origin\":\"example2.com\",\"allow-methods\":\"GET, POST\",\"allow-headers\":\"content-type\",\"expose-headers\":\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\",\"allow-credentials\":true}]}}},\"msg\":\"获取成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (36, '2023-11-28 11:18:13.153', '2023-11-28 11:18:13.153', NULL, '127.0.0.1', 'POST', '/api/createApi', 200, 5286920, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"path\":\"/tblMeta/getTblMetaListAll\",\"apiGroup\":\"tblMeta表\",\"method\":\"GET\",\"description\":\"获取所有的菜单类型\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (37, '2023-11-28 11:19:57.715', '2023-11-28 11:19:57.715', NULL, '127.0.0.1', 'POST', '/casbin/updateCasbin', 200, 13268695, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"authorityId\":888,\"casbinInfos\":[{\"path\":\"/jwt/jsonInBlacklist\",\"method\":\"POST\"},{\"path\":\"/user/deleteUser\",\"method\":\"DELETE\"},{\"path\":\"/user/admin_register\",\"method\":\"POST\"},{\"path\":\"/user/getUserList\",\"method\":\"POST\"},{\"path\":\"/user/setUserInfo\",\"method\":\"PUT\"},{\"path\":\"/user/setSelfInfo\",\"method\":\"PUT\"},{\"path\":\"/user/getUserInfo\",\"method\":\"GET\"},{\"path\":\"/user/setUserAuthorities\",\"method\":\"POST\"},{\"path\":\"/user/changePassword\",\"method\":\"POST\"},{\"path\":\"/user/setUserAuthority\",\"method\":\"POST\"},{\"path\":\"/user/resetPassword\",\"method\":\"POST\"},{\"path\":\"/api/createApi\",\"method\":\"POST\"},{\"path\":\"/api/deleteApi\",\"method\":\"POST\"},{\"path\":\"/api/updateApi\",\"method\":\"POST\"},{\"path\":\"/api/getApiList\",\"method\":\"POST\"},{\"path\":\"/api/getAllApis\",\"method\":\"POST\"},{\"path\":\"/api/getApiById\",\"method\":\"POST\"},{\"path\":\"/api/deleteApisByIds\",\"method\":\"DELETE\"},{\"path\":\"/authority/copyAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/createAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/deleteAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/updateAuthority\",\"method\":\"PUT\"},{\"path\":\"/authority/getAuthorityList\",\"method\":\"POST\"},{\"path\":\"/authority/setDataAuthority\",\"method\":\"POST\"},{\"path\":\"/casbin/updateCasbin\",\"method\":\"POST\"},{\"path\":\"/casbin/getPolicyPathByAuthorityId\",\"method\":\"POST\"},{\"path\":\"/menu/addBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/getMenu\",\"method\":\"POST\"},{\"path\":\"/menu/deleteBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/updateBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/getBaseMenuById\",\"method\":\"POST\"},{\"path\":\"/menu/getMenuList\",\"method\":\"POST\"},{\"path\":\"/menu/getBaseMenuTree\",\"method\":\"POST\"},{\"path\":\"/menu/getMenuAuthority\",\"method\":\"POST\"},{\"path\":\"/menu/addMenuAuthority\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/findFile\",\"method\":\"GET\"},{\"path\":\"/fileUploadAndDownload/breakpointContinue\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/breakpointContinueFinish\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/removeChunk\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/upload\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/deleteFile\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/editFileName\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/getFileList\",\"method\":\"POST\"},{\"path\":\"/system/getServerInfo\",\"method\":\"POST\"},{\"path\":\"/system/getSystemConfig\",\"method\":\"POST\"},{\"path\":\"/system/setSystemConfig\",\"method\":\"POST\"},{\"path\":\"/customer/customer\",\"method\":\"PUT\"},{\"path\":\"/customer/customer\",\"method\":\"POST\"},{\"path\":\"/customer/customer\",\"method\":\"DELETE\"},{\"path\":\"/customer/customer\",\"method\":\"GET\"},{\"path\":\"/customer/customerList\",\"method\":\"GET\"},{\"path\":\"/autoCode/getDB\",\"method\":\"GET\"},{\"path\":\"/autoCode/getTables\",\"method\":\"GET\"},{\"path\":\"/autoCode/createTemp\",\"method\":\"POST\"},{\"path\":\"/autoCode/preview\",\"method\":\"POST\"},{\"path\":\"/autoCode/getColumn\",\"method\":\"GET\"},{\"path\":\"/autoCode/createPlug\",\"method\":\"POST\"},{\"path\":\"/autoCode/installPlugin\",\"method\":\"POST\"},{\"path\":\"/autoCode/pubPlug\",\"method\":\"POST\"},{\"path\":\"/autoCode/createPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/getPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/delPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/getMeta\",\"method\":\"POST\"},{\"path\":\"/autoCode/rollback\",\"method\":\"POST\"},{\"path\":\"/autoCode/getSysHistory\",\"method\":\"POST\"},{\"path\":\"/autoCode/delSysHistory\",\"method\":\"POST\"},{\"path\":\"/sysDictionaryDetail/updateSysDictionaryDetail\",\"method\":\"PUT\"},{\"path\":\"/sysDictionaryDetail/createSysDictionaryDetail\",\"method\":\"POST\"},{\"path\":\"/sysDictionaryDetail/deleteSysDictionaryDetail\",\"method\":\"DELETE\"},{\"path\":\"/sysDictionaryDetail/findSysDictionaryDetail\",\"method\":\"GET\"},{\"path\":\"/sysDictionaryDetail/getSysDictionaryDetailList\",\"method\":\"GET\"},{\"path\":\"/sysDictionary/createSysDictionary\",\"method\":\"POST\"},{\"path\":\"/sysDictionary/deleteSysDictionary\",\"method\":\"DELETE\"},{\"path\":\"/sysDictionary/updateSysDictionary\",\"method\":\"PUT\"},{\"path\":\"/sysDictionary/findSysDictionary\",\"method\":\"GET\"},{\"path\":\"/sysDictionary/getSysDictionaryList\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/createSysOperationRecord\",\"method\":\"POST\"},{\"path\":\"/sysOperationRecord/findSysOperationRecord\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/getSysOperationRecordList\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/deleteSysOperationRecord\",\"method\":\"DELETE\"},{\"path\":\"/sysOperationRecord/deleteSysOperationRecordByIds\",\"method\":\"DELETE\"},{\"path\":\"/simpleUploader/upload\",\"method\":\"POST\"},{\"path\":\"/simpleUploader/checkFileMd5\",\"method\":\"GET\"},{\"path\":\"/simpleUploader/mergeFileMd5\",\"method\":\"GET\"},{\"path\":\"/email/emailTest\",\"method\":\"POST\"},{\"path\":\"/email/emailSend\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/setAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/getAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/canRemoveAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/chatGpt/getTable\",\"method\":\"POST\"},{\"path\":\"/chatGpt/createSK\",\"method\":\"POST\"},{\"path\":\"/chatGpt/getSK\",\"method\":\"GET\"},{\"path\":\"/chatGpt/deleteSK\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/createTblContent\",\"method\":\"POST\"},{\"path\":\"/tblContent/deleteTblContent\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/deleteTblContentByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/updateTblContent\",\"method\":\"PUT\"},{\"path\":\"/tblContent/findTblContent\",\"method\":\"GET\"},{\"path\":\"/tblContent/getTblContentList\",\"method\":\"GET\"},{\"path\":\"/tblContentMeta/createTblContentMeta\",\"method\":\"POST\"},{\"path\":\"/tblContentMeta/deleteTblContentMeta\",\"method\":\"DELETE\"},{\"path\":\"/tblContentMeta/deleteTblContentMetaByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblContentMeta/updateTblContentMeta\",\"method\":\"PUT\"},{\"path\":\"/tblContentMeta/findTblContentMeta\",\"method\":\"GET\"},{\"path\":\"/tblContentMeta/getTblContentMetaList\",\"method\":\"GET\"},{\"path\":\"/tblMeta/createTblMeta\",\"method\":\"POST\"},{\"path\":\"/tblMeta/deleteTblMeta\",\"method\":\"DELETE\"},{\"path\":\"/tblMeta/deleteTblMetaByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblMeta/updateTblMeta\",\"method\":\"PUT\"},{\"path\":\"/tblMeta/findTblMeta\",\"method\":\"GET\"},{\"path\":\"/tblMeta/getTblMetaList\",\"method\":\"GET\"},{\"path\":\"/tblMeta/getTblMetaListAll\",\"method\":\"GET\"}]}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (38, '2023-11-28 11:40:29.933', '2023-11-28 11:40:29.933', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 14481122, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p><span>3</span></p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T03:39:37.385Z\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231128113952.png\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"updateTime\":\"2023-11-28T03:39:37.385Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (39, '2023-12-02 07:59:44.621', '2023-12-02 07:59:44.621', NULL, '127.0.0.1', 'PUT', '/tblMeta/updateTblMeta', 200, 66332359, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-17T08:01:55.584+08:00\",\"UpdatedAt\":\"2023-11-17T08:01:55.584+08:00\",\"count\":0,\"description\":\"\",\"name\":\"下载\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (40, '2023-12-02 08:02:15.974', '2023-12-02 08:02:15.974', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 6483862, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"工作内容，开发技术、运维技术等\",\"name\":\"技术\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (41, '2023-12-02 08:03:03.389', '2023-12-02 08:03:03.389', NULL, '127.0.0.1', 'PUT', '/tblMeta/updateTblMeta', 200, 9352877, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-17T08:01:55.584+08:00\",\"UpdatedAt\":\"2023-12-02T07:59:44.558+08:00\",\"count\":0,\"description\":\"镜像下载、iso下载、操作系统下载、镜像源下载。\",\"name\":\"下载\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (42, '2023-12-02 08:03:21.699', '2023-12-02 08:03:21.699', NULL, '127.0.0.1', 'PUT', '/tblMeta/updateTblMeta', 200, 63377225, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":3,\"CreatedAt\":\"2023-11-17T07:59:40.275+08:00\",\"UpdatedAt\":\"2023-11-17T07:59:40.275+08:00\",\"count\":0,\"description\":\"软件安装教程\",\"name\":\"软件\",\"order\":1,\"type\":\"菜单\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (43, '2023-12-03 12:16:10.203', '2023-12-03 12:16:10.203', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 18430250, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":6,\"CreatedAt\":\"2023-11-20T07:49:25.675+08:00\",\"UpdatedAt\":\"2023-11-20T07:49:25.675+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><br></p><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"auto\\\" height=\\\"auto\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231120074647.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><p><img src=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png\\\" alt=\\\"image.png\\\" data-href=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074738.png\\\" style=\\\"\\\"/></p><p><img src=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png\\\" alt=\\\"image.png\\\" data-href=\\\"/api/uploads/file/78805a221a988e79ef3f42d7c5bfd418_20231120074745.png\\\" style=\\\"\\\"/></p>\",\"createTime\":\"2023-11-20T07:43:24.835+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231120074806.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"test\",\"type\":\"软件\",\"updateTime\":\"2023-11-20T07:43:24.835+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (44, '2023-12-03 12:16:18.343', '2023-12-03 12:16:18.343', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 4471037, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":5,\"CreatedAt\":\"2023-11-18T18:00:21.634+08:00\",\"UpdatedAt\":\"2023-11-18T18:09:17.341+08:00\",\"allowComment\":\"\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><strong>asdf</strong></p>\",\"createTime\":\"2023-11-18T18:00:04.586+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"机场\",\"updateTime\":\"2023-11-18T18:00:04.586+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (45, '2023-12-03 12:16:24.863', '2023-12-03 12:16:24.863', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 8030688, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":3,\"CreatedAt\":\"2023-11-18T17:55:20.932+08:00\",\"UpdatedAt\":\"2023-11-18T17:55:20.932+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"\",\"createTime\":\"2023-11-18T17:54:56.853+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":2,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"搞钱\",\"updateTime\":\"2023-11-18T17:54:56.853+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (46, '2023-12-03 12:16:31.167', '2023-12-03 12:16:31.167', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 5347465, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"UpdatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"allowComment\":\"禁止\",\"authorId\":0,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T11:16:32.857+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231118111707.png\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"下载\",\"updateTime\":\"2023-11-18T11:16:32.857+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (47, '2023-12-03 12:16:42.059', '2023-12-03 12:16:42.059', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 8614822, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":4,\"CreatedAt\":\"2023-11-18T17:58:59.793+08:00\",\"UpdatedAt\":\"2023-11-18T18:12:07.17+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<h1>sdfasdfasdf</h1>\",\"createTime\":\"2023-11-18T17:58:07.278+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"技术\",\"updateTime\":\"2023-11-18T17:58:07.278+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (48, '2023-12-05 07:14:13.108', '2023-12-05 07:14:13.108', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9580485, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"UpdatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p><span>3</span></p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T11:39:37.385+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231128113952.png\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"updateTime\":\"2023-11-28T11:39:37.385+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (49, '2023-12-05 07:20:53.764', '2023-12-05 07:20:53.764', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 2077405, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071614.jpg\\\" alt=\\\"一码界.jpg\\\" data-href=\\\"/api/uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071614.jpg\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"auto\\\" height=\\\"auto\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231205071700.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >😃测试</div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-04T23:14:13.126Z\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"updateTime\":\"2023-12-04T23:14:13.126Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (50, '2023-12-05 07:32:00.370', '2023-12-05 07:32:00.370', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 3808512, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-04T23:20:53.776Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"软件\",\"updateTime\":\"2023-12-04T23:20:53.776Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (51, '2023-12-05 07:34:13.300', '2023-12-05 07:34:13.300', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 1575446, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-04T23:20:53.776Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"软件\",\"updateTime\":\"2023-12-04T23:20:53.776Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (52, '2023-12-05 07:35:00.168', '2023-12-05 07:35:00.168', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 1653469, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-04T23:34:47.117Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-04T23:34:47.117Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (53, '2023-12-05 07:35:21.616', '2023-12-05 07:35:21.616', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 3992364, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-04T23:34:47.117Z\",\"downNum\":0,\"img\":\"uploads/file/fb8469a0c94528ce71e415c904d3be9a_20231205073519.png\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-04T23:34:47.117Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (54, '2023-12-05 07:36:55.854', '2023-12-05 07:36:55.854', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 3159253, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-04T23:36:42.926Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"sdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"2q4\",\"type\":\"VPS\",\"updateTime\":\"2023-12-04T23:36:42.926Z\",\"viemNum\":0}', '{\"code\":7,\"data\":{},\"msg\":\"创建失败\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (55, '2023-12-05 07:42:49.348', '2023-12-05 07:42:49.348', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 3050436, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-04T23:36:42.926Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"sdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"2q4\",\"type\":\"VPS\",\"updateTime\":\"2023-12-04T23:36:42.926Z\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (56, '2023-12-05 21:07:21.707', '2023-12-05 21:07:21.707', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 17401842, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T13:07:04.374Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:07:04.374Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (57, '2023-12-05 21:08:36.259', '2023-12-05 21:08:36.259', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 8419633, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T13:07:04.374Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:07:04.374Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (58, '2023-12-05 21:08:51.139', '2023-12-05 21:08:51.139', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 8430016, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T13:07:04.374Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:07:04.374Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (59, '2023-12-05 21:23:53.851', '2023-12-05 21:23:53.851', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 340432, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T13:07:04.374Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:07:04.374Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":7,\"data\":{},\"msg\":\"json: cannot unmarshal number into Go struct field TblContent.tags of type string\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (60, '2023-12-05 21:24:30.578', '2023-12-05 21:24:30.578', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 57535, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T13:07:04.374Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:07:04.374Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":7,\"data\":{},\"msg\":\"json: cannot unmarshal number into Go struct field TblContent.tags of type string\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (61, '2023-12-05 21:24:35.608', '2023-12-05 21:24:35.608', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 131185, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T13:07:04.374Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:07:04.374Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":7,\"data\":{},\"msg\":\"json: cannot unmarshal number into Go struct field TblContent.tags of type string\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (62, '2023-12-05 21:29:25.183', '2023-12-05 21:29:25.183', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 29333, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T13:29:06.017Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:29:06.017Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":7,\"data\":{},\"msg\":\"json: cannot unmarshal number into Go struct field TblContent.tags of type string\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (63, '2023-12-05 21:29:52.497', '2023-12-05 21:29:52.497', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 46582, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T13:29:06.017Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:29:06.017Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":7,\"data\":{},\"msg\":\"json: cannot unmarshal number into Go struct field TblContent.tags of type string\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (64, '2023-12-05 21:31:26.470', '2023-12-05 21:31:26.470', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 62316, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T13:29:06.017Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:29:06.017Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":7,\"data\":{},\"msg\":\"json: cannot unmarshal number into Go struct field TblContent.tags of type string\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (65, '2023-12-05 21:33:44.539', '2023-12-05 21:33:44.539', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 7054966, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T13:29:06.017Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:29:06.017Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (66, '2023-12-05 21:35:31.422', '2023-12-05 21:35:31.422', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 9207285, 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T13:29:06.017Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"updateTime\":\"2023-12-05T13:29:06.017Z\",\"viemNum\":0,\"tags\":[6,8]}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (67, '2023-12-06 21:13:31.816', '2023-12-06 21:13:31.816', NULL, '127.0.0.1', 'POST', '/casbin/updateCasbin', 200, 22349400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"authorityId\":888,\"casbinInfos\":[{\"path\":\"/jwt/jsonInBlacklist\",\"method\":\"POST\"},{\"path\":\"/user/deleteUser\",\"method\":\"DELETE\"},{\"path\":\"/user/admin_register\",\"method\":\"POST\"},{\"path\":\"/user/getUserList\",\"method\":\"POST\"},{\"path\":\"/user/setUserInfo\",\"method\":\"PUT\"},{\"path\":\"/user/setSelfInfo\",\"method\":\"PUT\"},{\"path\":\"/user/getUserInfo\",\"method\":\"GET\"},{\"path\":\"/user/setUserAuthorities\",\"method\":\"POST\"},{\"path\":\"/user/changePassword\",\"method\":\"POST\"},{\"path\":\"/user/setUserAuthority\",\"method\":\"POST\"},{\"path\":\"/user/resetPassword\",\"method\":\"POST\"},{\"path\":\"/api/createApi\",\"method\":\"POST\"},{\"path\":\"/api/deleteApi\",\"method\":\"POST\"},{\"path\":\"/api/updateApi\",\"method\":\"POST\"},{\"path\":\"/api/getApiList\",\"method\":\"POST\"},{\"path\":\"/api/getAllApis\",\"method\":\"POST\"},{\"path\":\"/api/getApiById\",\"method\":\"POST\"},{\"path\":\"/api/deleteApisByIds\",\"method\":\"DELETE\"},{\"path\":\"/authority/copyAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/createAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/deleteAuthority\",\"method\":\"POST\"},{\"path\":\"/authority/updateAuthority\",\"method\":\"PUT\"},{\"path\":\"/authority/getAuthorityList\",\"method\":\"POST\"},{\"path\":\"/authority/setDataAuthority\",\"method\":\"POST\"},{\"path\":\"/casbin/updateCasbin\",\"method\":\"POST\"},{\"path\":\"/casbin/getPolicyPathByAuthorityId\",\"method\":\"POST\"},{\"path\":\"/menu/addBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/getMenu\",\"method\":\"POST\"},{\"path\":\"/menu/deleteBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/updateBaseMenu\",\"method\":\"POST\"},{\"path\":\"/menu/getBaseMenuById\",\"method\":\"POST\"},{\"path\":\"/menu/getMenuList\",\"method\":\"POST\"},{\"path\":\"/menu/getBaseMenuTree\",\"method\":\"POST\"},{\"path\":\"/menu/getMenuAuthority\",\"method\":\"POST\"},{\"path\":\"/menu/addMenuAuthority\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/findFile\",\"method\":\"GET\"},{\"path\":\"/fileUploadAndDownload/breakpointContinue\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/breakpointContinueFinish\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/removeChunk\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/upload\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/deleteFile\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/editFileName\",\"method\":\"POST\"},{\"path\":\"/fileUploadAndDownload/getFileList\",\"method\":\"POST\"},{\"path\":\"/system/getServerInfo\",\"method\":\"POST\"},{\"path\":\"/system/getSystemConfig\",\"method\":\"POST\"},{\"path\":\"/system/setSystemConfig\",\"method\":\"POST\"},{\"path\":\"/customer/customer\",\"method\":\"PUT\"},{\"path\":\"/customer/customer\",\"method\":\"POST\"},{\"path\":\"/customer/customer\",\"method\":\"DELETE\"},{\"path\":\"/customer/customer\",\"method\":\"GET\"},{\"path\":\"/customer/customerList\",\"method\":\"GET\"},{\"path\":\"/autoCode/getDB\",\"method\":\"GET\"},{\"path\":\"/autoCode/getTables\",\"method\":\"GET\"},{\"path\":\"/autoCode/createTemp\",\"method\":\"POST\"},{\"path\":\"/autoCode/preview\",\"method\":\"POST\"},{\"path\":\"/autoCode/getColumn\",\"method\":\"GET\"},{\"path\":\"/autoCode/createPlug\",\"method\":\"POST\"},{\"path\":\"/autoCode/installPlugin\",\"method\":\"POST\"},{\"path\":\"/autoCode/pubPlug\",\"method\":\"POST\"},{\"path\":\"/autoCode/createPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/getPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/delPackage\",\"method\":\"POST\"},{\"path\":\"/autoCode/getMeta\",\"method\":\"POST\"},{\"path\":\"/autoCode/rollback\",\"method\":\"POST\"},{\"path\":\"/autoCode/getSysHistory\",\"method\":\"POST\"},{\"path\":\"/autoCode/delSysHistory\",\"method\":\"POST\"},{\"path\":\"/sysDictionaryDetail/updateSysDictionaryDetail\",\"method\":\"PUT\"},{\"path\":\"/sysDictionaryDetail/createSysDictionaryDetail\",\"method\":\"POST\"},{\"path\":\"/sysDictionaryDetail/deleteSysDictionaryDetail\",\"method\":\"DELETE\"},{\"path\":\"/sysDictionaryDetail/findSysDictionaryDetail\",\"method\":\"GET\"},{\"path\":\"/sysDictionaryDetail/getSysDictionaryDetailList\",\"method\":\"GET\"},{\"path\":\"/sysDictionary/createSysDictionary\",\"method\":\"POST\"},{\"path\":\"/sysDictionary/deleteSysDictionary\",\"method\":\"DELETE\"},{\"path\":\"/sysDictionary/updateSysDictionary\",\"method\":\"PUT\"},{\"path\":\"/sysDictionary/findSysDictionary\",\"method\":\"GET\"},{\"path\":\"/sysDictionary/getSysDictionaryList\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/createSysOperationRecord\",\"method\":\"POST\"},{\"path\":\"/sysOperationRecord/findSysOperationRecord\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/getSysOperationRecordList\",\"method\":\"GET\"},{\"path\":\"/sysOperationRecord/deleteSysOperationRecord\",\"method\":\"DELETE\"},{\"path\":\"/sysOperationRecord/deleteSysOperationRecordByIds\",\"method\":\"DELETE\"},{\"path\":\"/simpleUploader/upload\",\"method\":\"POST\"},{\"path\":\"/simpleUploader/checkFileMd5\",\"method\":\"GET\"},{\"path\":\"/simpleUploader/mergeFileMd5\",\"method\":\"GET\"},{\"path\":\"/email/emailTest\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/setAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/getAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/authorityBtn/canRemoveAuthorityBtn\",\"method\":\"POST\"},{\"path\":\"/chatGpt/getTable\",\"method\":\"POST\"},{\"path\":\"/chatGpt/createSK\",\"method\":\"POST\"},{\"path\":\"/chatGpt/getSK\",\"method\":\"GET\"},{\"path\":\"/chatGpt/deleteSK\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/createTblContent\",\"method\":\"POST\"},{\"path\":\"/tblContent/deleteTblContent\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/deleteTblContentByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblContent/updateTblContent\",\"method\":\"PUT\"},{\"path\":\"/tblContent/findTblContent\",\"method\":\"GET\"},{\"path\":\"/tblContent/getTblContentList\",\"method\":\"GET\"},{\"path\":\"/tblContentMeta/createTblContentMeta\",\"method\":\"POST\"},{\"path\":\"/tblContentMeta/deleteTblContentMeta\",\"method\":\"DELETE\"},{\"path\":\"/tblContentMeta/deleteTblContentMetaByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblContentMeta/updateTblContentMeta\",\"method\":\"PUT\"},{\"path\":\"/tblContentMeta/findTblContentMeta\",\"method\":\"GET\"},{\"path\":\"/tblContentMeta/getTblContentMetaList\",\"method\":\"GET\"},{\"path\":\"/tblMeta/createTblMeta\",\"method\":\"POST\"},{\"path\":\"/tblMeta/deleteTblMeta\",\"method\":\"DELETE\"},{\"path\":\"/tblMeta/deleteTblMetaByIds\",\"method\":\"DELETE\"},{\"path\":\"/tblMeta/updateTblMeta\",\"method\":\"PUT\"},{\"path\":\"/tblMeta/findTblMeta\",\"method\":\"GET\"},{\"path\":\"/tblMeta/getTblMetaList\",\"method\":\"GET\"},{\"path\":\"/tblMeta/getTblMetaListAll\",\"method\":\"GET\"}]}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (68, '2023-12-08 08:12:45.920', '2023-12-08 08:12:45.920', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10371500, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"UpdatedAt\":\"2023-12-05T07:14:13.1+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p>3</p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code class=\\\"language-go\\\">// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T11:39:37.385+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231128113952.png\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"tags\":[6,8],\"updateTime\":\"2023-11-28T11:39:37.385+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (69, '2023-12-08 08:13:10.656', '2023-12-08 08:13:10.656', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 4104300, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071614.jpg\\\" alt=\\\"一码界.jpg\\\" data-href=\\\"/api/uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071614.jpg\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"auto\\\" height=\\\"auto\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231205071700.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >😃测试</div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[6,8],\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (70, '2023-12-08 20:46:50.124', '2023-12-08 20:46:50.124', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 4050100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-08T08:13:10.653+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</td><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</td><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</td><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</td></tr><tr><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">查水电费</td><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">阿斯蒂芬</td><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">阿斯蒂芬</td><td colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[],\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (71, '2023-12-08 20:48:43.075', '2023-12-08 20:48:43.075', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 5150500, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-08T20:46:50.12+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[],\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viemNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (72, '2023-12-08 21:25:57.920', '2023-12-08 21:25:57.920', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 4967600, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-08T20:48:43.07+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[6,8],\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":7}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (73, '2023-12-08 21:29:23.093', '2023-12-08 21:29:23.093', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 4172400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-08T21:25:57.915+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[6,8],\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":11}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (74, '2023-12-08 21:30:58.157', '2023-12-08 21:30:58.157', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10791000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-08T21:29:23.089+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/59f4066e9f37f63b10291cb8a3f43bcc_20231205071435.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[6,8],\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":11}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (75, '2023-12-09 06:29:03.442', '2023-12-09 06:29:03.442', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10541400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":9,\"CreatedAt\":\"2023-12-05T07:42:49.345+08:00\",\"UpdatedAt\":\"2023-12-05T07:42:49.345+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T07:36:42.926+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"sdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"百度云盘是一个垃圾\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T07:36:42.926+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (76, '2023-12-09 06:32:54.105', '2023-12-09 06:32:54.105', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 11207700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":9,\"CreatedAt\":\"2023-12-05T07:42:49.345+08:00\",\"UpdatedAt\":\"2023-12-09T06:29:03.431+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T07:36:42.926+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063250.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"sdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"百度云盘是一个垃圾\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T07:36:42.926+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (77, '2023-12-09 06:33:41.440', '2023-12-09 06:33:41.440', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9745900, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-08T21:30:58.146+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":20}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (78, '2023-12-09 06:33:49.662', '2023-12-09 06:33:49.662', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 6681900, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"UpdatedAt\":\"2023-12-08T08:12:45.91+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p>3</p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code class=\\\"language-go\\\">// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T11:39:37.385+08:00\",\"downNum\":0,\"img\":\"uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"tags\":[],\"tagsView\":null,\"updateTime\":\"2023-11-28T11:39:37.385+08:00\",\"viewNum\":3}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (79, '2023-12-09 06:34:18.760', '2023-12-09 06:34:18.760', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10224900, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":6,\"CreatedAt\":\"2023-11-20T07:49:25.675+08:00\",\"UpdatedAt\":\"2023-12-03T12:16:10.186+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>测试一下</p><p><br></p>\",\"createTime\":\"2023-11-20T07:43:24.835+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063359.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"test\",\"type\":\"软件\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-20T07:43:24.835+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (80, '2023-12-09 06:34:38.641', '2023-12-09 06:34:38.641', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13178700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":5,\"CreatedAt\":\"2023-11-18T18:00:21.634+08:00\",\"UpdatedAt\":\"2023-12-03T12:16:18.339+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p><strong>asdf</strong></p>\",\"createTime\":\"2023-11-18T18:00:04.586+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063427.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-18T18:00:04.586+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (81, '2023-12-09 06:34:56.931', '2023-12-09 06:34:56.931', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10634400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":4,\"CreatedAt\":\"2023-11-18T17:58:59.793+08:00\",\"UpdatedAt\":\"2023-12-03T12:16:42.05+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<h1>sdfasdfasdf</h1>\",\"createTime\":\"2023-11-18T17:58:07.278+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063450.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"软件\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-18T17:58:07.278+08:00\",\"viewNum\":1}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (82, '2023-12-09 06:35:14.729', '2023-12-09 06:35:14.729', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10074100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":3,\"CreatedAt\":\"2023-11-18T17:55:20.932+08:00\",\"UpdatedAt\":\"2023-12-03T12:16:24.855+08:00\",\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"\",\"createTime\":\"2023-11-18T17:54:56.853+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063508.jpg\",\"likesNum\":0,\"order\":2,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"软件\",\"tags\":[8,6],\"tagsView\":null,\"updateTime\":\"2023-11-18T17:54:56.853+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (83, '2023-12-09 06:35:32.331', '2023-12-09 06:35:32.331', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9310200, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"UpdatedAt\":\"2023-12-03T12:16:31.162+08:00\",\"allowComment\":\"禁止\",\"authorId\":0,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T11:16:32.857+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"软件\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-18T11:16:32.857+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (84, '2023-12-09 06:35:52.116', '2023-12-09 06:35:52.116', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9944700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":10,\"CreatedAt\":\"2023-12-05T21:07:21.692+08:00\",\"UpdatedAt\":\"2023-12-05T21:07:21.692+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T21:07:04.374+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063542.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"机场\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:07:04.374+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (85, '2023-12-09 06:36:06.949', '2023-12-09 06:36:06.949', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9917200, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":11,\"CreatedAt\":\"2023-12-05T21:08:36.25+08:00\",\"UpdatedAt\":\"2023-12-05T21:08:36.25+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T21:07:04.374+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063558.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"机场\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:07:04.374+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (86, '2023-12-09 06:36:24.714', '2023-12-09 06:36:24.714', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 9062000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":12,\"CreatedAt\":\"2023-12-05T21:08:51.132+08:00\",\"UpdatedAt\":\"2023-12-05T21:08:51.132+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T21:07:04.374+08:00\",\"downNum\":0,\"img\":\"uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063616.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"机场\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:07:04.374+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (87, '2023-12-09 06:36:35.431', '2023-12-09 06:36:35.431', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 8802300, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":13,\"CreatedAt\":\"2023-12-05T21:33:44.532+08:00\",\"UpdatedAt\":\"2023-12-05T21:33:44.532+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T21:29:06.017+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063631.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:29:06.017+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (88, '2023-12-09 06:36:51.885', '2023-12-09 06:36:51.885', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10975900, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":14,\"CreatedAt\":\"2023-12-05T21:35:31.413+08:00\",\"UpdatedAt\":\"2023-12-05T21:35:31.413+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T21:29:06.017+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063643.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1阿斯蒂芬\",\"title\":\"2阿斯蒂芬\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:29:06.017+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (89, '2023-12-09 06:51:15.710', '2023-12-09 06:51:15.710', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 7054100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"UpdatedAt\":\"2023-12-09T06:33:49.656+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p>3</p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code class=\\\"language-go\\\">// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T11:39:37.385+08:00\",\"downNum\":0,\"img\":\"uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"tags\":[],\"tagsView\":null,\"updateTime\":\"2023-11-28T11:39:37.385+08:00\",\"viewNum\":3}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (90, '2023-12-09 09:01:51.485', '2023-12-09 09:01:51.485', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13304000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"UpdatedAt\":\"2023-12-09T06:35:32.322+08:00\",\"allowComment\":\"禁止\",\"authorId\":1,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T11:16:32.857+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"软件\",\"tags\":[8,6],\"tagsView\":null,\"updateTime\":\"2023-11-18T11:16:32.857+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (91, '2023-12-09 09:02:04.495', '2023-12-09 09:02:04.495', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 15946500, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"UpdatedAt\":\"2023-12-09T06:51:15.704+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p>3</p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code class=\\\"language-go\\\">// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T11:39:37.385+08:00\",\"downNum\":0,\"img\":\"uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-28T11:39:37.385+08:00\",\"viewNum\":6}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (92, '2023-12-09 09:02:35.095', '2023-12-09 09:02:35.095', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 10630200, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-09T06:33:41.429+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[8,6],\"tagsView\":null,\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":53}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (93, '2023-12-09 09:06:46.845', '2023-12-09 09:06:46.845', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 18603400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":7,\"CreatedAt\":\"2023-11-28T11:40:29.919+08:00\",\"UpdatedAt\":\"2023-12-09T09:02:04.479+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">深入理解Go</a></p><p><a href=\\\"https://segmentfault.com/a/1190000040023113#\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">关注博客</a><a href=\\\"https://segmentfault.com/user/login\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">注册登录</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go\\\" target=\\\"\\\">主页</a></p><p><a href=\\\"https://segmentfault.com/blog/advance-go/about\\\" target=\\\"\\\">关于</a></p><p><a href=\\\"https://segmentfault.com/feeds/blog/advance-go\\\" target=\\\"\\\">RSS</a></p><p><br></p><h1><a href=\\\"https://segmentfault.com/a/1190000040023113\\\" target=\\\"\\\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a><a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">2021-05-18</a></p><p>阅读 8 分钟<a href=\\\"https://segmentfault.com/a/1190000040023113/en\\\" target=\\\"\\\">English</a></p><p>3</p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\\\"line-height: 1.5;\\\"><code class=\\\"language-go\\\">// src/runtime/string.go\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}</code></pre><ul><li><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\\\"color: var(--bs-code-color);\\\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023115\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>str</code></span>中存储的是字符对应的编码，<span style=\\\"color: var(--bs-code-color);\\\"><code>H</code></span>对应编码<span style=\\\"color: var(--bs-code-color);\\\"><code>72</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>e</code></span>对应<span style=\\\"color: var(--bs-code-color);\\\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"unsafe\\\"\\n)\\n\\ntype stringStruct struct {\\n  str unsafe.Pointer\\n  len int\\n}\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\\n\\n  for _, b := range s {\\n    fmt.Println(b)\\n  }\\n}</code></pre><p>运行输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\\\"color: var(--bs-code-color);\\\"><code>stringStruct</code></span>结构体，字段与<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>var</code></span>定义和字符串字面量：</p><pre style=\\\"line-height: 1.5;\\\"><code>var s1 string\\ns2 := \\\"Hello World!\\\"</code></pre><p>注意<span style=\\\"color: var(--bs-code-color);\\\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"\\\"</code></span>。字符串不可能为<span style=\\\"color: var(--bs-code-color);\\\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\\\"line-height: 1.5;\\\"><code>s1 := \\\"Hello \\\\nWorld\\\"\\ns2 := `Hello\\nWorld`</code></pre><p>上面代码中，<span style=\\\"color: var(--bs-code-color);\\\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\\n</code></span>，<span style=\\\"color: var(--bs-code-color);\\\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := `hello\\n  world`\\n\\n  fmt.Println(s)\\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \\\"world\\\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\\\"line-height: 1.5;\\\"><code>package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n  s := \\\"Hello World!\\\"\\n  fmt.Println(s[0])\\n\\n  fmt.Println(s[:5])\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>72\\nHello</code></pre><p>上篇文章<a href=\\\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\\\" target=\\\"_blank\\\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>符号，<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\\\"color: var(--bs-code-color);\\\"><code>strings</code></span>包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello\\\" + \\\" \\\" + \\\"World\\\"\\n  fmt.Println(s1)\\n\\n  ss := []string{\\\"Hello\\\", \\\"World\\\"}\\n  fmt.Println(strings.Join(ss, \\\" \\\"))\\n}</code></pre><p>上面代码首先使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"hello\\\"\\nvar result string\\nfor i := 1; i &lt; 100; i++ {\\n  result += s\\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接，多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>拼接：</p><pre style=\\\"line-height: 1.5;\\\"><code>func ConcatWithMultiPlus() {\\n  var s string\\n  for i := 0; i &lt; 10; i++ {\\n    s += \\\"hello\\\"\\n  }\\n}\\n\\nfunc ConcatWithOnePlus() {\\n  s1 := \\\"hello\\\"\\n  s2 := \\\"hello\\\"\\n  s3 := \\\"hello\\\"\\n  s4 := \\\"hello\\\"\\n  s5 := \\\"hello\\\"\\n  s6 := \\\"hello\\\"\\n  s7 := \\\"hello\\\"\\n  s8 := \\\"hello\\\"\\n  s9 := \\\"hello\\\"\\n  s10 := \\\"hello\\\"\\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\\n  _ = s\\n}\\n\\nfunc ConcatWithJoin() {\\n  s := []string{\\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\", \\\"hello\\\"}\\n  _ = strings.Join(s, \\\"\\\")\\n}</code></pre><p>然后在文件<span style=\\\"color: var(--bs-code-color);\\\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithOnePlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithMultiPlus()\\n  }\\n}\\n\\nfunc BenchmarkConcatWithJoin(b *testing.B) {\\n  for i := 0; i &lt; b.N; i++ {\\n    ConcatWithJoin()\\n  }\\n}</code></pre><p>运行测试：</p><pre style=\\\"line-height: 1.5;\\\"><code>$ go test -bench .\\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>一次拼接和<span style=\\\"color: var(--bs-code-color);\\\"><code>Join()</code></span>函数性能差不多，而多次<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\\\"color: var(--bs-code-color);\\\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接。如果直接使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\\\"color: var(--bs-code-color);\\\"><code>runtime</code></span>包中，使用<span style=\\\"color: var(--bs-code-color);\\\"><code>concatstrings()</code></span>函数来处理使用<span style=\\\"color: var(--bs-code-color);\\\"><code>+</code></span>拼接字符串的操作：</p><pre style=\\\"line-height: 1.5;\\\"><code>// src/runtime/string.go\\nfunc concatstrings(buf *tmpBuf, a []string) string {\\n  idx := 0\\n  l := 0\\n  count := 0\\n  for i, x := range a {\\n    n := len(x)\\n    if n == 0 {\\n      continue\\n    }\\n    if l+n &lt; l {\\n      throw(\\\"string concatenation too long\\\")\\n    }\\n    l += n\\n    count++\\n    idx = i\\n  }\\n  if count == 0 {\\n    return \\\"\\\"\\n  }\\n\\n  // If there is just one string and either it is not on the stack\\n  // or our result does not escape the calling frame (buf != nil),\\n  // then we can return that string directly.\\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\\n    return a[idx]\\n  }\\n  s, b := rawstringtmp(buf, l)\\n  for _, x := range a {\\n    copy(b, x)\\n    b = b[len(x):]\\n  }\\n  return s\\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte(str)</code></span>。首先创建一个<span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023116\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Hello\\\"\\n\\n  b := []byte(s)\\n  fmt.Println(len(b), cap(b))\\n}</code></pre><p>注意，输出的<span style=\\\"color: var(--bs-code-color);\\\"><code>cap</code></span>可能与<span style=\\\"color: var(--bs-code-color);\\\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\\\"color: var(--bs-code-color);\\\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\\\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\\\" target=\\\"_blank\\\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\\\"color: var(--bs-code-color);\\\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>UTF8编码：E4B8AD\\nUTF16BE编码：FEFF4E2D\\nUTF16LE编码：FFFE2D4E\\nUTF32BE编码：0000FEFF00004E2D\\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\\\"color: var(--bs-code-color);\\\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(len(s1))\\n  fmt.Println(len(s2))\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>12\\n15</code></pre><p><span style=\\\"color: var(--bs-code-color);\\\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\\\"color: var(--bs-code-color);\\\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s1 := \\\"Hello World!\\\"\\n  s2 := \\\"你好，中国\\\"\\n\\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\\\"https://segmentfault.com/img/remote/1460000040023117\\\" alt=\\\"\\\" data-href=\\\"\\\" style=\\\"height: auto;\\\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>s := \\\"中国\\\"\\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\\\"color: var(--bs-code-color);\\\"><code>E4B8AD</code></span>，故<span style=\\\"color: var(--bs-code-color);\\\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\\\"color: var(--bs-code-color);\\\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Println(index, c)\\n  }\\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 71\\n1 111\\n2 32\\n3 35821\\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"Go 语言\\\"\\n\\n  for index, c := range s {\\n    fmt.Printf(\\\"%d %c\\\\n\\\", index, c)\\n  }\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>0 G\\n1 o\\n2 \\n3 语\\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\\\"color: var(--bs-code-color);\\\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\\\"color: var(--bs-code-color);\\\"><code>Utf8Count</code></span>吧：</p><pre style=\\\"line-height: 1.5;\\\"><code>func Utf8Count(s string) int {\\n  var count int\\n  for range s {\\n    count++\\n  }\\n  return count\\n}\\n\\nfmt.Println(Utf8Count(\\\"中国\\\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  s := \\\"中国\\\"\\n  fmt.Println(s[:5])\\n\\n  b := []byte{129, 130, 131}\\n  fmt.Println(string(b))\\n}</code></pre><p>上面输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>中��\\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\\\"color: var(--bs-code-color);\\\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\\\"color: var(--bs-code-color);\\\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\\\"line-height: 1.5;\\\"><code>func main() {\\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\\n  b2 := []byte{72, 101, 108, 108, 111}\\n\\n  s1 := string(b1)\\n  s2 := string(b2)\\n\\n  fmt.Println(s1)\\n  fmt.Println(s2)\\n  fmt.Println(s1 == s2)\\n}</code></pre><p>输出：</p><pre style=\\\"line-height: 1.5;\\\"><code>hello\\nhello\\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\\\"color: var(--bs-code-color);\\\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\\\"color: var(--bs-code-color);\\\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\\\"color: var(--bs-code-color);\\\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\\\"color: var(--bs-code-color);\\\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\\\"color: var(--bs-code-color);\\\"><code>\\\"&lt;\\\" + string(b) + \\\"&gt;\\\"</code></span>；</li><li>字符串比较：<span style=\\\"color: var(--bs-code-color);\\\"><code>string(b) == \\\"foo\\\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\\\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\\\" target=\\\"_blank\\\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\\\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\\\" target=\\\"_blank\\\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\\\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\\\" target=\\\"_blank\\\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\\\"https://segmentfault.com/t/youdontknowgo\\\" target=\\\"\\\">youdontknowgo</a><a href=\\\"https://segmentfault.com/t/string\\\" target=\\\"\\\">string</a><a href=\\\"https://segmentfault.com/t/go\\\" target=\\\"\\\">go</a><a href=\\\"https://segmentfault.com/t/utf-8\\\" target=\\\"\\\">utf-8</a><a href=\\\"https://segmentfault.com/t/unicode\\\" target=\\\"\\\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\\\"https://segmentfault.com/a/1190000040023113/revision\\\" target=\\\"\\\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\\\"https://segmentfault.com/u/guyu_5d2e806c57ac8\\\" target=\\\"\\\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\\\"https://segmentfault.com/a/1190000039971644\\\" target=\\\"\\\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\\\"https://segmentfault.com/a/1190000040039126\\\" target=\\\"\\\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\\\"https://segmentfault.com/a/1190000040023113#item-1\\\" target=\\\"\\\">简介</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-2\\\" target=\\\"\\\">底层结构</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3\\\" target=\\\"\\\">基本操作</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-1\\\" target=\\\"\\\">创建</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-2\\\" target=\\\"\\\">索引和切片</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-3\\\" target=\\\"\\\">字符串拼接</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-3-4\\\" target=\\\"\\\">类型转换</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4\\\" target=\\\"\\\">你不知道的 string</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-5\\\" target=\\\"\\\">1 编码</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-6\\\" target=\\\"\\\">2 索引和遍历</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-7\\\" target=\\\"\\\">3 乱码和不可打印字符</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-4-8\\\" target=\\\"\\\">4 编译优化</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-5\\\" target=\\\"\\\">总结</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-6\\\" target=\\\"\\\">参考</a><a href=\\\"https://segmentfault.com/a/1190000040023113#item-7\\\" target=\\\"\\\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\\\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\\\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\\\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\\\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\\\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\\\" target=\\\"\\\" style=\\\"text-align: inherit;\\\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=votes\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">得票</a><a href=\\\"https://segmentfault.com/a/1190000040023113?sort=newest\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">最新</a></p><p><img src=\\\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\\\" alt=\\\"头像\\\" data-href=\\\"\\\" style=\\\"width: 38px;height: 38px;\\\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" target=\\\"_blank\\\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\\\"https://segmentfault.com/blogs\\\" target=\\\"\\\" style=\\\"text-align: center;\\\">使用 SegmentFault 发布</a></p><p><a href=\\\"https://segmentfault.com/\\\" target=\\\"\\\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\\\"https://segmentfault.com/tos?utm_source=sf-footer\\\" target=\\\"\\\">服务协议</a><a href=\\\"https://segmentfault.com/privacy?utm_source=sf-footer\\\" target=\\\"\\\">隐私政策</a><a href=\\\"http://beian.miit.gov.cn/\\\" target=\\\"_blank\\\">浙ICP备15005796号-2</a><a href=\\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\\\" target=\\\"_blank\\\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>\",\"createTime\":\"2023-11-28T11:39:37.385+08:00\",\"downNum\":0,\"img\":\"uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好你好测试一下，\\n我好你好大家好\",\"title\":\"测试\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-28T11:39:37.385+08:00\",\"viewNum\":7}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (94, '2023-12-09 09:06:54.388', '2023-12-09 09:06:54.388', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 24126400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":6,\"CreatedAt\":\"2023-11-20T07:49:25.675+08:00\",\"UpdatedAt\":\"2023-12-09T06:34:18.749+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>测试一下</p><p><br></p>\",\"createTime\":\"2023-11-20T07:43:24.835+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063359.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"test\",\"type\":\"软件\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-20T07:43:24.835+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (95, '2023-12-09 09:07:02.814', '2023-12-09 09:07:02.814', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 17261700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"UpdatedAt\":\"2023-12-09T09:01:51.472+08:00\",\"allowComment\":\"禁止\",\"authorId\":1,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T11:16:32.857+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"软件\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-18T11:16:32.857+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (96, '2023-12-09 09:07:32.403', '2023-12-09 09:07:32.403', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 15487000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-09T09:02:35.084+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":53}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (97, '2023-12-09 09:53:42.252', '2023-12-09 09:53:42.252', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 3151100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"devops 相关文章\",\"name\":\"devops\",\"order\":1,\"type\":\"文章集\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (98, '2023-12-09 09:54:06.131', '2023-12-09 09:54:06.131', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 3056800, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"\",\"name\":\"概况\",\"order\":1,\"type\":\"文章子集\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (99, '2023-12-09 10:02:10.964', '2023-12-09 10:02:10.964', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 19471400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"UpdatedAt\":\"2023-12-09T09:07:02.797+08:00\",\"allowComment\":\"禁止\",\"authorId\":1,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T11:16:32.857+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"软件\",\"set\":\"devops\",\"subset\":\"概况\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-18T11:16:32.857+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (100, '2023-12-09 10:02:16.764', '2023-12-09 10:02:16.764', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13430000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":2,\"CreatedAt\":\"2023-11-18T11:17:15.307+08:00\",\"UpdatedAt\":\"2023-12-09T10:02:10.945+08:00\",\"allowComment\":\"禁止\",\"authorId\":1,\"commentsNum\":0,\"content\":\"2\",\"createTime\":\"2023-11-18T11:16:32.857+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"2\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"2\",\"title\":\"22\",\"type\":\"软件\",\"set\":\"devops\",\"subset\":\"概况\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-18T11:16:32.857+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (101, '2023-12-09 10:02:23.397', '2023-12-09 10:02:23.397', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13060300, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":3,\"CreatedAt\":\"2023-11-18T17:55:20.932+08:00\",\"UpdatedAt\":\"2023-12-09T06:35:14.719+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"\",\"createTime\":\"2023-11-18T17:54:56.853+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063508.jpg\",\"likesNum\":0,\"order\":2,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"asdf\",\"title\":\"asdf\",\"type\":\"软件\",\"set\":\"devops\",\"subset\":\"概况\",\"tags\":[8,6],\"tagsView\":null,\"updateTime\":\"2023-11-18T17:54:56.853+08:00\",\"viewNum\":1}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (102, '2023-12-09 10:02:30.074', '2023-12-09 10:02:30.074', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13174100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":6,\"CreatedAt\":\"2023-11-20T07:49:25.675+08:00\",\"UpdatedAt\":\"2023-12-09T09:06:54.363+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>测试一下</p><p><br></p>\",\"createTime\":\"2023-11-20T07:43:24.835+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063359.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"test\",\"type\":\"软件\",\"set\":\"devops\",\"subset\":\"概况\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-11-20T07:43:24.835+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (103, '2023-12-09 10:02:35.589', '2023-12-09 10:02:35.589', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 14457700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":8,\"CreatedAt\":\"2023-12-05T07:20:53.762+08:00\",\"UpdatedAt\":\"2023-12-09T09:07:32.388+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\\\"color: rgb(255, 77, 79);\\\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\\\"language-go\\\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\\n\\tvar tblContent blog.TblContent\\n\\terr := c.ShouldBindJSON(&tblContent)\\n\\tif err != nil {\\n\\t\\tresponse.FailWithMessage(err.Error(), c)\\n\\t\\treturn\\n\\t}\\n\\tuserId := utils.GetUserID(c)\\n\\ttblContent.ID = userId\\n\\tif err := tblContentService.UpdateTblContent(tblContent); err != nil {\\n\\t\\tglobal.GVA_LOG.Error(\\\"更新失败!\\\", zap.Error(err))\\n\\t\\tresponse.FailWithMessage(\\\"更新失败\\\", c)\\n\\t} else {\\n\\t\\tresponse.OkWithMessage(\\\"更新成功\\\", c)\\n\\t}\\n}</code></pre><h2 style=\\\"text-align: left;\\\">测试图片</h2><p style=\\\"text-align: center;\\\"><img src=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" alt=\\\"Screenshot_2022-11-04_09-01-39.png\\\" data-href=\\\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\\\" style=\\\"\\\"></p><h2 style=\\\"text-align: left;\\\">测试视频</h2><h2></h2><div data-w-e-type=\\\"video\\\" data-w-e-is-void>\\n<video poster=\\\"2020-03-27 07-09-23.mp4\\\" controls=\\\"true\\\" width=\\\"1024\\\" height=\\\"768\\\"><source src=\\\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\\\" type=\\\"video/mp4\\\"/></video>\\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\\\"width: 100%;\\\"><tbody><tr><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th><th colSpan=\\\"1\\\" rowSpan=\\\"1\\\" width=\\\"auto\\\">测试</th></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">测试</td></tr><tr><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">查水电费</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td><td colspan=\\\"1\\\" rowspan=\\\"1\\\" width=\\\"auto\\\" style=\\\"text-align: center;\\\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled ><a href=\\\"www.baidu.com\\\" target=\\\"_blank\\\">😃测试</a></div><div data-w-e-type=\\\"todo\\\"><input type=\\\"checkbox\\\" disabled >🤜测试</div>\",\"createTime\":\"2023-12-05T07:14:13.126+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"阿斯蒂芬\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"你好，世界，欢迎来到新世界。\",\"title\":\"你好，世界\",\"type\":\"VPS\",\"set\":\"devops\",\"subset\":\"概况\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T07:14:13.126+08:00\",\"viewNum\":54}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (104, '2023-12-09 10:02:41.089', '2023-12-09 10:02:41.089', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 12861100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":11,\"CreatedAt\":\"2023-12-05T21:08:36.25+08:00\",\"UpdatedAt\":\"2023-12-09T06:36:06.938+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T21:07:04.374+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063558.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"机场\",\"set\":\"devops\",\"subset\":\"概况\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:07:04.374+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (105, '2023-12-09 10:03:00.418', '2023-12-09 10:03:00.418', NULL, '127.0.0.1', 'POST', '/tblMeta/createTblMeta', 200, 4893500, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"count\":0,\"description\":\"\",\"name\":\"测试\",\"order\":1,\"type\":\"文章子集\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (106, '2023-12-09 10:03:14.966', '2023-12-09 10:03:14.966', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 14558100, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":10,\"CreatedAt\":\"2023-12-05T21:07:21.692+08:00\",\"UpdatedAt\":\"2023-12-09T06:35:52.106+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T21:07:04.374+08:00\",\"downNum\":0,\"img\":\"uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063542.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"机场\",\"set\":\"devops\",\"subset\":\"测试\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:07:04.374+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (107, '2023-12-09 10:03:25.550', '2023-12-09 10:03:25.550', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 14897800, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":12,\"CreatedAt\":\"2023-12-05T21:08:51.132+08:00\",\"UpdatedAt\":\"2023-12-09T06:36:24.704+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdf</p>\",\"createTime\":\"2023-12-05T21:07:04.374+08:00\",\"downNum\":0,\"img\":\"uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063616.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdfas\",\"title\":\"asdf\",\"type\":\"机场\",\"set\":\"devops\",\"subset\":\"测试\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:07:04.374+08:00\",\"viewNum\":0}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (108, '2023-12-09 10:03:33.201', '2023-12-09 10:03:33.201', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 12992300, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36', '', '{\"ID\":13,\"CreatedAt\":\"2023-12-05T21:33:44.532+08:00\",\"UpdatedAt\":\"2023-12-09T06:36:35.422+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>1</p>\",\"createTime\":\"2023-12-05T21:29:06.017+08:00\",\"downNum\":0,\"img\":\"uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063631.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"asdf\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"1\",\"title\":\"2\",\"type\":\"VPS\",\"set\":\"devops\",\"subset\":\"测试\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-05T21:29:06.017+08:00\",\"viewNum\":1}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (109, '2023-12-14 08:35:00.794', '2023-12-14 08:35:00.794', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 9495800, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"### hello\\n    测试what\",\"createTime\":\"2023-12-14T00:32:57.045Z\",\"downNum\":0,\"img\":\"uploads/file/6f1155baab9a83be460c595e92739c3f_20231214083443.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"markdown\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"updateTime\":\"2023-12-14T00:32:57.045Z\",\"viemNum\":0,\"tags\":[8,6],\"blogSet\":\"devops\",\"subset\":\"测试\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (110, '2023-12-14 22:07:54.645', '2023-12-14 22:07:54.645', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13729700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":15,\"CreatedAt\":\"2023-12-14T08:35:00.784+08:00\",\"UpdatedAt\":\"2023-12-14T08:35:00.784+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"### asdf\\nasdfasdf\\n#### asdfasdf\\n#### asdfasdf\\nasdfasdfasdf\\nasdfasdf\",\"createTime\":\"2023-12-14T08:32:57.045+08:00\",\"downNum\":0,\"img\":\"uploads/file/6f1155baab9a83be460c595e92739c3f_20231214083443.jpg\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"markdown\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"blogSet\":\"devops\",\"subset\":\"测试\",\"tags\":[8,6],\"tagsView\":null,\"updateTime\":\"2023-12-14T08:32:57.045+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (111, '2023-12-14 22:50:04.706', '2023-12-14 22:50:04.706', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 9636400, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"# 测试图谱\\n![](/apiuploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg)\\n## 测试表格\\n| col | col | col |\\n| - | - | - |\\n| content | content | content |\\n| content | content | content |\\n### 测试代码\\n```vue3\\nconst onUploadImg = async (files, callback) => {\\n  const res = await Promise.all(\\n    files.map((file) => {\\n      return new Promise((rev, rej) => {\\n        const form = new FormData();\\n        form.append(\'file\', file);\\n        console.log(path.value)\\n        axios\\n          .post(path.value + \\\"/fileUploadAndDownload/upload\\\", form, {\\n            headers: {\\n              \'Content-Type\': \'multipart/form-data\',\\n              \'x-token\': userStore.token\\n            }\\n          })\\n          .then((res) => rev(res))\\n          .catch((error) => rej(error));\\n      });\\n    })\\n  );\\n\\n  callback(res.map((item) => {\\n    return path.value +item.data.data.file.url;\\n  }));\\n};\\n\\n```\\n#### 测试todo list\\n- [ ] 测试\\n- [ ] 测试\\n- [ ] 阿斯蒂芬\\n- [ ] asdfsadf\\n- [ ] asdf\\n##### 测试连接\\n[百度](https://www.baidu.com)\\n### 测试列表\\n- asdf\\n- asdf\\n- asdf\\n- asdf\\n#### 测试数字\\n1. asdf\\n2. asdf\\n3. asdf\\n4. asdf\\n5. asdf\\n6. asdfasdf\\n7. \\n\",\"createTime\":\"2023-12-14T14:46:35.578Z\",\"downNum\":0,\"img\":\"uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf \",\"title\":\"asdf\",\"type\":\"技术\",\"updateTime\":\"2023-12-14T14:46:35.578Z\",\"viemNum\":0,\"tags\":[6,8],\"blogSet\":\"devops\",\"subset\":\"测试\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (112, '2023-12-15 06:23:46.055', '2023-12-15 06:23:46.055', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 14170300, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":16,\"CreatedAt\":\"2023-12-14T22:50:04.696+08:00\",\"UpdatedAt\":\"2023-12-14T22:50:04.696+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"# 测试图谱\\n![](/apiuploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg)\\n## 测试表格\\n| col | col | col |\\n| - | - | - |\\n| content | content | content |\\n| content | content | content |\\n### 测试代码\\n```vue3\\nconst onUploadImg = async (files, callback) => {\\n  const res = await Promise.all(\\n    files.map((file) => {\\n      return new Promise((rev, rej) => {\\n        const form = new FormData();\\n        form.append(\'file\', file);\\n        console.log(path.value)\\n        axios\\n          .post(path.value + \\\"/fileUploadAndDownload/upload\\\", form, {\\n            headers: {\\n              \'Content-Type\': \'multipart/form-data\',\\n              \'x-token\': userStore.token\\n            }\\n          })\\n          .then((res) => rev(res))\\n          .catch((error) => rej(error));\\n      });\\n    })\\n  );\\n\\n  callback(res.map((item) => {\\n    return path.value +item.data.data.file.url;\\n  }));\\n};\\n\\n```\\n#### 测试todo list\\n- [ ] 测试\\n- [ ] 测试\\n- [ ] 阿斯蒂芬\\n- [ ] asdfsadf\\n- [ ] asdf\\n##### 测试连接\\n[百度](https://www.baidu.com)\\n### 测试列表\\n- asdf\\n- asdf\\n- asdf\\n- asdf\\n#### 测试数字\\n1. asdf\\n2. asdf\\n3. asdf\\n4. asdf\\n5. asdf\\n6. asdfasdf\\n7. \\n\",\"createTime\":\"2023-12-14T22:46:35.578+08:00\",\"downNum\":0,\"img\":\"uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf \",\"title\":\"asdf\",\"type\":\"技术\",\"blogSet\":\"devops\",\"subset\":\"测试\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-14T22:46:35.578+08:00\",\"viewNum\":null,\"editType\":\"md\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (113, '2023-12-15 06:25:27.931', '2023-12-15 06:25:27.931', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 16539600, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":16,\"CreatedAt\":\"2023-12-14T22:50:04.696+08:00\",\"UpdatedAt\":\"2023-12-15T06:23:46.041+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"# 测试图谱\\n![](/apiuploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg)\\n## 测试表格\\n| col | col | col |\\n| - | - | - |\\n| content | content | content |\\n| content | content | content |\\n### 测试代码\\n```vue3\\nconst onUploadImg = async (files, callback) => {\\n  const res = await Promise.all(\\n    files.map((file) => {\\n      return new Promise((rev, rej) => {\\n        const form = new FormData();\\n        form.append(\'file\', file);\\n        console.log(path.value)\\n        axios\\n          .post(path.value + \\\"/fileUploadAndDownload/upload\\\", form, {\\n            headers: {\\n              \'Content-Type\': \'multipart/form-data\',\\n              \'x-token\': userStore.token\\n            }\\n          })\\n          .then((res) => rev(res))\\n          .catch((error) => rej(error));\\n      });\\n    })\\n  );\\n\\n  callback(res.map((item) => {\\n    return path.value +item.data.data.file.url;\\n  }));\\n};\\n\\n```\\n#### 测试todo list\\n- [ ] 测试\\n- [ ] 测试\\n- [ ] 阿斯蒂芬\\n- [ ] asdfsadf\\n- [ ] asdf\\n##### 测试连接\\n[百度](https://www.baidu.com)\\n### 测试列表\\n- asdf\\n- asdf\\n- asdf\\n- asdf\\n#### 测试数字\\n1. asdf\\n2. asdf\\n3. asdf\\n4. asdf\\n5. asdf\\n6. asdfasdf\\n7. \\n\",\"createTime\":\"2023-12-14T22:46:35.578+08:00\",\"downNum\":0,\"img\":\"uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf \",\"title\":\"asdf\",\"type\":\"技术\",\"blogSet\":\"devops\",\"subset\":\"测试\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-14T22:46:35.578+08:00\",\"viewNum\":null,\"editType\":\"md\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (114, '2023-12-15 06:26:27.949', '2023-12-15 06:26:27.949', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 12219900, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":16,\"CreatedAt\":\"2023-12-14T22:50:04.696+08:00\",\"UpdatedAt\":\"2023-12-15T06:25:27.914+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"# 测试图谱\\n![](/apiuploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg)\\n## 测试表格\\n| col | col | col |\\n| - | - | - |\\n| content | content | content |\\n| content | content | content |\\n### 测试代码\\n```vue3\\nconst onUploadImg = async (files, callback) => {\\n  const res = await Promise.all(\\n    files.map((file) => {\\n      return new Promise((rev, rej) => {\\n        const form = new FormData();\\n        form.append(\'file\', file);\\n        console.log(path.value)\\n        axios\\n          .post(path.value + \\\"/fileUploadAndDownload/upload\\\", form, {\\n            headers: {\\n              \'Content-Type\': \'multipart/form-data\',\\n              \'x-token\': userStore.token\\n            }\\n          })\\n          .then((res) => rev(res))\\n          .catch((error) => rej(error));\\n      });\\n    })\\n  );\\n\\n  callback(res.map((item) => {\\n    return path.value +item.data.data.file.url;\\n  }));\\n};\\n\\n```\\n#### 测试todo list\\n- [ ] 测试\\n- [ ] 测试\\n- [ ] 阿斯蒂芬\\n- [ ] asdfsadf\\n- [ ] asdf\\n##### 测试连接\\n[百度](https://www.baidu.com)\\n### 测试列表\\n- asdf\\n- asdf\\n- asdf\\n- asdf\\n#### 测试数字\\n1. asdf\\n2. asdf\\n3. asdf\\n4. asdf\\n5. asdf\\n6. asdfasdf\\n7. \\n\",\"createTime\":\"2023-12-14T22:46:35.578+08:00\",\"downNum\":0,\"img\":\"uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf \",\"title\":\"asdf\",\"type\":\"技术\",\"blogSet\":\"devops\",\"subset\":\"测试\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-14T22:46:35.578+08:00\",\"viewNum\":null,\"editType\":\"md\"}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (115, '2023-12-15 06:32:25.777', '2023-12-15 06:32:25.777', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 8891000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"allowComment\":\"\",\"authorId\":0,\"commentsNum\":0,\"content\":\"asdfaSdf\",\"createTime\":\"2023-12-14T22:31:16.006Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"阿斯蒂芬\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"updateTime\":\"2023-12-14T22:31:16.006Z\",\"viemNum\":0,\"tags\":[6,8],\"editType\":\"md\",\"subset\":\"概况\",\"blogSet\":\"devops\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (116, '2023-12-15 06:34:44.555', '2023-12-15 06:34:44.555', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 12741000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":17,\"CreatedAt\":\"2023-12-15T06:32:25.768+08:00\",\"UpdatedAt\":\"2023-12-15T06:32:25.768+08:00\",\"allowComment\":\"\",\"authorId\":1,\"commentsNum\":0,\"content\":\"asdfaSdf\",\"createTime\":\"2023-12-15T06:31:16.006+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"阿斯蒂芬\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"blogSet\":\"devops\",\"subset\":\"概况\",\"editType\":\"md\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-15T06:31:16.006+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (117, '2023-12-15 06:35:04.430', '2023-12-15 06:35:04.430', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13142300, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":17,\"CreatedAt\":\"2023-12-15T06:32:25.768+08:00\",\"UpdatedAt\":\"2023-12-15T06:34:44.542+08:00\",\"allowComment\":\"\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdfaSdf</p>\",\"createTime\":\"2023-12-15T06:31:16.006+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"阿斯蒂芬\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"blogSet\":\"devops\",\"subset\":\"概况\",\"editType\":\"basic\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-15T06:31:16.006+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (118, '2023-12-15 06:35:13.460', '2023-12-15 06:35:13.460', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 14244900, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":17,\"CreatedAt\":\"2023-12-15T06:32:25.768+08:00\",\"UpdatedAt\":\"2023-12-15T06:35:04.417+08:00\",\"allowComment\":\"\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdfaSdf</p>\",\"createTime\":\"2023-12-15T06:31:16.006+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"阿斯蒂芬\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"blogSet\":\"devops\",\"subset\":\"概况\",\"editType\":\"md\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-15T06:31:16.006+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (119, '2023-12-15 06:35:23.051', '2023-12-15 06:35:23.051', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 12938700, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":16,\"CreatedAt\":\"2023-12-14T22:50:04.696+08:00\",\"UpdatedAt\":\"2023-12-15T06:26:27.937+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"# 测试图谱\\n![](/apiuploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg)\\n## 测试表格\\n| col | col | col |\\n| - | - | - |\\n| content | content | content |\\n| content | content | content |\\n### 测试代码\\n```vue3\\nconst onUploadImg = async (files, callback) => {\\n  const res = await Promise.all(\\n    files.map((file) => {\\n      return new Promise((rev, rej) => {\\n        const form = new FormData();\\n        form.append(\'file\', file);\\n        console.log(path.value)\\n        axios\\n          .post(path.value + \\\"/fileUploadAndDownload/upload\\\", form, {\\n            headers: {\\n              \'Content-Type\': \'multipart/form-data\',\\n              \'x-token\': userStore.token\\n            }\\n          })\\n          .then((res) => rev(res))\\n          .catch((error) => rej(error));\\n      });\\n    })\\n  );\\n\\n  callback(res.map((item) => {\\n    return path.value +item.data.data.file.url;\\n  }));\\n};\\n\\n```\\n#### 测试todo list\\n- [ ] 测试\\n- [ ] 测试\\n- [ ] 阿斯蒂芬\\n- [ ] asdfsadf\\n- [ ] asdf\\n##### 测试连接\\n[百度](https://www.baidu.com)\\n### 测试列表\\n- asdf\\n- asdf\\n- asdf\\n- asdf\\n#### 测试数字\\n1. asdf\\n2. asdf\\n3. asdf\\n4. asdf\\n5. asdf\\n6. asdfasdf\\n7. \\n\",\"createTime\":\"2023-12-14T22:46:35.578+08:00\",\"downNum\":0,\"img\":\"uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"asdf \",\"title\":\"asdf\",\"type\":\"技术\",\"blogSet\":\"devops\",\"subset\":\"测试\",\"editType\":\"md\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-14T22:46:35.578+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (120, '2023-12-15 06:35:27.705', '2023-12-15 06:35:27.705', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 13356000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":15,\"CreatedAt\":\"2023-12-14T08:35:00.784+08:00\",\"UpdatedAt\":\"2023-12-14T22:07:54.631+08:00\",\"allowComment\":\"允许\",\"authorId\":1,\"commentsNum\":0,\"content\":\"### asdf\\nasdfasdf\\n#### asdfasdf\\n#### asdfasdf\\nasdfasdfasdf\\nasdfasdf\",\"createTime\":\"2023-12-14T08:32:57.045+08:00\",\"downNum\":0,\"img\":\"uploads/file/6f1155baab9a83be460c595e92739c3f_20231214083443.jpg\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"markdown\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"blogSet\":\"devops\",\"subset\":\"测试\",\"editType\":\"md\",\"tags\":[8,6],\"tagsView\":null,\"updateTime\":\"2023-12-14T08:32:57.045+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (121, '2023-12-15 06:35:31.727', '2023-12-15 06:35:31.727', NULL, '127.0.0.1', 'PUT', '/tblContent/updateTblContent', 200, 12981000, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"ID\":17,\"CreatedAt\":\"2023-12-15T06:32:25.768+08:00\",\"UpdatedAt\":\"2023-12-15T06:35:13.445+08:00\",\"allowComment\":\"\",\"authorId\":1,\"commentsNum\":0,\"content\":\"<p>asdfaSdf</p>\",\"createTime\":\"2023-12-15T06:31:16.006+08:00\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"sequence\":null,\"password\":\"\",\"shareNum\":0,\"status\":\"禁止\",\"summary\":\"阿斯蒂芬\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"blogSet\":\"devops\",\"subset\":\"概况\",\"editType\":\"md\",\"tags\":[6,8],\"tagsView\":null,\"updateTime\":\"2023-12-15T06:31:16.006+08:00\",\"viewNum\":null}', '{\"code\":0,\"data\":{},\"msg\":\"更新成功\"}', 1, NULL);
INSERT INTO `sys_operation_records` VALUES (122, '2023-12-15 06:36:00.723', '2023-12-15 06:36:00.723', NULL, '127.0.0.1', 'POST', '/tblContent/createTblContent', 200, 12072800, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', '', '{\"allowComment\":\"允许\",\"authorId\":0,\"commentsNum\":0,\"content\":\"<p>阿斯蒂芬</p>\",\"createTime\":\"2023-12-14T22:35:41.000Z\",\"downNum\":0,\"img\":\"\",\"likesNum\":0,\"order\":1,\"password\":\"\",\"shareNum\":0,\"status\":\"允许\",\"summary\":\"阿斯蒂芬\",\"title\":\"阿斯蒂芬\",\"type\":\"软件\",\"updateTime\":\"2023-12-14T22:35:41.000Z\",\"viemNum\":0,\"tags\":[8,6],\"editType\":\"basic\",\"blogSet\":\"devops\",\"subset\":\"概况\"}', '{\"code\":0,\"data\":{},\"msg\":\"创建成功\"}', 1, NULL);

-- ----------------------------
-- Table structure for sys_user_authority
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_authority`;
CREATE TABLE `sys_user_authority`  (
  `sys_user_id` bigint(20) UNSIGNED NOT NULL,
  `sys_authority_authority_id` bigint(20) UNSIGNED NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`sys_user_id`, `sys_authority_authority_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user_authority
-- ----------------------------
INSERT INTO `sys_user_authority` VALUES (1, 888);
INSERT INTO `sys_user_authority` VALUES (1, 8881);
INSERT INTO `sys_user_authority` VALUES (1, 9528);
INSERT INTO `sys_user_authority` VALUES (2, 888);

-- ----------------------------
-- Table structure for sys_users
-- ----------------------------
DROP TABLE IF EXISTS `sys_users`;
CREATE TABLE `sys_users`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `uuid` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户UUID',
  `username` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户登录名',
  `password` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户登录密码',
  `nick_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '系统用户' COMMENT '用户昵称',
  `side_mode` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'dark' COMMENT '用户侧边主题',
  `header_img` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'https://qmplusimg.henrongyi.top/gva_header.jpg' COMMENT '用户头像',
  `base_color` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '#fff' COMMENT '基础颜色',
  `active_color` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '#1890ff' COMMENT '活跃颜色',
  `authority_id` bigint(20) UNSIGNED NULL DEFAULT 888 COMMENT '用户角色ID',
  `phone` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户手机号',
  `email` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户邮箱',
  `enable` bigint(20) NULL DEFAULT 1 COMMENT '用户是否被冻结 1正常 2冻结',
  `failed_num` bigint(20) NULL DEFAULT NULL COMMENT '失败登录次数',
  `type` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `oem_name` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '代理商名称',
  `status` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '正常' COMMENT '用户状态（正常、锁定）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sys_users_deleted_at`(`deleted_at`) USING BTREE,
  INDEX `idx_sys_users_uuid`(`uuid`) USING BTREE,
  INDEX `idx_sys_users_username`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_users
-- ----------------------------
INSERT INTO `sys_users` VALUES (1, '2023-11-14 23:12:57.785', '2023-11-27 20:29:11.664', NULL, 'd96b8b86-72b9-40a9-81ca-8d0d625d8071', 'admin', '$2a$10$LnKWzuIwBfbAtAR9BoIl3OXLxfqBXZEbIASRz1ZaE/1WICO2AxDxK', 'Mr.奇淼', 'dark', 'https://qmplusimg.henrongyi.top/gva_header.jpg', '#fff', '#1890ff', 888, '17611111111', '333333333@qq.com', 1, 2, NULL, NULL, '正常');
INSERT INTO `sys_users` VALUES (2, '2023-11-14 23:12:57.785', '2023-11-14 23:12:57.789', NULL, '88110033-b959-4857-b468-be1e6275c234', 'a303176530', '$2a$10$qYCwG6s/U6cYhGn2k0E8jec2rOTYyenNdM12e4eh7cYPy9niOW9km', '用户1', 'dark', 'https:///qmplusimg.henrongyi.top/1572075907logo.png', '#fff', '#1890ff', 9528, '17611111111', '333333333@qq.com', 1, NULL, NULL, NULL, '正常');

-- ----------------------------
-- Table structure for tbl_content
-- ----------------------------
DROP TABLE IF EXISTS `tbl_content`;
CREATE TABLE `tbl_content`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '内容主键',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容标题',
  `summary` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容摘要',
  `img` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容图片路径',
  `create_time` datetime(3) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(3) NULL DEFAULT NULL COMMENT '修改时间',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容文字',
  `sequence` smallint(6) NULL DEFAULT NULL COMMENT '内容顺序',
  `author_id` mediumint(9) NULL DEFAULT NULL COMMENT '作者ID',
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容类别',
  `status` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容状态',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '保护密码',
  `comments_num` smallint(6) NULL DEFAULT NULL COMMENT '内容所属评论数',
  `allow_comment` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否允许评论',
  `view_num` smallint(6) NULL DEFAULT NULL COMMENT '浏览数量',
  `likes_num` smallint(6) NULL DEFAULT NULL COMMENT '点赞数量',
  `share_num` smallint(6) NULL DEFAULT NULL COMMENT '分享数量',
  `down_num` smallint(6) NULL DEFAULT NULL COMMENT '踩数量',
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  `blog_set` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章集',
  `subset` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章子集',
  `edit_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '编辑器类型',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_tbl_content_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '内容表：添加文章内容' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tbl_content
-- ----------------------------
INSERT INTO `tbl_content` VALUES (1, '', '', '1', '2023-11-16 07:44:11.951', '2023-11-16 07:44:11.951', '1', 1, 1, '', '', '1', 1, '1', 0, 1, 0, 10, '2023-11-16 07:45:24.507', '2023-11-16 07:45:24.507', '2023-11-16 07:45:29.520', '', NULL, 'basic');
INSERT INTO `tbl_content` VALUES (2, '22', '2', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063525.jpg', '2023-11-18 11:16:32.857', '2023-11-18 11:16:32.857', '2', 1, 1, '软件', '允许', '2', 0, '禁止', 67, 0, 0, 0, '2023-11-18 11:17:15.307', '2023-12-09 10:02:16.751', NULL, 'devops', '概况', 'basic');
INSERT INTO `tbl_content` VALUES (3, 'asdf222', 'asdf', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063508.jpg', '2023-11-18 17:54:56.853', '2023-11-18 17:54:56.853', '', 2, 1, '软件', '禁止', 'asdf', 0, '允许', 9, 0, 0, 0, '2023-11-18 17:55:20.932', '2023-12-09 10:02:23.384', NULL, 'devops', '概况', 'basic');
INSERT INTO `tbl_content` VALUES (4, 'asdf1111', 'asdf', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063450.jpg', '2023-11-18 17:58:07.278', '2023-11-18 17:58:07.278', '<h1>sdfasdfasdf</h1>', 1, 1, '软件', '允许', '', 0, '允许', 14, 0, 0, 0, '2023-11-18 17:58:59.793', '2023-12-09 06:34:56.920', NULL, '', NULL, 'basic');
INSERT INTO `tbl_content` VALUES (5, 'asdf', 'asdf', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063427.jpg', '2023-11-18 18:00:04.586', '2023-11-18 18:00:04.586', '<p><strong>asdf</strong></p>', 1, 1, 'VPS', '禁止', '', 0, '允许', 14, 0, 0, 0, '2023-11-18 18:00:21.634', '2023-12-09 06:34:38.627', NULL, '', NULL, 'basic');
INSERT INTO `tbl_content` VALUES (6, 'test', '阿斯蒂芬', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063359.jpg', '2023-11-20 07:43:24.835', '2023-11-20 07:43:24.835', '<p>测试一下</p><p><br></p>', 1, 1, '软件', '允许', '阿斯蒂芬', 0, '允许', 22, 0, 0, 0, '2023-11-20 07:49:25.675', '2023-12-09 10:02:30.060', NULL, 'devops', '概况', 'basic');
INSERT INTO `tbl_content` VALUES (7, '测试', '你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好你好测试一下，\n我好你好大家好', 'uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063348.jpg', '2023-11-28 11:39:37.385', '2023-11-28 11:39:37.385', '<p><a href=\"https://segmentfault.com/blog/advance-go\" target=\"\">深入理解Go</a></p><p><a href=\"https://segmentfault.com/a/1190000040023113#\" target=\"\" style=\"text-align: center;\">关注博客</a><a href=\"https://segmentfault.com/user/login\" target=\"\" style=\"text-align: center;\">注册登录</a></p><p><a href=\"https://segmentfault.com/blog/advance-go\" target=\"\">主页</a></p><p><a href=\"https://segmentfault.com/blog/advance-go/about\" target=\"\">关于</a></p><p><a href=\"https://segmentfault.com/feeds/blog/advance-go\" target=\"\">RSS</a></p><p><br></p><h1><a href=\"https://segmentfault.com/a/1190000040023113\" target=\"\">你不知道的 Go 之 string</a></h1><h1></h1><p><a href=\"https://segmentfault.com/u/guyu_5d2e806c57ac8\" target=\"\">darjun</a><a href=\"https://segmentfault.com/a/1190000040023113/revision\" target=\"\">2021-05-18</a></p><p>阅读 8 分钟<a href=\"https://segmentfault.com/a/1190000040023113/en\" target=\"\">English</a></p><p>3</p><p><br></p><h2>简介</h2><p>字符串（string）是 Go 语言提供的一种基础数据类型。在编程开发中几乎随时都会使用。本文介绍字符串相关的知识，帮助你更好地理解和使用它。</p><h2>底层结构</h2><p>字符串底层结构定义在源码<span style=\"color: var(--bs-code-color);\"><code>runtime</code></span>包下的 string.go 文件中：</p><pre style=\"line-height: 1.5;\"><code class=\"language-go\">// src/runtime/string.go\ntype stringStruct struct {\n  str unsafe.Pointer\n  len int\n}</code></pre><ul><li><span style=\"color: var(--bs-code-color);\"><code>str</code></span>：一个指针，指向存储实际字符串的内存地址。</li><li><span style=\"color: var(--bs-code-color);\"><code>len</code></span>：字符串的长度。与切片类似，在代码中我们可以使用<span style=\"color: var(--bs-code-color);\"><code>len()</code></span>函数获取这个值。注意，<code><strong>len存储实际的字节数，而非字符数。所以对于非单字节编码的字符，结果可能让人疑惑</strong></code>。后面会详细介绍多字节字符。</li></ul><p>对于字符串<span style=\"color: var(--bs-code-color);\"><code>Hello</code></span>，实际底层结构如下：</p><p><img src=\"https://segmentfault.com/img/remote/1460000040023115\" alt=\"\" data-href=\"\" style=\"height: auto;\"/></p><p><span style=\"color: var(--bs-code-color);\"><code>str</code></span>中存储的是字符对应的编码，<span style=\"color: var(--bs-code-color);\"><code>H</code></span>对应编码<span style=\"color: var(--bs-code-color);\"><code>72</code></span>，<span style=\"color: var(--bs-code-color);\"><code>e</code></span>对应<span style=\"color: var(--bs-code-color);\"><code>101</code></span>等等。</p><p>我们可以使用下面的代码输出字符串的底层结构和存储的每个字节：</p><p><br></p><pre style=\"line-height: 1.5;\"><code>package main\n\nimport (\n  \"fmt\"\n  \"unsafe\"\n)\n\ntype stringStruct struct {\n  str unsafe.Pointer\n  len int\n}\n\nfunc main() {\n  s := \"Hello World!\"\n  fmt.Println(*(*stringStruct)(unsafe.Pointer(&amp;s)))\n\n  for _, b := range s {\n    fmt.Println(b)\n  }\n}</code></pre><p>运行输出：</p><pre style=\"line-height: 1.5;\"><code>{0x8edaff 5}</code></pre><p>由于<span style=\"color: var(--bs-code-color);\"><code>runtime.stringStruct</code></span>结构是非导出的，我们不能直接使用。所以我在代码中手动定义了一个<span style=\"color: var(--bs-code-color);\"><code>stringStruct</code></span>结构体，字段与<span style=\"color: var(--bs-code-color);\"><code>runtime.stringStruct</code></span>完全相同。</p><h2>基本操作</h2><h3>创建</h3><p>创建字符串有两种基本方式，使用<span style=\"color: var(--bs-code-color);\"><code>var</code></span>定义和字符串字面量：</p><pre style=\"line-height: 1.5;\"><code>var s1 string\ns2 := \"Hello World!\"</code></pre><p>注意<span style=\"color: var(--bs-code-color);\"><code>var s string</code></span>定义了一个字符串的空值，字符串的空值是空字符串，即<span style=\"color: var(--bs-code-color);\"><code>\"\"</code></span>。字符串不可能为<span style=\"color: var(--bs-code-color);\"><code>nil</code></span>。</p><p>字符串字面量可以使用<strong>双引号</strong>或<strong>反引号</strong>定义。在双引号中出现的特殊字符需要进行转义，而在单引号中不需要：</p><pre style=\"line-height: 1.5;\"><code>s1 := \"Hello \\nWorld\"\ns2 := `Hello\nWorld`</code></pre><p>上面代码中，<span style=\"color: var(--bs-code-color);\"><code>s1</code></span>中出现的换行符需要使用转义字符<span style=\"color: var(--bs-code-color);\"><code>\\n</code></span>，<span style=\"color: var(--bs-code-color);\"><code>s2</code></span>中直接键入换行。由于单引号定义的字面量与我们在代码中看到的完全相同，在包含大段文本（通常有换行）或比较多的特殊字符时经常使用。另外使用单引号时，注意首行后面其他行的空格问题：</p><pre style=\"line-height: 1.5;\"><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n  s := `hello\n  world`\n\n  fmt.Println(s)\n}</code></pre><p>可能只是为了缩进和美观，在第二行的 \"world\" 前面加上了两个空格。实际上这些空格也是字符串的一部分。如果这不是有意为之，可能会造成一些困惑。上面代码输出：</p><pre style=\"line-height: 1.5;\"><code>hello\n  world</code></pre><h3>索引和切片</h3><p>可以使用索引获取字符串对应位置上存储的字节值，使用切片操作符获取字符串的一个子串：</p><pre style=\"line-height: 1.5;\"><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n  s := \"Hello World!\"\n  fmt.Println(s[0])\n\n  fmt.Println(s[:5])\n}</code></pre><p>输出：</p><pre style=\"line-height: 1.5;\"><code>72\nHello</code></pre><p>上篇文章<a href=\"https://link.segmentfault.com/?enc=URibmTZBG1lWTNQki%2BqgVg%3D%3D.mKma2%2BGo5PAq3TCG9v3db5lRHDZYAHk0XosIVYcR%2FffVDsCS2gOre5GrGNXRGKAkPRFyW%2BTg%2BpXXvcEse0KDxA%3D%3D\" target=\"_blank\">你不知道的 Go 之 slice</a>中也介绍过了，字符串的切片操作返回的不是切片，而是字符串。</p><h3>字符串拼接</h3><p>字符串拼接最简单直白的方式就是使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>符号，<span style=\"color: var(--bs-code-color);\"><code>+</code></span>可以拼接任意多个字符串。但是<span style=\"color: var(--bs-code-color);\"><code>+</code></span>的缺点是待拼接的字符串必须是已知的。另一种方式就是使用标准库<span style=\"color: var(--bs-code-color);\"><code>strings</code></span>包中的<span style=\"color: var(--bs-code-color);\"><code>Join()</code></span>函数，这个函数接受一个字符串切片和一个分隔符，将切片中的元素拼接成以分隔符分隔的单个字符串：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s1 := \"Hello\" + \" \" + \"World\"\n  fmt.Println(s1)\n\n  ss := []string{\"Hello\", \"World\"}\n  fmt.Println(strings.Join(ss, \" \"))\n}</code></pre><p>上面代码首先使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接字符串，然后将各个字符串存放在一个切片中，使用<span style=\"color: var(--bs-code-color);\"><code>strings.Join()</code></span>函数拼接。结果是一样的。需要注意的是，<code><strong>将待拼接的字符串放在一行中，使用+拼接，在 Go 语言内部会先计算需要的空间，预先分配这个空间，最后将各个字符串拷贝过去</strong></code>。这个行为与其他很多语言是不同的，所以在 Go 语言中使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接字符串不会有性能损失，甚至由于内部优化比其他方式性能还要更好一些。当然前提拼接是一次完成的。下面代码多次使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接，会产生大量临时字符串对象，影响性能：</p><pre style=\"line-height: 1.5;\"><code>s := \"hello\"\nvar result string\nfor i := 1; i &lt; 100; i++ {\n  result += s\n}</code></pre><p>我们来测试一下各种方式的性能差异。首先定义 3 个函数，分别用 1 次<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接，多次<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接和<span style=\"color: var(--bs-code-color);\"><code>Join()</code></span>拼接：</p><pre style=\"line-height: 1.5;\"><code>func ConcatWithMultiPlus() {\n  var s string\n  for i := 0; i &lt; 10; i++ {\n    s += \"hello\"\n  }\n}\n\nfunc ConcatWithOnePlus() {\n  s1 := \"hello\"\n  s2 := \"hello\"\n  s3 := \"hello\"\n  s4 := \"hello\"\n  s5 := \"hello\"\n  s6 := \"hello\"\n  s7 := \"hello\"\n  s8 := \"hello\"\n  s9 := \"hello\"\n  s10 := \"hello\"\n  s := s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10\n  _ = s\n}\n\nfunc ConcatWithJoin() {\n  s := []string{\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"}\n  _ = strings.Join(s, \"\")\n}</code></pre><p>然后在文件<span style=\"color: var(--bs-code-color);\"><code>benchmark_test.go</code></span>中定义基准测试：</p><pre style=\"line-height: 1.5;\"><code>func BenchmarkConcatWithOnePlus(b *testing.B) {\n  for i := 0; i &lt; b.N; i++ {\n    ConcatWithOnePlus()\n  }\n}\n\nfunc BenchmarkConcatWithMultiPlus(b *testing.B) {\n  for i := 0; i &lt; b.N; i++ {\n    ConcatWithMultiPlus()\n  }\n}\n\nfunc BenchmarkConcatWithJoin(b *testing.B) {\n  for i := 0; i &lt; b.N; i++ {\n    ConcatWithJoin()\n  }\n}</code></pre><p>运行测试：</p><pre style=\"line-height: 1.5;\"><code>$ go test -bench .\nBenchmarkConcatWithOnePlus-8            11884388               170.5 ns/op\nBenchmarkConcatWithMultiPlus-8           1227411              1006 ns/op\nBenchmarkConcatWithJoin-8                6718507               157.5 ns/op</code></pre><p>可以看到，使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>一次拼接和<span style=\"color: var(--bs-code-color);\"><code>Join()</code></span>函数性能差不多，而多次<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接性能是其他两种方式的近 1/9。另外需要注意我在<span style=\"color: var(--bs-code-color);\"><code>ConcatWithOnePlus()</code></span>函数中先定义 10 个字符串变量，然后再使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接。如果直接使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接字符串字面量，编译器会直接优化为一个字符串字面量，结果就没有可比较性了。</p><p>在<span style=\"color: var(--bs-code-color);\"><code>runtime</code></span>包中，使用<span style=\"color: var(--bs-code-color);\"><code>concatstrings()</code></span>函数来处理使用<span style=\"color: var(--bs-code-color);\"><code>+</code></span>拼接字符串的操作：</p><pre style=\"line-height: 1.5;\"><code>// src/runtime/string.go\nfunc concatstrings(buf *tmpBuf, a []string) string {\n  idx := 0\n  l := 0\n  count := 0\n  for i, x := range a {\n    n := len(x)\n    if n == 0 {\n      continue\n    }\n    if l+n &lt; l {\n      throw(\"string concatenation too long\")\n    }\n    l += n\n    count++\n    idx = i\n  }\n  if count == 0 {\n    return \"\"\n  }\n\n  // If there is just one string and either it is not on the stack\n  // or our result does not escape the calling frame (buf != nil),\n  // then we can return that string directly.\n  if count == 1 &amp;&amp; (buf != nil || !stringDataOnStack(a[idx])) {\n    return a[idx]\n  }\n  s, b := rawstringtmp(buf, l)\n  for _, x := range a {\n    copy(b, x)\n    b = b[len(x):]\n  }\n  return s\n}</code></pre><h3>类型转换</h3><p>我们经常需要将 string 转为 []byte，或者从 []byte 转换回 string。这中间都会涉及一次内存拷贝，所以要注意转换频次不宜过高。string 转换为 []byte，转换语法为<span style=\"color: var(--bs-code-color);\"><code>[]byte(str)</code></span>。首先创建一个<span style=\"color: var(--bs-code-color);\"><code>[]byte</code></span>并分配足够的空间，然后将 string 内容拷贝过去。</p><p><img src=\"https://segmentfault.com/img/remote/1460000040023116\" alt=\"\" data-href=\"\" style=\"height: auto;\"/></p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s := \"Hello\"\n\n  b := []byte(s)\n  fmt.Println(len(b), cap(b))\n}</code></pre><p>注意，输出的<span style=\"color: var(--bs-code-color);\"><code>cap</code></span>可能与<span style=\"color: var(--bs-code-color);\"><code>len</code></span>不同，多出的容量处于对后续追加的性能考虑。</p><p><span style=\"color: var(--bs-code-color);\"><code>[]byte</code></span>转换为 string 转换语法为<span style=\"color: var(--bs-code-color);\"><code>string(bs)</code></span>，过程也是类似。</p><h2>你不知道的 string</h2><h3>1 编码</h3><p>在计算机发展早期，只有单字节编码，最知名的是 ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）。单字节编码最多只能编码 256 个字符，这对英语国家可能够用了。但是随着计算机在全世界的普及，要编码其他国家的语言（典型的就是汉字），单字节显然是不够的。为此提出了 Unicode 编码方案。Unicode 编码为全世界所有国家的语言符号规定了统一的编码方案。Unicode 相关的知识请查看参考链接<a href=\"https://link.segmentfault.com/?enc=50rMhtidWpwpC9nwTWEg7g%3D%3D.LQmdUWjigTmilQztwtjUoogiuIKnucbvx8y3iP%2BX0JjCYrbks5CD1qIP%2Be5tS%2FnlqrjU4gNGN6ykX0RTKK6oGTn1zoMl6YVegqKoMC7ZtObkjTbUzTah%2FM66LIqy9rvnZ3WPBMVEUfPZBSf%2BGsoq4aHcowYUWSgtldRaxUVMhwdDXkcjLVvRK2gami0%2B3QTrtMudEwMYmAxmK5PQAa21Zq%2Bl%2BqwuiPmcCTOZOmc1FXE%3D\" target=\"_blank\">每个程序员都必须知道的 Unicode 知识</a>。</p><p>有很多人不知道 Unicode 与 UTF8、UTF16、UTF32 这些有什么关系。实际上可以理解为 Unicode 只是规定了每个字符对应的编码值，实际很少直接存储和传输这个值。UTF8/UTF16/UTF32 则定义这些编码值如何在内存或文件中存储以及在网络上传输的格式。例如，汉字“中”，Unicode 编码值为<span style=\"color: var(--bs-code-color);\"><code>00004E2D</code></span>，其他编码如下：</p><pre style=\"line-height: 1.5;\"><code>UTF8编码：E4B8AD\nUTF16BE编码：FEFF4E2D\nUTF16LE编码：FFFE2D4E\nUTF32BE编码：0000FEFF00004E2D\nUTF32LE编码：FFFE00002D4E0000</code></pre><p>Go 语言中的字符串存储是 UTF-8 编码。UTF8 是可变长编码，优点是兼容 ASCII。对非英语国家的字符采用多字节编码方案，而且对使用比较频繁的字符采用较短的编码，提升编码效率。缺点是 UTF8 的可变长编码让我们不能直接、直观地确定字符串的<strong>字符长度</strong>。一般的中文字符使用 3 个字节来编码，例如上面的“中”。对于生僻字，可能采用更多的字节来编码，例如“魋”的 UTF-8 编码为<span style=\"color: var(--bs-code-color);\"><code>E9AD8B20</code></span>。</p><p>我们使用<span style=\"color: var(--bs-code-color);\"><code>len()</code></span>函数获取到的都是编码后的<strong>字节长度</strong>，而<strong>非字符长度</strong>，这一点在使用非 ASCII 字符时很重要：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s1 := \"Hello World!\"\n  s2 := \"你好，中国\"\n\n  fmt.Println(len(s1))\n  fmt.Println(len(s2))\n}</code></pre><p>输出：</p><pre style=\"line-height: 1.5;\"><code>12\n15</code></pre><p><span style=\"color: var(--bs-code-color);\"><code>Hello World!</code></span>有 12 个字符很好理解，<span style=\"color: var(--bs-code-color);\"><code>你好，中国</code></span>有 5 个中文字符，每个中文字符占 3 个字节，所以输出 15。</p><p>对于使用非 ASCII 字符的字符串，我们可以使用标准库的 unicode/utf8 包中的<span style=\"color: var(--bs-code-color);\"><code>RuneCountInString()</code></span>方法获取实际字符数：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s1 := \"Hello World!\"\n  s2 := \"你好，中国\"\n\n  fmt.Println(utf8.RuneCountInString(s1)) // 12\n  fmt.Println(utf8.RuneCountInString(s2)) // 5\n}</code></pre><p>为了便于理解，下面给出字符串“中国”的底层结构图：</p><p><img src=\"https://segmentfault.com/img/remote/1460000040023117\" alt=\"\" data-href=\"\" style=\"height: auto;\"/></p><h3>2 索引和遍历</h3><p>使用索引操作字符串，获取的是对应位置上的字节值，如果该位置是某个多字节编码的中间位置，可能返回的字节值不是一个合法的编码值：</p><pre style=\"line-height: 1.5;\"><code>s := \"中国\"\nfmt.Println(s[0])</code></pre><p>前面介绍过“中”的 UTF8 编码为<span style=\"color: var(--bs-code-color);\"><code>E4B8AD</code></span>，故<span style=\"color: var(--bs-code-color);\"><code>s[0]</code></span>取第一个字节值，结果为 228（十六进制 E4 的值）。</p><p>为了方便地遍历字符串，Go 语言中<span style=\"color: var(--bs-code-color);\"><code>for-range</code></span>循环对多字符编码有特殊的支持。每次遍历返回的索引是每个字符开始的<strong>字节位置</strong>，值为该字符的编码值：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s := \"Go 语言\"\n\n  for index, c := range s {\n    fmt.Println(index, c)\n  }\n}</code></pre><p>所以遇到多字节字符，索引就不是连续的。上面“语”占用 3 个字节，所以“言”的索引就是“中”的索引 3 加上它的字节数 3，结果就是 6。上面的代码输出如下：</p><pre style=\"line-height: 1.5;\"><code>0 71\n1 111\n2 32\n3 35821\n6 35328</code></pre><p>我们也可以以字符形式输出：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s := \"Go 语言\"\n\n  for index, c := range s {\n    fmt.Printf(\"%d %c\\n\", index, c)\n  }\n}</code></pre><p>输出：</p><pre style=\"line-height: 1.5;\"><code>0 G\n1 o\n2 \n3 语\n6 言</code></pre><p>按照这个方法，我们可以编写一个简单的<span style=\"color: var(--bs-code-color);\"><code>RuneCountInString()</code></span>函数，就叫做<span style=\"color: var(--bs-code-color);\"><code>Utf8Count</code></span>吧：</p><pre style=\"line-height: 1.5;\"><code>func Utf8Count(s string) int {\n  var count int\n  for range s {\n    count++\n  }\n  return count\n}\n\nfmt.Println(Utf8Count(\"中国\")) // 2</code></pre><h3>3 乱码和不可打印字符</h3><p>如果 string 中出现不合法的 utf8 编码，打印时对于每个不合法的编码字节都会输出一个特定的符号<span style=\"color: var(--bs-code-color);\"><code>�</code></span>：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  s := \"中国\"\n  fmt.Println(s[:5])\n\n  b := []byte{129, 130, 131}\n  fmt.Println(string(b))\n}</code></pre><p>上面输出：</p><pre style=\"line-height: 1.5;\"><code>中��\n���</code></pre><p>因为“国”编码有 3 个字节，<span style=\"color: var(--bs-code-color);\"><code>s[:5]</code></span>只取了前两个，这两个字节无法组成一个合法的 UTF8 字符，故输出两个<span style=\"color: var(--bs-code-color);\"><code>�</code></span>。</p><p>另外需要警惕不可打印字符，之前有个同事请教我一个问题，两个字符串输出的内容相同，但是它们就是不相等：</p><pre style=\"line-height: 1.5;\"><code>func main() {\n  b1 := []byte{0xEF, 0xBB, 0xBF, 72, 101, 108, 108, 111}\n  b2 := []byte{72, 101, 108, 108, 111}\n\n  s1 := string(b1)\n  s2 := string(b2)\n\n  fmt.Println(s1)\n  fmt.Println(s2)\n  fmt.Println(s1 == s2)\n}</code></pre><p>输出：</p><pre style=\"line-height: 1.5;\"><code>hello\nhello\nfalse</code></pre><p>我直接把字符串内部字节写出来了，可能一眼就看出来了。但是我们当时遇到这个问题还是稍微费了一番功夫来调试的。因为当时字符串是从文件中读取的，而文件采用的是带 BOM 的 UTF8 编码格式。我们都知道 BOM 格式会自动在文件头部加上 3 个字节<span style=\"color: var(--bs-code-color);\"><code>0xEFBBBF</code></span>。而字符串比较是会比较长度和每个字节的。让问题更难调试的是，在文件中 BOM 头也是不显示的。</p><h3>4 编译优化</h3><p><span style=\"color: var(--bs-code-color);\"><code>[]byte</code></span>转换为 string 的场景很多，处于性能上的考虑。如果转换后的 string 只是临时使用，这时转换并不会进行内存拷贝。返回的 <span style=\"color: var(--bs-code-color);\"><code>string</code></span>会指向切片的内存。编译器会识别如下场景：</p><ul><li>map 查找：<span style=\"color: var(--bs-code-color);\"><code>m[string(b)]</code></span>；</li><li>字符串拼接：<span style=\"color: var(--bs-code-color);\"><code>\"&lt;\" + string(b) + \"&gt;\"</code></span>；</li><li>字符串比较：<span style=\"color: var(--bs-code-color);\"><code>string(b) == \"foo\"</code></span>。</li></ul><p>因为 string 只是临时使用，期间切片不会发生变化。故这样使用没有问题。</p><h2>总结</h2><p>字符串是使用频率最高的基本类型之一，熟悉掌握它可以帮助我们更好地编码和解决问题。</p><h2>参考</h2><ol><li>《Go 专家编程》</li><li>每个程序员都必须知道的 Unicode 知识，<a href=\"https://link.segmentfault.com/?enc=uSQkSs4sFN1ZPZrBXmJn5Q%3D%3D.6BEVA9RnKGJv79buZclxjLQKEbY4C1CB06R56RaJMZpwu9LHmT4YASKBOWnA3iou7eOfhXHRXtXmOjVX%2F8ExfWJeYmONK7MwmBgS6TzwehpEF7AysbDKjQYqGbEvVsNWiMP5tqExjlNKvnCYt3gdpl5Gxen2fiIMCDSeTkVN4k2jPz2apyoHzAiJlqVfNCf4XLV%2FHkc6iUMJJo8OBe%2FpkH60e8Y8RitCJpjcCOGIsYs%3D\" target=\"_blank\">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a></li><li>你不知道的Go GitHub：<a href=\"https://link.segmentfault.com/?enc=b4TXAmUTL3saDW5DuhCFxA%3D%3D.Xh1Bj4v941oHAFdcMHUF2T6p38HIE37V16d87xrk2FMJ9qRVBYjtxfkrmt9WFdZK\" target=\"_blank\">https://github.com/darjun/you-dont-know-go</a></li></ol><h2>我</h2><p>我的博客：<a href=\"https://link.segmentfault.com/?enc=GWcWesV%2Ftf6tFj4z3Ro4Ow%3D%3D.L5IPUJgV63%2FEuZSSxdHwoaXCT3Asjn5X5V89avUu6po%3D\" target=\"_blank\">https://darjun.github.io</a></p><p>欢迎关注我的微信公众号【GoUpUp】，共同学习，一起进步~</p><p><a href=\"https://segmentfault.com/t/youdontknowgo\" target=\"\">youdontknowgo</a><a href=\"https://segmentfault.com/t/string\" target=\"\">string</a><a href=\"https://segmentfault.com/t/go\" target=\"\">go</a><a href=\"https://segmentfault.com/t/utf-8\" target=\"\">utf-8</a><a href=\"https://segmentfault.com/t/unicode\" target=\"\">unicode</a></p><p>赞3收藏1</p><p>分享</p><p>阅读 5.9k<a href=\"https://segmentfault.com/a/1190000040023113/revision\" target=\"\">发布于 2021-05-18</a></p><p><br></p><hr/><p><a href=\"https://segmentfault.com/u/guyu_5d2e806c57ac8\" target=\"\">darjun</a></p><p>2.9k 声望337 粉丝</p><p>关注作者</p><hr/><ol><li></li><li></li><li></li><li>« 上一篇<a href=\"https://segmentfault.com/a/1190000039971644\" target=\"\">你不知的 Go 之 slice</a></li><li></li><li>下一篇 »<a href=\"https://segmentfault.com/a/1190000040039126\" target=\"\">Go 每日一库之 gotalk</a></li><li></li><li></li><li></li><li></li><li><a href=\"https://segmentfault.com/a/1190000040023113#item-1\" target=\"\">简介</a><a href=\"https://segmentfault.com/a/1190000040023113#item-2\" target=\"\">底层结构</a><a href=\"https://segmentfault.com/a/1190000040023113#item-3\" target=\"\">基本操作</a><a href=\"https://segmentfault.com/a/1190000040023113#item-3-1\" target=\"\">创建</a><a href=\"https://segmentfault.com/a/1190000040023113#item-3-2\" target=\"\">索引和切片</a><a href=\"https://segmentfault.com/a/1190000040023113#item-3-3\" target=\"\">字符串拼接</a><a href=\"https://segmentfault.com/a/1190000040023113#item-3-4\" target=\"\">类型转换</a><a href=\"https://segmentfault.com/a/1190000040023113#item-4\" target=\"\">你不知道的 string</a><a href=\"https://segmentfault.com/a/1190000040023113#item-4-5\" target=\"\">1 编码</a><a href=\"https://segmentfault.com/a/1190000040023113#item-4-6\" target=\"\">2 索引和遍历</a><a href=\"https://segmentfault.com/a/1190000040023113#item-4-7\" target=\"\">3 乱码和不可打印字符</a><a href=\"https://segmentfault.com/a/1190000040023113#item-4-8\" target=\"\">4 编译优化</a><a href=\"https://segmentfault.com/a/1190000040023113#item-5\" target=\"\">总结</a><a href=\"https://segmentfault.com/a/1190000040023113#item-6\" target=\"\">参考</a><a href=\"https://segmentfault.com/a/1190000040023113#item-7\" target=\"\">我</a></li><li>▲</li><li></li><li></li><li></li></ol><h3>引用和评论</h3><p><strong>推荐阅读</strong></p><p><a href=\"https://segmentfault.com/a/1190000042999076?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">一起用Go做一个小游戏（下）darjun阅读 3.6k</a><a href=\"https://segmentfault.com/a/1190000023067651?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">Go 语言操作 MySQL 之 CURD 操作Meng小羽赞 12阅读 14.6k评论 1</a><a href=\"https://segmentfault.com/a/1190000023077399?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">Go 语言操作 MySQL 之 预处理Meng小羽赞 7阅读 8.7k评论 1</a><a href=\"https://segmentfault.com/a/1190000022734659?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">Go 语言使用 net 包实现 Socket 网络编程Meng小羽赞 8阅读 18k评论 2</a><a href=\"https://segmentfault.com/a/1190000044203865?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">花了小半年开发的 AI 套壳 APP，然而大势已过，现已完全开源啦mylxsw赞 6阅读 1.4k评论 1</a><a href=\"https://segmentfault.com/a/1190000044172474?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">Gopher进阶神器：拥抱刻意练习，从新手到大师。王中阳Go赞 3阅读 5.1k</a><a href=\"https://segmentfault.com/a/1190000044204643?utm_source=sf-similar-article\" target=\"\" style=\"text-align: inherit;\">30岁程序媛求职路复盘：文转码+失业半年+PHP如何涨薪5K！？王中阳Go赞 3阅读 2.9k评论 1</a></p><p><strong>0 条评论</strong><a href=\"https://segmentfault.com/a/1190000040023113?sort=votes\" target=\"\" style=\"text-align: center;\">得票</a><a href=\"https://segmentfault.com/a/1190000040023113?sort=newest\" target=\"\" style=\"text-align: center;\">最新</a></p><p><img src=\"https://image-static.segmentfault.com/317/931/3179314346-5f61e47221e07\" alt=\"头像\" data-href=\"\" style=\"width: 38px;height: 38px;\"/></p><p>提交评论</p><p>评论支持部分 Markdown 语法：**粗体** _斜体_ [链接](http://example.com) `代码` - 列表 &gt; 引用。你还可以使用 @ 来通知其他用户。</p><p>&copy;2023 深入理解Go</p><p>除特别声明外，<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">作品采用《署名-非商业性使用-禁止演绎 4.0 国际》进行许可</a></p><p><a href=\"https://segmentfault.com/blogs\" target=\"\" style=\"text-align: center;\">使用 SegmentFault 发布</a></p><p><a href=\"https://segmentfault.com/\" target=\"\">SegmentFault - 凝聚集体智慧，推动技术进步</a></p><p><a href=\"https://segmentfault.com/tos?utm_source=sf-footer\" target=\"\">服务协议</a><a href=\"https://segmentfault.com/privacy?utm_source=sf-footer\" target=\"\">隐私政策</a><a href=\"http://beian.miit.gov.cn/\" target=\"_blank\">浙ICP备15005796号-2</a><a href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010602002000\" target=\"_blank\">浙公网安备33010602002000号</a></p><p><br></p><ol><li></li></ol><p><br></p>', 1, 1, 'VPS', '允许', '', 0, '允许', 136, 0, 0, 0, '2023-11-28 11:40:29.919', '2023-12-09 09:06:46.827', NULL, '', NULL, 'basic');
INSERT INTO `tbl_content` VALUES (8, '你好，世界', '你好，世界，欢迎来到新世界。', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063339.jpg', '2023-12-05 07:14:13.126', '2023-12-05 07:14:13.126', '<h2><strong>你好！</strong></h2><p> &nbsp; <span style=\"color: rgb(255, 77, 79);\"> 欢迎来到新世界。😀</span></p><h2><strong>代码测试</strong></h2><pre><code class=\"language-go\">func (tblContentApi *TblContentApi) UpdateTblContent(c *gin.Context) {\n	var tblContent blog.TblContent\n	err := c.ShouldBindJSON(&tblContent)\n	if err != nil {\n		response.FailWithMessage(err.Error(), c)\n		return\n	}\n	userId := utils.GetUserID(c)\n	tblContent.ID = userId\n	if err := tblContentService.UpdateTblContent(tblContent); err != nil {\n		global.GVA_LOG.Error(\"更新失败!\", zap.Error(err))\n		response.FailWithMessage(\"更新失败\", c)\n	} else {\n		response.OkWithMessage(\"更新成功\", c)\n	}\n}</code></pre><h2 style=\"text-align: left;\">测试图片</h2><p style=\"text-align: center;\"><img src=\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\" alt=\"Screenshot_2022-11-04_09-01-39.png\" data-href=\"/api/uploads/file/59ff290b8e008b4e2199feef0d82c00f_20231208203704.png\" style=\"\"></p><h2 style=\"text-align: left;\">测试视频</h2><h2></h2><div data-w-e-type=\"video\" data-w-e-is-void>\n<video poster=\"2020-03-27 07-09-23.mp4\" controls=\"true\" width=\"1024\" height=\"768\"><source src=\"/api/uploads/file/f9ef1f1d02df3f8a2d4114f73c7435e4_20231208203753.mp4\" type=\"video/mp4\"/></video>\n</div><h2>测试分割线</h2><hr/><h2>测试无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2>测试有序列表</h2><ol><li>333</li><li>3</li><li>333</li><li>33</li><li>3</li><li>33</li></ol><h3>测试表格</h3><table style=\"width: 100%;\"><tbody><tr><th colSpan=\"1\" rowSpan=\"1\" width=\"auto\">测试</th><th colSpan=\"1\" rowSpan=\"1\" width=\"auto\">测试</th><th colSpan=\"1\" rowSpan=\"1\" width=\"auto\">测试</th><th colSpan=\"1\" rowSpan=\"1\" width=\"auto\">测试</th></tr><tr><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">测试</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">测试</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">测试</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">测试</td></tr><tr><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">查水电费</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">阿斯蒂芬</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">阿斯蒂芬</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\" style=\"text-align: center;\">阿斯蒂芬</td></tr></tbody></table><h3>测试代办事项</h3><div data-w-e-type=\"todo\"><input type=\"checkbox\" disabled ><a href=\"www.baidu.com\" target=\"_blank\">😃测试</a></div><div data-w-e-type=\"todo\"><input type=\"checkbox\" disabled >🤜测试</div>', 1, 1, 'VPS', '允许', '阿斯蒂芬', 0, '允许', 346, 0, 0, 0, '2023-12-05 07:20:53.762', '2023-12-09 10:02:35.574', NULL, 'devops', '概况', 'basic');
INSERT INTO `tbl_content` VALUES (9, '百度云盘是一个垃圾', 'asdf', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063250.jpg', '2023-12-05 07:36:42.926', '2023-12-05 07:36:42.926', '<p>asdf</p>', 1, 1, 'VPS', '允许', 'sdf', 0, '允许', 4, 0, 0, 0, '2023-12-05 07:42:49.345', '2023-12-09 06:32:54.093', NULL, '', NULL, 'basic');
INSERT INTO `tbl_content` VALUES (10, 'asdf', 'asdfas', 'uploads/file/6d797ee2eded5e2119fc6f336e6c6263_20231209063542.jpg', '2023-12-05 21:07:04.374', '2023-12-05 21:07:04.374', '<p>asdf</p>', 1, 1, '机场', '允许', 'asdf', 0, '允许', 27, 0, 0, 0, '2023-12-05 21:07:21.692', '2023-12-09 10:03:14.952', NULL, 'devops', '测试', 'basic');
INSERT INTO `tbl_content` VALUES (11, 'asdf', 'asdfas', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063558.jpg', '2023-12-05 21:07:04.374', '2023-12-05 21:07:04.374', '<p>asdf</p>', 1, 1, '机场', '允许', 'asdf', 0, '允许', 12, 0, 0, 0, '2023-12-05 21:08:36.250', '2023-12-09 10:02:41.076', NULL, 'devops', '概况', 'basic');
INSERT INTO `tbl_content` VALUES (12, 'asdf', 'asdfas', 'uploads/file/46bd87611b6bcb5fab43f7cf20ac7647_20231209063616.jpg', '2023-12-05 21:07:04.374', '2023-12-05 21:07:04.374', '<p>asdf</p>', 1, 1, '机场', '允许', 'asdf', 0, '允许', 8, 0, 0, 0, '2023-12-05 21:08:51.132', '2023-12-09 10:03:25.535', NULL, 'devops', '测试', 'basic');
INSERT INTO `tbl_content` VALUES (13, '2', '1', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063631.jpg', '2023-12-05 21:29:06.017', '2023-12-05 21:29:06.017', '<p>1</p>', 1, 1, 'VPS', '允许', 'asdf', 0, '允许', 8, 0, 0, 0, '2023-12-05 21:33:44.532', '2023-12-09 10:03:33.188', NULL, 'devops', '测试', 'basic');
INSERT INTO `tbl_content` VALUES (14, '2阿斯蒂芬', '1阿斯蒂芬', 'uploads/file/d2f90fec1d5b4ac8abc4b9fe619fba0a_20231209063643.jpg', '2023-12-05 21:29:06.017', '2023-12-05 21:29:06.017', '<p>1</p>', 1, 1, 'VPS', '允许', 'asdf', 0, '允许', 1, 0, 0, 0, '2023-12-05 21:35:31.413', '2023-12-09 06:36:51.875', NULL, '', NULL, 'basic');
INSERT INTO `tbl_content` VALUES (15, '阿斯蒂芬', 'markdown', 'uploads/file/6f1155baab9a83be460c595e92739c3f_20231214083443.jpg', '2023-12-14 08:32:57.045', '2023-12-14 08:32:57.045', '### asdf\nasdfasdf\n#### asdfasdf\n#### asdfasdf\nasdfasdfasdf\nasdfasdf', NULL, 1, '软件', '禁止', '', 0, '允许', NULL, 0, 0, 0, '2023-12-14 08:35:00.784', '2023-12-15 06:35:27.692', NULL, 'devops', '测试', 'md');
INSERT INTO `tbl_content` VALUES (16, 'asdf', 'asdf ', 'uploads/file/fa42b816950b79e3c969c637657845ad_20231214224643.jpg', '2023-12-14 22:46:35.578', '2023-12-14 22:46:35.578', '# 测试图谱\n![](/apiuploads/file/33c6287e4d35965787db421e8cb16689_20231214224702.jpg)\n## 测试表格\n| col | col | col |\n| - | - | - |\n| content | content | content |\n| content | content | content |\n### 测试代码\n```vue3\nconst onUploadImg = async (files, callback) => {\n  const res = await Promise.all(\n    files.map((file) => {\n      return new Promise((rev, rej) => {\n        const form = new FormData();\n        form.append(\'file\', file);\n        console.log(path.value)\n        axios\n          .post(path.value + \"/fileUploadAndDownload/upload\", form, {\n            headers: {\n              \'Content-Type\': \'multipart/form-data\',\n              \'x-token\': userStore.token\n            }\n          })\n          .then((res) => rev(res))\n          .catch((error) => rej(error));\n      });\n    })\n  );\n\n  callback(res.map((item) => {\n    return path.value +item.data.data.file.url;\n  }));\n};\n\n```\n#### 测试todo list\n- [ ] 测试\n- [ ] 测试\n- [ ] 阿斯蒂芬\n- [ ] asdfsadf\n- [ ] asdf\n##### 测试连接\n[百度](https://www.baidu.com)\n### 测试列表\n- asdf\n- asdf\n- asdf\n- asdf\n#### 测试数字\n1. asdf\n2. asdf\n3. asdf\n4. asdf\n5. asdf\n6. asdfasdf\n7. \n', NULL, 1, '技术', '允许', '', 0, '允许', NULL, 0, 0, 0, '2023-12-14 22:50:04.696', '2023-12-15 06:35:23.038', NULL, 'devops', '测试', 'md');
INSERT INTO `tbl_content` VALUES (17, '阿斯蒂芬', '阿斯蒂芬', '', '2023-12-15 06:31:16.006', '2023-12-15 06:31:16.006', '<p>asdfaSdf</p>', NULL, 1, '软件', '禁止', '', 0, '', NULL, 0, 0, 0, '2023-12-15 06:32:25.768', '2023-12-15 06:35:31.714', NULL, 'devops', '概况', 'md');
INSERT INTO `tbl_content` VALUES (18, '阿斯蒂芬', '阿斯蒂芬', '', '2023-12-15 06:35:41.000', '2023-12-15 06:35:41.000', '<p>阿斯蒂芬</p>', NULL, 1, '软件', '允许', '', 0, '允许', NULL, 0, 0, 0, '2023-12-15 06:36:00.711', '2023-12-15 06:36:00.711', NULL, 'devops', '概况', 'basic');

-- ----------------------------
-- Table structure for tbl_content_meta
-- ----------------------------
DROP TABLE IF EXISTS `tbl_content_meta`;
CREATE TABLE `tbl_content_meta`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '关联关系ID',
  `content_id` mediumint(9) NULL DEFAULT NULL COMMENT '内容ID',
  `mate_id` mediumint(9) NULL DEFAULT NULL COMMENT '项目ID',
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_tbl_content_meta_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 96 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '内容与项目关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tbl_content_meta
-- ----------------------------
INSERT INTO `tbl_content_meta` VALUES (8, 8, 6, '2023-12-08 21:30:58.150', '2023-12-08 21:30:58.150', '2023-12-09 09:01:51.476');
INSERT INTO `tbl_content_meta` VALUES (9, 8, 8, '2023-12-08 21:30:58.153', '2023-12-08 21:30:58.153', '2023-12-09 09:07:32.392');
INSERT INTO `tbl_content_meta` VALUES (10, 9, 6, '2023-12-09 06:29:03.435', '2023-12-09 06:29:03.435', NULL);
INSERT INTO `tbl_content_meta` VALUES (13, 9, 8, '2023-12-09 06:32:54.101', '2023-12-09 06:32:54.101', NULL);
INSERT INTO `tbl_content_meta` VALUES (16, 6, 6, '2023-12-09 06:34:18.753', '2023-12-09 06:34:18.753', '2023-12-09 09:06:54.370');
INSERT INTO `tbl_content_meta` VALUES (17, 6, 8, '2023-12-09 06:34:18.756', '2023-12-09 06:34:18.756', '2023-12-09 09:06:54.370');
INSERT INTO `tbl_content_meta` VALUES (18, 5, 6, '2023-12-09 06:34:38.631', '2023-12-09 06:34:38.631', NULL);
INSERT INTO `tbl_content_meta` VALUES (19, 5, 8, '2023-12-09 06:34:38.635', '2023-12-09 06:34:38.635', NULL);
INSERT INTO `tbl_content_meta` VALUES (20, 4, 6, '2023-12-09 06:34:56.924', '2023-12-09 06:34:56.924', NULL);
INSERT INTO `tbl_content_meta` VALUES (21, 4, 8, '2023-12-09 06:34:56.928', '2023-12-09 06:34:56.928', NULL);
INSERT INTO `tbl_content_meta` VALUES (22, 3, 8, '2023-12-09 06:35:14.722', '2023-12-09 06:35:14.722', '2023-12-09 10:02:23.388');
INSERT INTO `tbl_content_meta` VALUES (23, 3, 6, '2023-12-09 06:35:14.725', '2023-12-09 06:35:14.725', '2023-12-09 10:02:23.388');
INSERT INTO `tbl_content_meta` VALUES (24, 2, 6, '2023-12-09 06:35:32.326', '2023-12-09 06:35:32.326', '2023-12-09 09:07:02.802');
INSERT INTO `tbl_content_meta` VALUES (25, 2, 8, '2023-12-09 06:35:32.328', '2023-12-09 06:35:32.328', '2023-12-09 09:07:02.802');
INSERT INTO `tbl_content_meta` VALUES (26, 10, 6, '2023-12-09 06:35:52.109', '2023-12-09 06:35:52.109', '2023-12-09 10:03:14.956');
INSERT INTO `tbl_content_meta` VALUES (27, 10, 8, '2023-12-09 06:35:52.112', '2023-12-09 06:35:52.112', '2023-12-09 10:03:14.956');
INSERT INTO `tbl_content_meta` VALUES (28, 11, 6, '2023-12-09 06:36:06.943', '2023-12-09 06:36:06.943', '2023-12-09 10:02:41.079');
INSERT INTO `tbl_content_meta` VALUES (29, 11, 8, '2023-12-09 06:36:06.946', '2023-12-09 06:36:06.946', '2023-12-09 10:02:41.079');
INSERT INTO `tbl_content_meta` VALUES (30, 12, 6, '2023-12-09 06:36:24.708', '2023-12-09 06:36:24.708', '2023-12-09 10:03:25.540');
INSERT INTO `tbl_content_meta` VALUES (31, 12, 8, '2023-12-09 06:36:24.711', '2023-12-09 06:36:24.711', '2023-12-09 10:03:25.540');
INSERT INTO `tbl_content_meta` VALUES (32, 13, 6, '2023-12-09 06:36:35.426', '2023-12-09 06:36:35.426', '2023-12-09 10:03:33.192');
INSERT INTO `tbl_content_meta` VALUES (33, 13, 8, '2023-12-09 06:36:35.429', '2023-12-09 06:36:35.429', '2023-12-09 10:03:33.192');
INSERT INTO `tbl_content_meta` VALUES (34, 14, 6, '2023-12-09 06:36:51.879', '2023-12-09 06:36:51.879', NULL);
INSERT INTO `tbl_content_meta` VALUES (35, 14, 8, '2023-12-09 06:36:51.882', '2023-12-09 06:36:51.882', NULL);
INSERT INTO `tbl_content_meta` VALUES (36, 2, 8, '2023-12-09 09:01:51.479', '2023-12-09 09:01:51.479', '2023-12-09 09:07:02.802');
INSERT INTO `tbl_content_meta` VALUES (37, 2, 6, '2023-12-09 09:01:51.482', '2023-12-09 09:01:51.482', '2023-12-09 09:07:02.802');
INSERT INTO `tbl_content_meta` VALUES (38, 7, 6, '2023-12-09 09:02:04.488', '2023-12-09 09:02:04.488', '2023-12-09 09:06:46.833');
INSERT INTO `tbl_content_meta` VALUES (39, 7, 8, '2023-12-09 09:02:04.491', '2023-12-09 09:02:04.491', '2023-12-09 09:06:46.833');
INSERT INTO `tbl_content_meta` VALUES (40, 8, 8, '2023-12-09 09:02:35.088', '2023-12-09 09:02:35.088', '2023-12-09 09:07:32.392');
INSERT INTO `tbl_content_meta` VALUES (41, 8, 6, '2023-12-09 09:02:35.092', '2023-12-09 09:02:35.092', '2023-12-09 09:07:32.392');
INSERT INTO `tbl_content_meta` VALUES (42, 7, 6, '2023-12-09 09:06:46.837', '2023-12-09 09:06:46.837', NULL);
INSERT INTO `tbl_content_meta` VALUES (43, 7, 8, '2023-12-09 09:06:46.842', '2023-12-09 09:06:46.842', NULL);
INSERT INTO `tbl_content_meta` VALUES (44, 6, 6, '2023-12-09 09:06:54.373', '2023-12-09 09:06:54.373', '2023-12-09 10:02:30.065');
INSERT INTO `tbl_content_meta` VALUES (45, 6, 8, '2023-12-09 09:06:54.382', '2023-12-09 09:06:54.382', '2023-12-09 10:02:30.065');
INSERT INTO `tbl_content_meta` VALUES (46, 2, 6, '2023-12-09 09:07:02.806', '2023-12-09 09:07:02.806', '2023-12-09 10:02:10.955');
INSERT INTO `tbl_content_meta` VALUES (47, 2, 8, '2023-12-09 09:07:02.811', '2023-12-09 09:07:02.811', '2023-12-09 10:02:10.955');
INSERT INTO `tbl_content_meta` VALUES (48, 8, 6, '2023-12-09 09:07:32.397', '2023-12-09 09:07:32.397', '2023-12-09 10:02:35.579');
INSERT INTO `tbl_content_meta` VALUES (49, 8, 8, '2023-12-09 09:07:32.400', '2023-12-09 09:07:32.400', '2023-12-09 10:02:35.579');
INSERT INTO `tbl_content_meta` VALUES (50, 2, 6, '2023-12-09 10:02:10.958', '2023-12-09 10:02:10.958', '2023-12-09 10:02:16.754');
INSERT INTO `tbl_content_meta` VALUES (51, 2, 8, '2023-12-09 10:02:10.961', '2023-12-09 10:02:10.961', '2023-12-09 10:02:16.754');
INSERT INTO `tbl_content_meta` VALUES (52, 2, 6, '2023-12-09 10:02:16.758', '2023-12-09 10:02:16.758', NULL);
INSERT INTO `tbl_content_meta` VALUES (53, 2, 8, '2023-12-09 10:02:16.761', '2023-12-09 10:02:16.761', NULL);
INSERT INTO `tbl_content_meta` VALUES (54, 3, 8, '2023-12-09 10:02:23.391', '2023-12-09 10:02:23.391', NULL);
INSERT INTO `tbl_content_meta` VALUES (55, 3, 6, '2023-12-09 10:02:23.394', '2023-12-09 10:02:23.394', NULL);
INSERT INTO `tbl_content_meta` VALUES (56, 6, 6, '2023-12-09 10:02:30.068', '2023-12-09 10:02:30.068', NULL);
INSERT INTO `tbl_content_meta` VALUES (57, 6, 8, '2023-12-09 10:02:30.071', '2023-12-09 10:02:30.071', NULL);
INSERT INTO `tbl_content_meta` VALUES (58, 8, 6, '2023-12-09 10:02:35.582', '2023-12-09 10:02:35.582', NULL);
INSERT INTO `tbl_content_meta` VALUES (59, 8, 8, '2023-12-09 10:02:35.585', '2023-12-09 10:02:35.585', NULL);
INSERT INTO `tbl_content_meta` VALUES (60, 11, 6, '2023-12-09 10:02:41.083', '2023-12-09 10:02:41.083', NULL);
INSERT INTO `tbl_content_meta` VALUES (61, 11, 8, '2023-12-09 10:02:41.085', '2023-12-09 10:02:41.085', NULL);
INSERT INTO `tbl_content_meta` VALUES (62, 10, 6, '2023-12-09 10:03:14.960', '2023-12-09 10:03:14.960', NULL);
INSERT INTO `tbl_content_meta` VALUES (63, 10, 8, '2023-12-09 10:03:14.963', '2023-12-09 10:03:14.963', NULL);
INSERT INTO `tbl_content_meta` VALUES (64, 12, 6, '2023-12-09 10:03:25.543', '2023-12-09 10:03:25.543', NULL);
INSERT INTO `tbl_content_meta` VALUES (65, 12, 8, '2023-12-09 10:03:25.547', '2023-12-09 10:03:25.547', NULL);
INSERT INTO `tbl_content_meta` VALUES (66, 13, 6, '2023-12-09 10:03:33.194', '2023-12-09 10:03:33.194', NULL);
INSERT INTO `tbl_content_meta` VALUES (67, 13, 8, '2023-12-09 10:03:33.198', '2023-12-09 10:03:33.198', NULL);
INSERT INTO `tbl_content_meta` VALUES (68, 15, 8, '2023-12-14 08:35:00.788', '2023-12-14 08:35:00.788', '2023-12-14 22:07:54.636');
INSERT INTO `tbl_content_meta` VALUES (69, 15, 6, '2023-12-14 08:35:00.791', '2023-12-14 08:35:00.791', '2023-12-14 22:07:54.636');
INSERT INTO `tbl_content_meta` VALUES (70, 15, 8, '2023-12-14 22:07:54.639', '2023-12-14 22:07:54.639', '2023-12-15 06:35:27.696');
INSERT INTO `tbl_content_meta` VALUES (71, 15, 6, '2023-12-14 22:07:54.642', '2023-12-14 22:07:54.642', '2023-12-15 06:35:27.696');
INSERT INTO `tbl_content_meta` VALUES (72, 16, 6, '2023-12-14 22:50:04.700', '2023-12-14 22:50:04.700', '2023-12-15 06:23:46.045');
INSERT INTO `tbl_content_meta` VALUES (73, 16, 8, '2023-12-14 22:50:04.703', '2023-12-14 22:50:04.703', '2023-12-15 06:23:46.045');
INSERT INTO `tbl_content_meta` VALUES (74, 16, 6, '2023-12-15 06:23:46.048', '2023-12-15 06:23:46.048', '2023-12-15 06:25:27.919');
INSERT INTO `tbl_content_meta` VALUES (75, 16, 8, '2023-12-15 06:23:46.052', '2023-12-15 06:23:46.052', '2023-12-15 06:25:27.919');
INSERT INTO `tbl_content_meta` VALUES (76, 16, 6, '2023-12-15 06:25:27.923', '2023-12-15 06:25:27.923', '2023-12-15 06:26:27.940');
INSERT INTO `tbl_content_meta` VALUES (77, 16, 8, '2023-12-15 06:25:27.927', '2023-12-15 06:25:27.927', '2023-12-15 06:26:27.940');
INSERT INTO `tbl_content_meta` VALUES (78, 16, 6, '2023-12-15 06:26:27.943', '2023-12-15 06:26:27.943', '2023-12-15 06:35:23.042');
INSERT INTO `tbl_content_meta` VALUES (79, 16, 8, '2023-12-15 06:26:27.946', '2023-12-15 06:26:27.946', '2023-12-15 06:35:23.042');
INSERT INTO `tbl_content_meta` VALUES (80, 17, 6, '2023-12-15 06:32:25.772', '2023-12-15 06:32:25.772', '2023-12-15 06:34:44.546');
INSERT INTO `tbl_content_meta` VALUES (81, 17, 8, '2023-12-15 06:32:25.774', '2023-12-15 06:32:25.774', '2023-12-15 06:34:44.546');
INSERT INTO `tbl_content_meta` VALUES (82, 17, 6, '2023-12-15 06:34:44.549', '2023-12-15 06:34:44.549', '2023-12-15 06:35:04.421');
INSERT INTO `tbl_content_meta` VALUES (83, 17, 8, '2023-12-15 06:34:44.552', '2023-12-15 06:34:44.552', '2023-12-15 06:35:04.421');
INSERT INTO `tbl_content_meta` VALUES (84, 17, 6, '2023-12-15 06:35:04.424', '2023-12-15 06:35:04.424', '2023-12-15 06:35:13.451');
INSERT INTO `tbl_content_meta` VALUES (85, 17, 8, '2023-12-15 06:35:04.427', '2023-12-15 06:35:04.427', '2023-12-15 06:35:13.451');
INSERT INTO `tbl_content_meta` VALUES (86, 17, 6, '2023-12-15 06:35:13.454', '2023-12-15 06:35:13.454', '2023-12-15 06:35:31.717');
INSERT INTO `tbl_content_meta` VALUES (87, 17, 8, '2023-12-15 06:35:13.456', '2023-12-15 06:35:13.456', '2023-12-15 06:35:31.717');
INSERT INTO `tbl_content_meta` VALUES (88, 16, 6, '2023-12-15 06:35:23.045', '2023-12-15 06:35:23.045', NULL);
INSERT INTO `tbl_content_meta` VALUES (89, 16, 8, '2023-12-15 06:35:23.048', '2023-12-15 06:35:23.048', NULL);
INSERT INTO `tbl_content_meta` VALUES (90, 15, 8, '2023-12-15 06:35:27.699', '2023-12-15 06:35:27.699', NULL);
INSERT INTO `tbl_content_meta` VALUES (91, 15, 6, '2023-12-15 06:35:27.702', '2023-12-15 06:35:27.702', NULL);
INSERT INTO `tbl_content_meta` VALUES (92, 17, 6, '2023-12-15 06:35:31.720', '2023-12-15 06:35:31.720', NULL);
INSERT INTO `tbl_content_meta` VALUES (93, 17, 8, '2023-12-15 06:35:31.724', '2023-12-15 06:35:31.724', NULL);
INSERT INTO `tbl_content_meta` VALUES (94, 18, 8, '2023-12-15 06:36:00.715', '2023-12-15 06:36:00.715', NULL);
INSERT INTO `tbl_content_meta` VALUES (95, 18, 6, '2023-12-15 06:36:00.719', '2023-12-15 06:36:00.719', NULL);

-- ----------------------------
-- Table structure for tbl_meta
-- ----------------------------
DROP TABLE IF EXISTS `tbl_meta`;
CREATE TABLE `tbl_meta`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '项目主键',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目名称',
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目类型',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目描述',
  `count` smallint(6) NULL DEFAULT NULL COMMENT '项目所属内容个数',
  `order` smallint(6) NULL DEFAULT NULL COMMENT '内容排序',
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_tbl_meta_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '项目表：主要包括标签类型、文章类型、链接类型' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tbl_meta
-- ----------------------------
INSERT INTO `tbl_meta` VALUES (1, '1', '1', '1', 10, 1, '2023-11-16 07:45:44.833', '2023-11-16 07:45:44.833', '2023-11-16 07:45:53.897');
INSERT INTO `tbl_meta` VALUES (2, 'VPS', '菜单', 'VPS 测速、优惠推荐', 0, 1, '2023-11-16 08:34:30.087', '2023-11-17 08:00:31.513', NULL);
INSERT INTO `tbl_meta` VALUES (3, '软件', '菜单', '软件安装教程', 0, 1, '2023-11-17 07:59:40.275', '2023-12-02 08:03:21.636', NULL);
INSERT INTO `tbl_meta` VALUES (4, '机场', '菜单', '机场测速、机场推荐', 0, 1, '2023-11-17 08:00:50.059', '2023-11-17 08:00:50.059', NULL);
INSERT INTO `tbl_meta` VALUES (5, '搞钱', '菜单', '被动搞钱、主动搞钱', 0, 4, '2023-11-17 08:01:31.542', '2023-11-17 08:15:20.314', NULL);
INSERT INTO `tbl_meta` VALUES (6, '原创', '标签', '', 0, 1, '2023-11-17 08:01:47.652', '2023-11-17 08:01:47.652', NULL);
INSERT INTO `tbl_meta` VALUES (7, '下载', '菜单', '镜像下载、iso下载、操作系统下载、镜像源下载。', 0, 1, '2023-11-17 08:01:55.584', '2023-12-02 08:03:03.380', NULL);
INSERT INTO `tbl_meta` VALUES (8, '站长推荐', '标签', '', 0, 1, '2023-11-17 08:02:06.202', '2023-11-17 08:02:06.202', NULL);
INSERT INTO `tbl_meta` VALUES (9, '技术', '菜单', '工作内容，开发技术、运维技术等', 0, 1, '2023-12-02 08:02:15.967', '2023-12-02 08:02:15.967', NULL);
INSERT INTO `tbl_meta` VALUES (10, 'devops', '文章集', 'devops 相关文章', 0, 1, '2023-12-09 09:53:42.248', '2023-12-09 09:53:42.248', NULL);
INSERT INTO `tbl_meta` VALUES (11, '概况', '文章子集', '', 0, 1, '2023-12-09 09:54:06.128', '2023-12-09 09:54:06.128', NULL);
INSERT INTO `tbl_meta` VALUES (12, '测试', '文章子集', '', 0, 1, '2023-12-09 10:03:00.413', '2023-12-09 10:03:00.413', NULL);

-- ----------------------------
-- Table structure for train
-- ----------------------------
DROP TABLE IF EXISTS `train`;
CREATE TABLE `train`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  `deleted_at` datetime(0) NULL DEFAULT NULL,
  `train_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '培训内容',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_train_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
